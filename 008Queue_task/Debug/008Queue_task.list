
008Queue_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  080080e0  080080e0  000180e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008510  08008510  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008518  08008518  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001355c  20000018  08008538  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013574  08008538  00023574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021145  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004039  00000000  00000000  0004118d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  000451c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c0  00000000  00000000  00046930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002560b  00000000  00000000  00047ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ba58  00000000  00000000  0006d4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3dd  00000000  00000000  00088f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  00168384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080080c8 	.word	0x080080c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080080c8 	.word	0x080080c8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200134cc 	.word	0x200134cc

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b96e 	b.w	800057c <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002bc:	9d08      	ldr	r5, [sp, #32]
 80002be:	4604      	mov	r4, r0
 80002c0:	468c      	mov	ip, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	f040 8083 	bne.w	80003ce <__udivmoddi4+0x116>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4617      	mov	r7, r2
 80002cc:	d947      	bls.n	800035e <__udivmoddi4+0xa6>
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	b142      	cbz	r2, 80002e6 <__udivmoddi4+0x2e>
 80002d4:	f1c2 0020 	rsb	r0, r2, #32
 80002d8:	fa24 f000 	lsr.w	r0, r4, r0
 80002dc:	4091      	lsls	r1, r2
 80002de:	4097      	lsls	r7, r2
 80002e0:	ea40 0c01 	orr.w	ip, r0, r1
 80002e4:	4094      	lsls	r4, r2
 80002e6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002ea:	0c23      	lsrs	r3, r4, #16
 80002ec:	fbbc f6f8 	udiv	r6, ip, r8
 80002f0:	fa1f fe87 	uxth.w	lr, r7
 80002f4:	fb08 c116 	mls	r1, r8, r6, ip
 80002f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fc:	fb06 f10e 	mul.w	r1, r6, lr
 8000300:	4299      	cmp	r1, r3
 8000302:	d909      	bls.n	8000318 <__udivmoddi4+0x60>
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	f106 30ff 	add.w	r0, r6, #4294967295
 800030a:	f080 8119 	bcs.w	8000540 <__udivmoddi4+0x288>
 800030e:	4299      	cmp	r1, r3
 8000310:	f240 8116 	bls.w	8000540 <__udivmoddi4+0x288>
 8000314:	3e02      	subs	r6, #2
 8000316:	443b      	add	r3, r7
 8000318:	1a5b      	subs	r3, r3, r1
 800031a:	b2a4      	uxth	r4, r4
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000328:	fb00 fe0e 	mul.w	lr, r0, lr
 800032c:	45a6      	cmp	lr, r4
 800032e:	d909      	bls.n	8000344 <__udivmoddi4+0x8c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	f080 8105 	bcs.w	8000544 <__udivmoddi4+0x28c>
 800033a:	45a6      	cmp	lr, r4
 800033c:	f240 8102 	bls.w	8000544 <__udivmoddi4+0x28c>
 8000340:	3802      	subs	r0, #2
 8000342:	443c      	add	r4, r7
 8000344:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000348:	eba4 040e 	sub.w	r4, r4, lr
 800034c:	2600      	movs	r6, #0
 800034e:	b11d      	cbz	r5, 8000358 <__udivmoddi4+0xa0>
 8000350:	40d4      	lsrs	r4, r2
 8000352:	2300      	movs	r3, #0
 8000354:	e9c5 4300 	strd	r4, r3, [r5]
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	b902      	cbnz	r2, 8000362 <__udivmoddi4+0xaa>
 8000360:	deff      	udf	#255	; 0xff
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	2a00      	cmp	r2, #0
 8000368:	d150      	bne.n	800040c <__udivmoddi4+0x154>
 800036a:	1bcb      	subs	r3, r1, r7
 800036c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	2601      	movs	r6, #1
 8000376:	fbb3 fcfe 	udiv	ip, r3, lr
 800037a:	0c21      	lsrs	r1, r4, #16
 800037c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000380:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000384:	fb08 f30c 	mul.w	r3, r8, ip
 8000388:	428b      	cmp	r3, r1
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0xe4>
 800038c:	1879      	adds	r1, r7, r1
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0xe2>
 8000394:	428b      	cmp	r3, r1
 8000396:	f200 80e9 	bhi.w	800056c <__udivmoddi4+0x2b4>
 800039a:	4684      	mov	ip, r0
 800039c:	1ac9      	subs	r1, r1, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x10c>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x10a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80d9 	bhi.w	8000574 <__udivmoddi4+0x2bc>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e7bf      	b.n	800034e <__udivmoddi4+0x96>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d909      	bls.n	80003e6 <__udivmoddi4+0x12e>
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	f000 80b1 	beq.w	800053a <__udivmoddi4+0x282>
 80003d8:	2600      	movs	r6, #0
 80003da:	e9c5 0100 	strd	r0, r1, [r5]
 80003de:	4630      	mov	r0, r6
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	fab3 f683 	clz	r6, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d14a      	bne.n	8000484 <__udivmoddi4+0x1cc>
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d302      	bcc.n	80003f8 <__udivmoddi4+0x140>
 80003f2:	4282      	cmp	r2, r0
 80003f4:	f200 80b8 	bhi.w	8000568 <__udivmoddi4+0x2b0>
 80003f8:	1a84      	subs	r4, r0, r2
 80003fa:	eb61 0103 	sbc.w	r1, r1, r3
 80003fe:	2001      	movs	r0, #1
 8000400:	468c      	mov	ip, r1
 8000402:	2d00      	cmp	r5, #0
 8000404:	d0a8      	beq.n	8000358 <__udivmoddi4+0xa0>
 8000406:	e9c5 4c00 	strd	r4, ip, [r5]
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f603 	lsr.w	r6, r0, r3
 8000414:	4097      	lsls	r7, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800041e:	40d9      	lsrs	r1, r3
 8000420:	4330      	orrs	r0, r6
 8000422:	0c03      	lsrs	r3, r0, #16
 8000424:	fbb1 f6fe 	udiv	r6, r1, lr
 8000428:	fa1f f887 	uxth.w	r8, r7
 800042c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f108 	mul.w	r1, r6, r8
 8000438:	4299      	cmp	r1, r3
 800043a:	fa04 f402 	lsl.w	r4, r4, r2
 800043e:	d909      	bls.n	8000454 <__udivmoddi4+0x19c>
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	f106 3cff 	add.w	ip, r6, #4294967295
 8000446:	f080 808d 	bcs.w	8000564 <__udivmoddi4+0x2ac>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 808a 	bls.w	8000564 <__udivmoddi4+0x2ac>
 8000450:	3e02      	subs	r6, #2
 8000452:	443b      	add	r3, r7
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b281      	uxth	r1, r0
 8000458:	fbb3 f0fe 	udiv	r0, r3, lr
 800045c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000460:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000464:	fb00 f308 	mul.w	r3, r0, r8
 8000468:	428b      	cmp	r3, r1
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x1c4>
 800046c:	1879      	adds	r1, r7, r1
 800046e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000472:	d273      	bcs.n	800055c <__udivmoddi4+0x2a4>
 8000474:	428b      	cmp	r3, r1
 8000476:	d971      	bls.n	800055c <__udivmoddi4+0x2a4>
 8000478:	3802      	subs	r0, #2
 800047a:	4439      	add	r1, r7
 800047c:	1acb      	subs	r3, r1, r3
 800047e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000482:	e778      	b.n	8000376 <__udivmoddi4+0xbe>
 8000484:	f1c6 0c20 	rsb	ip, r6, #32
 8000488:	fa03 f406 	lsl.w	r4, r3, r6
 800048c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000490:	431c      	orrs	r4, r3
 8000492:	fa20 f70c 	lsr.w	r7, r0, ip
 8000496:	fa01 f306 	lsl.w	r3, r1, r6
 800049a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800049e:	fa21 f10c 	lsr.w	r1, r1, ip
 80004a2:	431f      	orrs	r7, r3
 80004a4:	0c3b      	lsrs	r3, r7, #16
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fa1f f884 	uxth.w	r8, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004b6:	fb09 fa08 	mul.w	sl, r9, r8
 80004ba:	458a      	cmp	sl, r1
 80004bc:	fa02 f206 	lsl.w	r2, r2, r6
 80004c0:	fa00 f306 	lsl.w	r3, r0, r6
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x220>
 80004c6:	1861      	adds	r1, r4, r1
 80004c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80004cc:	d248      	bcs.n	8000560 <__udivmoddi4+0x2a8>
 80004ce:	458a      	cmp	sl, r1
 80004d0:	d946      	bls.n	8000560 <__udivmoddi4+0x2a8>
 80004d2:	f1a9 0902 	sub.w	r9, r9, #2
 80004d6:	4421      	add	r1, r4
 80004d8:	eba1 010a 	sub.w	r1, r1, sl
 80004dc:	b2bf      	uxth	r7, r7
 80004de:	fbb1 f0fe 	udiv	r0, r1, lr
 80004e2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004ea:	fb00 f808 	mul.w	r8, r0, r8
 80004ee:	45b8      	cmp	r8, r7
 80004f0:	d907      	bls.n	8000502 <__udivmoddi4+0x24a>
 80004f2:	19e7      	adds	r7, r4, r7
 80004f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f8:	d22e      	bcs.n	8000558 <__udivmoddi4+0x2a0>
 80004fa:	45b8      	cmp	r8, r7
 80004fc:	d92c      	bls.n	8000558 <__udivmoddi4+0x2a0>
 80004fe:	3802      	subs	r0, #2
 8000500:	4427      	add	r7, r4
 8000502:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000506:	eba7 0708 	sub.w	r7, r7, r8
 800050a:	fba0 8902 	umull	r8, r9, r0, r2
 800050e:	454f      	cmp	r7, r9
 8000510:	46c6      	mov	lr, r8
 8000512:	4649      	mov	r1, r9
 8000514:	d31a      	bcc.n	800054c <__udivmoddi4+0x294>
 8000516:	d017      	beq.n	8000548 <__udivmoddi4+0x290>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x27a>
 800051a:	ebb3 020e 	subs.w	r2, r3, lr
 800051e:	eb67 0701 	sbc.w	r7, r7, r1
 8000522:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000526:	40f2      	lsrs	r2, r6
 8000528:	ea4c 0202 	orr.w	r2, ip, r2
 800052c:	40f7      	lsrs	r7, r6
 800052e:	e9c5 2700 	strd	r2, r7, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	462e      	mov	r6, r5
 800053c:	4628      	mov	r0, r5
 800053e:	e70b      	b.n	8000358 <__udivmoddi4+0xa0>
 8000540:	4606      	mov	r6, r0
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0x60>
 8000544:	4618      	mov	r0, r3
 8000546:	e6fd      	b.n	8000344 <__udivmoddi4+0x8c>
 8000548:	4543      	cmp	r3, r8
 800054a:	d2e5      	bcs.n	8000518 <__udivmoddi4+0x260>
 800054c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000550:	eb69 0104 	sbc.w	r1, r9, r4
 8000554:	3801      	subs	r0, #1
 8000556:	e7df      	b.n	8000518 <__udivmoddi4+0x260>
 8000558:	4608      	mov	r0, r1
 800055a:	e7d2      	b.n	8000502 <__udivmoddi4+0x24a>
 800055c:	4660      	mov	r0, ip
 800055e:	e78d      	b.n	800047c <__udivmoddi4+0x1c4>
 8000560:	4681      	mov	r9, r0
 8000562:	e7b9      	b.n	80004d8 <__udivmoddi4+0x220>
 8000564:	4666      	mov	r6, ip
 8000566:	e775      	b.n	8000454 <__udivmoddi4+0x19c>
 8000568:	4630      	mov	r0, r6
 800056a:	e74a      	b.n	8000402 <__udivmoddi4+0x14a>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	4439      	add	r1, r7
 8000572:	e713      	b.n	800039c <__udivmoddi4+0xe4>
 8000574:	3802      	subs	r0, #2
 8000576:	443c      	add	r4, r7
 8000578:	e724      	b.n	80003c4 <__udivmoddi4+0x10c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af02      	add	r7, sp, #8
	for(int i = 0; i < 4; i++)
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	e00e      	b.n	80005aa <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <led_effect_stop+0x3c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	2200      	movs	r2, #0
 800059e:	2103      	movs	r1, #3
 80005a0:	f005 fa54 	bl	8005a4c <xTimerGenericCommand>
	for(int i = 0; i < 4; i++)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	dded      	ble.n	800058c <led_effect_stop+0xc>
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20013368 	.word	0x20013368

080005c0 <led_effect>:

void led_effect(int n)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005c8:	f7ff ffda 	bl	8000580 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a08      	ldr	r2, [pc, #32]	; (80005f4 <led_effect+0x34>)
 80005d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005d6:	f004 fadb 	bl	8004b90 <xTaskGetTickCount>
 80005da:	4602      	mov	r2, r0
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	4620      	mov	r0, r4
 80005e8:	f005 fa30 	bl	8005a4c <xTimerGenericCommand>
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	20013368 	.word	0x20013368

080005f8 <LED_effect1>:

void LED_effect1() {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
	const char* msg_led = "LED1\n";
 80005fe:	4b07      	ldr	r3, [pc, #28]	; (800061c <LED_effect1+0x24>)
 8000600:	607b      	str	r3, [r7, #4]
	xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <LED_effect1+0x28>)
 8000604:	6818      	ldr	r0, [r3, #0]
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	2300      	movs	r3, #0
 800060a:	f04f 32ff 	mov.w	r2, #4294967295
 800060e:	f003 faef 	bl	8003bf0 <xQueueGenericSend>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	080080e0 	.word	0x080080e0
 8000620:	20013410 	.word	0x20013410

08000624 <LED_effect2>:

void LED_effect2() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	const char* msg_led = "LED2\n";
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <LED_effect2+0x24>)
 800062c:	607b      	str	r3, [r7, #4]
	xQueueSend(q_print, &msg_led, portMAX_DELAY);
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <LED_effect2+0x28>)
 8000630:	6818      	ldr	r0, [r3, #0]
 8000632:	1d39      	adds	r1, r7, #4
 8000634:	2300      	movs	r3, #0
 8000636:	f04f 32ff 	mov.w	r2, #4294967295
 800063a:	f003 fad9 	bl	8003bf0 <xQueueGenericSend>
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	080080e8 	.word	0x080080e8
 800064c:	20013410 	.word	0x20013410

08000650 <LED_effect3>:

void LED_effect3() {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	const char* msg_led = "LED3\n";
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <LED_effect3+0x24>)
 8000658:	607b      	str	r3, [r7, #4]
	xQueueSend(q_print, &msg_led, portMAX_DELAY);
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <LED_effect3+0x28>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	1d39      	adds	r1, r7, #4
 8000660:	2300      	movs	r3, #0
 8000662:	f04f 32ff 	mov.w	r2, #4294967295
 8000666:	f003 fac3 	bl	8003bf0 <xQueueGenericSend>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	080080f0 	.word	0x080080f0
 8000678:	20013410 	.word	0x20013410

0800067c <LED_effect4>:

void LED_effect4() {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
	const char* msg_led = "LED4\n";
 8000682:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <LED_effect4+0x24>)
 8000684:	607b      	str	r3, [r7, #4]
	xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8000686:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <LED_effect4+0x28>)
 8000688:	6818      	ldr	r0, [r3, #0]
 800068a:	1d39      	adds	r1, r7, #4
 800068c:	2300      	movs	r3, #0
 800068e:	f04f 32ff 	mov.w	r2, #4294967295
 8000692:	f003 faad 	bl	8003bf0 <xQueueGenericSend>
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	080080f8 	.word	0x080080f8
 80006a4:	20013410 	.word	0x20013410

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fe27 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f8e3 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f9cf 	bl	8000a58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006ba:	f000 f979 	bl	80009b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006be:	f000 f9a1 	bl	8000a04 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80006c2:	f000 f94f 	bl	8000964 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80006c6:	4b5a      	ldr	r3, [pc, #360]	; (8000830 <main+0x188>)
 80006c8:	9301      	str	r3, [sp, #4]
 80006ca:	2302      	movs	r3, #2
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2300      	movs	r3, #0
 80006d0:	22fa      	movs	r2, #250	; 0xfa
 80006d2:	4958      	ldr	r1, [pc, #352]	; (8000834 <main+0x18c>)
 80006d4:	4858      	ldr	r0, [pc, #352]	; (8000838 <main+0x190>)
 80006d6:	f003 ffe7 	bl	80046a8 <xTaskCreate>
 80006da:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 80006dc:	69bb      	ldr	r3, [r7, #24]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d00a      	beq.n	80006f8 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e6:	f383 8811 	msr	BASEPRI, r3
 80006ea:	f3bf 8f6f 	isb	sy
 80006ee:	f3bf 8f4f 	dsb	sy
 80006f2:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006f4:	bf00      	nop
 80006f6:	e7fe      	b.n	80006f6 <main+0x4e>

  status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 80006f8:	4b50      	ldr	r3, [pc, #320]	; (800083c <main+0x194>)
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	22fa      	movs	r2, #250	; 0xfa
 8000704:	494e      	ldr	r1, [pc, #312]	; (8000840 <main+0x198>)
 8000706:	484f      	ldr	r0, [pc, #316]	; (8000844 <main+0x19c>)
 8000708:	f003 ffce 	bl	80046a8 <xTaskCreate>
 800070c:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d00a      	beq.n	800072a <main+0x82>
        __asm volatile
 8000714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000718:	f383 8811 	msr	BASEPRI, r3
 800071c:	f3bf 8f6f 	isb	sy
 8000720:	f3bf 8f4f 	dsb	sy
 8000724:	613b      	str	r3, [r7, #16]
    }
 8000726:	bf00      	nop
 8000728:	e7fe      	b.n	8000728 <main+0x80>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800072a:	4b47      	ldr	r3, [pc, #284]	; (8000848 <main+0x1a0>)
 800072c:	9301      	str	r3, [sp, #4]
 800072e:	2302      	movs	r3, #2
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	22fa      	movs	r2, #250	; 0xfa
 8000736:	4945      	ldr	r1, [pc, #276]	; (800084c <main+0x1a4>)
 8000738:	4845      	ldr	r0, [pc, #276]	; (8000850 <main+0x1a8>)
 800073a:	f003 ffb5 	bl	80046a8 <xTaskCreate>
 800073e:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d00a      	beq.n	800075c <main+0xb4>
        __asm volatile
 8000746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800074a:	f383 8811 	msr	BASEPRI, r3
 800074e:	f3bf 8f6f 	isb	sy
 8000752:	f3bf 8f4f 	dsb	sy
 8000756:	60fb      	str	r3, [r7, #12]
    }
 8000758:	bf00      	nop
 800075a:	e7fe      	b.n	800075a <main+0xb2>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800075c:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <main+0x1ac>)
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	2302      	movs	r3, #2
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	2300      	movs	r3, #0
 8000766:	22fa      	movs	r2, #250	; 0xfa
 8000768:	493b      	ldr	r1, [pc, #236]	; (8000858 <main+0x1b0>)
 800076a:	483c      	ldr	r0, [pc, #240]	; (800085c <main+0x1b4>)
 800076c:	f003 ff9c 	bl	80046a8 <xTaskCreate>
 8000770:	61b8      	str	r0, [r7, #24]
  configASSERT(status == pdPASS);
 8000772:	69bb      	ldr	r3, [r7, #24]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d00a      	beq.n	800078e <main+0xe6>
        __asm volatile
 8000778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800077c:	f383 8811 	msr	BASEPRI, r3
 8000780:	f3bf 8f6f 	isb	sy
 8000784:	f3bf 8f4f 	dsb	sy
 8000788:	60bb      	str	r3, [r7, #8]
    }
 800078a:	bf00      	nop
 800078c:	e7fe      	b.n	800078c <main+0xe4>

  //status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
  //configASSERT(status == pdPASS);
  q_data = xQueueCreate(10, sizeof(char));
 800078e:	2200      	movs	r2, #0
 8000790:	2101      	movs	r1, #1
 8000792:	200a      	movs	r0, #10
 8000794:	f003 f9a4 	bl	8003ae0 <xQueueGenericCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a31      	ldr	r2, [pc, #196]	; (8000860 <main+0x1b8>)
 800079c:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <main+0x1b8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d10a      	bne.n	80007bc <main+0x114>
        __asm volatile
 80007a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007aa:	f383 8811 	msr	BASEPRI, r3
 80007ae:	f3bf 8f6f 	isb	sy
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	607b      	str	r3, [r7, #4]
    }
 80007b8:	bf00      	nop
 80007ba:	e7fe      	b.n	80007ba <main+0x112>

  q_print = xQueueCreate(10, sizeof(size_t));
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	200a      	movs	r0, #10
 80007c2:	f003 f98d 	bl	8003ae0 <xQueueGenericCreate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a26      	ldr	r2, [pc, #152]	; (8000864 <main+0x1bc>)
 80007ca:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 80007cc:	4b25      	ldr	r3, [pc, #148]	; (8000864 <main+0x1bc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d10a      	bne.n	80007ea <main+0x142>
        __asm volatile
 80007d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d8:	f383 8811 	msr	BASEPRI, r3
 80007dc:	f3bf 8f6f 	isb	sy
 80007e0:	f3bf 8f4f 	dsb	sy
 80007e4:	603b      	str	r3, [r7, #0]
    }
 80007e6:	bf00      	nop
 80007e8:	e7fe      	b.n	80007e8 <main+0x140>


  for (int i = 0; i < 4; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	e013      	b.n	8000818 <main+0x170>
	  handle_led_timer[i] = xTimerCreate("led_timeer", pdMS_TO_TICKS(500), pdTRUE, (void *)(i+1), led_effect_callback);
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	3301      	adds	r3, #1
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <main+0x1c0>)
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4613      	mov	r3, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000802:	481a      	ldr	r0, [pc, #104]	; (800086c <main+0x1c4>)
 8000804:	f005 f8c6 	bl	8005994 <xTimerCreate>
 8000808:	4602      	mov	r2, r0
 800080a:	4919      	ldr	r1, [pc, #100]	; (8000870 <main+0x1c8>)
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 4; i++) {
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3301      	adds	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	2b03      	cmp	r3, #3
 800081c:	dde8      	ble.n	80007f0 <main+0x148>
  }
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&user_data, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	4914      	ldr	r1, [pc, #80]	; (8000874 <main+0x1cc>)
 8000822:	4815      	ldr	r0, [pc, #84]	; (8000878 <main+0x1d0>)
 8000824:	f002 fab7 	bl	8002d96 <HAL_UART_Receive_IT>
  vTaskStartScheduler();
 8000828:	f004 f8a2 	bl	8004970 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	e7fe      	b.n	800082c <main+0x184>
 800082e:	bf00      	nop
 8000830:	2001340c 	.word	0x2001340c
 8000834:	08008100 	.word	0x08008100
 8000838:	08000eed 	.word	0x08000eed
 800083c:	200133c0 	.word	0x200133c0
 8000840:	0800810c 	.word	0x0800810c
 8000844:	08001149 	.word	0x08001149
 8000848:	20013434 	.word	0x20013434
 800084c:	08008118 	.word	0x08008118
 8000850:	08001109 	.word	0x08001109
 8000854:	20013438 	.word	0x20013438
 8000858:	08008124 	.word	0x08008124
 800085c:	08000fdd 	.word	0x08000fdd
 8000860:	200133c4 	.word	0x200133c4
 8000864:	20013410 	.word	0x20013410
 8000868:	08000b79 	.word	0x08000b79
 800086c:	08008130 	.word	0x08008130
 8000870:	20013368 	.word	0x20013368
 8000874:	2001343c 	.word	0x2001343c
 8000878:	200133c8 	.word	0x200133c8

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b098      	sub	sp, #96	; 0x60
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f007 fc14 	bl	80080b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <SystemClock_Config+0xe0>)
 80008b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b6:	4a29      	ldr	r2, [pc, #164]	; (800095c <SystemClock_Config+0xe0>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	6413      	str	r3, [r2, #64]	; 0x40
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <SystemClock_Config+0xe0>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <SystemClock_Config+0xe4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a23      	ldr	r2, [pc, #140]	; (8000960 <SystemClock_Config+0xe4>)
 80008d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <SystemClock_Config+0xe4>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008e6:	2309      	movs	r3, #9
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 f851 	bl	80019a4 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000908:	f000 f970 	bl	8000bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	230f      	movs	r3, #15
 800090e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f001 fab4 	bl	8001e94 <HAL_RCC_ClockConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000932:	f000 f95b 	bl	8000bec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000936:	2302      	movs	r3, #2
 8000938:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800093a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800093e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fcd3 	bl	80022f0 <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000950:	f000 f94c 	bl	8000bec <Error_Handler>
  }
}
 8000954:	bf00      	nop
 8000956:	3760      	adds	r7, #96	; 0x60
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40007000 	.word	0x40007000

08000964 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_RTC_Init+0x44>)
 800096a:	4a10      	ldr	r2, [pc, #64]	; (80009ac <MX_RTC_Init+0x48>)
 800096c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_RTC_Init+0x44>)
 8000970:	2240      	movs	r2, #64	; 0x40
 8000972:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_RTC_Init+0x44>)
 8000976:	227f      	movs	r2, #127	; 0x7f
 8000978:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_RTC_Init+0x44>)
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_RTC_Init+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_RTC_Init+0x44>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_RTC_Init+0x44>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_RTC_Init+0x44>)
 8000994:	f001 fd8e 	bl	80024b4 <HAL_RTC_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800099e:	f000 f925 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20013414 	.word	0x20013414
 80009ac:	40002800 	.word	0x40002800

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART1_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART1_UART_Init+0x4c>)
 80009e8:	f002 f8f6 	bl	8002bd8 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f8fb 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200133c8 	.word	0x200133c8
 8000a00:	40011000 	.word	0x40011000

08000a04 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART3_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a34:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	f002 f8cb 	bl	8002bd8 <HAL_UART_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8000a48:	f000 f8d0 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2001337c 	.word	0x2001337c
 8000a54:	40004800 	.word	0x40004800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a16      	ldr	r2, [pc, #88]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_GPIO_Init+0x84>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a0f      	ldr	r2, [pc, #60]	; (8000adc <MX_GPIO_Init+0x84>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_GPIO_Init+0x84>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_GPIO_Init+0x84>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a08      	ldr	r2, [pc, #32]	; (8000adc <MX_GPIO_Init+0x84>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_GPIO_Init+0x84>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

}
 8000ace:	bf00      	nop
 8000ad0:	3714      	adds	r7, #20
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]
	char dummy;
	char* msg = 'ab';
 8000ae8:	f246 1362 	movw	r3, #24930	; 0x6162
 8000aec:	60fb      	str	r3, [r7, #12]
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <HAL_UART_RxCpltCallback+0x88>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fd4b 	bl	800458e <xQueueIsQueueFullFromISR>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d107      	bne.n	8000b0e <HAL_UART_RxCpltCallback+0x2e>
		xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_UART_RxCpltCallback+0x88>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	4919      	ldr	r1, [pc, #100]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b08:	f003 f998 	bl	8003e3c <xQueueGenericSendFromISR>
 8000b0c:	e013      	b.n	8000b36 <HAL_UART_RxCpltCallback+0x56>

	} else {

		if(user_data == '\n') {
 8000b0e:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	d10e      	bne.n	8000b36 <HAL_UART_RxCpltCallback+0x56>
			//delete last data bye

			xQueueReceiveFromISR(q_data, (void *)&dummy, NULL);
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <HAL_UART_RxCpltCallback+0x88>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f107 010b 	add.w	r1, r7, #11
 8000b20:	2200      	movs	r2, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 fb58 	bl	80041d8 <xQueueReceiveFromISR>

			xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_UART_RxCpltCallback+0x88>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	490e      	ldr	r1, [pc, #56]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b32:	f003 f983 	bl	8003e3c <xQueueGenericSendFromISR>

		}
	}
	if(user_data == 'a') {
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b61      	cmp	r3, #97	; 0x61
 8000b3e:	d10a      	bne.n	8000b56 <HAL_UART_RxCpltCallback+0x76>
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_UART_RxCpltCallback+0x90>)
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	2300      	movs	r3, #0
 8000b46:	9301      	str	r3, [sp, #4]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	f004 fd5f 	bl	8005614 <xTaskGenericNotifyFromISR>
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&user_data, 1);
 8000b56:	2201      	movs	r2, #1
 8000b58:	4904      	ldr	r1, [pc, #16]	; (8000b6c <HAL_UART_RxCpltCallback+0x8c>)
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <HAL_UART_RxCpltCallback+0x94>)
 8000b5c:	f002 f91b 	bl	8002d96 <HAL_UART_Receive_IT>
}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200133c4 	.word	0x200133c4
 8000b6c:	2001343c 	.word	0x2001343c
 8000b70:	200133c0 	.word	0x200133c0
 8000b74:	200133c8 	.word	0x200133c8

08000b78 <led_effect_callback>:

void led_effect_callback(TimerHandle_t xTimer)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f005 fa43 	bl	800600c <pvTimerGetTimerID>
 8000b86:	4603      	mov	r3, r0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d816      	bhi.n	8000bc0 <led_effect_callback+0x48>
 8000b92:	a201      	add	r2, pc, #4	; (adr r2, 8000b98 <led_effect_callback+0x20>)
 8000b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b98:	08000ba9 	.word	0x08000ba9
 8000b9c:	08000baf 	.word	0x08000baf
 8000ba0:	08000bb5 	.word	0x08000bb5
 8000ba4:	08000bbb 	.word	0x08000bbb
	switch (id) {
		case 1:
			LED_effect1();
 8000ba8:	f7ff fd26 	bl	80005f8 <LED_effect1>
		break;
 8000bac:	e008      	b.n	8000bc0 <led_effect_callback+0x48>

		case 2:
			LED_effect2();
 8000bae:	f7ff fd39 	bl	8000624 <LED_effect2>
		break;
 8000bb2:	e005      	b.n	8000bc0 <led_effect_callback+0x48>

		case 3:
			LED_effect3();
 8000bb4:	f7ff fd4c 	bl	8000650 <LED_effect3>
		break;
 8000bb8:	e002      	b.n	8000bc0 <led_effect_callback+0x48>

		case 4:
			LED_effect4();
 8000bba:	f7ff fd5f 	bl	800067c <LED_effect4>
		break;
 8000bbe:	bf00      	nop
	}
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bda:	f000 fbb3 	bl	8001344 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40001000 	.word	0x40001000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_RTC_MspInit+0x24>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d102      	bne.n	8000c60 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_RTC_MspInit+0x28>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40002800 	.word	0x40002800
 8000c70:	42470e3c 	.word	0x42470e3c

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	; 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a46      	ldr	r2, [pc, #280]	; (8000dac <HAL_UART_MspInit+0x138>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d135      	bne.n	8000d02 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b45      	ldr	r3, [pc, #276]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca6:	4b42      	ldr	r3, [pc, #264]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	4b3e      	ldr	r3, [pc, #248]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a3d      	ldr	r2, [pc, #244]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4832      	ldr	r0, [pc, #200]	; (8000db4 <HAL_UART_MspInit+0x140>)
 8000cec:	f000 fcbe 	bl	800166c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2106      	movs	r1, #6
 8000cf4:	2025      	movs	r0, #37	; 0x25
 8000cf6:	f000 fbfd 	bl	80014f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cfa:	2025      	movs	r0, #37	; 0x25
 8000cfc:	f000 fc16 	bl	800152c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d00:	e050      	b.n	8000da4 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a2c      	ldr	r2, [pc, #176]	; (8000db8 <HAL_UART_MspInit+0x144>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d14b      	bne.n	8000da4 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	6313      	str	r3, [r2, #48]	; 0x30
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4c:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6313      	str	r3, [r2, #48]	; 0x30
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0x13c>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d72:	2307      	movs	r3, #7
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	480f      	ldr	r0, [pc, #60]	; (8000dbc <HAL_UART_MspInit+0x148>)
 8000d7e:	f000 fc75 	bl	800166c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d90:	2303      	movs	r3, #3
 8000d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d94:	2307      	movs	r3, #7
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <HAL_UART_MspInit+0x14c>)
 8000da0:	f000 fc64 	bl	800166c <HAL_GPIO_Init>
}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	; 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40011000 	.word	0x40011000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	40020400 	.word	0x40020400
 8000dc0:	40020800 	.word	0x40020800

08000dc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	2036      	movs	r0, #54	; 0x36
 8000dda:	f000 fb8b 	bl	80014f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dde:	2036      	movs	r0, #54	; 0x36
 8000de0:	f000 fba4 	bl	800152c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_InitTick+0xa0>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_InitTick+0xa0>)
 8000dee:	f043 0310 	orr.w	r3, r3, #16
 8000df2:	6413      	str	r3, [r2, #64]	; 0x40
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_InitTick+0xa0>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e00:	f107 0210 	add.w	r2, r7, #16
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f001 fa3e 	bl	800228c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e10:	f001 fa14 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 8000e14:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <HAL_InitTick+0xa4>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	0c9b      	lsrs	r3, r3, #18
 8000e20:	3b01      	subs	r3, #1
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <HAL_InitTick+0xac>)
 8000e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e32:	4a0e      	ldr	r2, [pc, #56]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e44:	4809      	ldr	r0, [pc, #36]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e46:	f001 fc1a 	bl	800267e <HAL_TIM_Base_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d104      	bne.n	8000e5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_InitTick+0xa8>)
 8000e52:	f001 fc6d 	bl	8002730 <HAL_TIM_Base_Start_IT>
 8000e56:	4603      	mov	r3, r0
 8000e58:	e000      	b.n	8000e5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3730      	adds	r7, #48	; 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	431bde83 	.word	0x431bde83
 8000e6c:	20013440 	.word	0x20013440
 8000e70:	40001000 	.word	0x40001000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	f001 ffa7 	bl	8002df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200133c8 	.word	0x200133c8

08000eb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <TIM6_DAC_IRQHandler+0x10>)
 8000eba:	f001 fca9 	bl	8002810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20013440 	.word	0x20013440

08000ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <SystemInit+0x20>)
 8000ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <SystemInit+0x20>)
 8000ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <menu_task>:
#include "main.h"
int extract_command(command_t *cmd);
void process_command(command_t *cmd);
extern UART_HandleTypeDef huart1;
char* msg_inv = "Invalid option\n";
void menu_task(void *param) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	const char* msg_menu = "=======================\n"
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <menu_task+0xd4>)
 8000ef6:	60fb      	str	r3, [r7, #12]
						   "=======================\n"
						   "   LED effect    ---> 0\n "
						   "   Date and time ---> 1\n "
						   "   Exit          ---> 2\n "
			               "Enter your choice here : ";
	char* msg = "received\r\n";
 8000ef8:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <menu_task+0xd8>)
 8000efa:	61fb      	str	r3, [r7, #28]
	while (1) {
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <menu_task+0xdc>)
 8000efe:	6818      	ldr	r0, [r3, #0]
 8000f00:	f107 010c 	add.w	r1, r7, #12
 8000f04:	2300      	movs	r3, #0
 8000f06:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0a:	f002 fe71 	bl	8003bf0 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f004 f9ff 	bl	8005320 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	61bb      	str	r3, [r7, #24]
		if(cmd->len == 1) {
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d133      	bne.n	8000f96 <menu_task+0xaa>
			option = cmd->payload[0] - 48;
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	3b30      	subs	r3, #48	; 0x30
 8000f34:	617b      	str	r3, [r7, #20]
			switch(option) {
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d035      	beq.n	8000fa8 <menu_task+0xbc>
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	dc20      	bgt.n	8000f84 <menu_task+0x98>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <menu_task+0x64>
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d00d      	beq.n	8000f6a <menu_task+0x7e>
 8000f4e:	e019      	b.n	8000f84 <menu_task+0x98>
				case 0:
					curr_state = sLedEffect;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <menu_task+0xe0>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <menu_task+0xe4>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	2200      	movs	r2, #0
 8000f62:	2100      	movs	r1, #0
 8000f64:	f004 fa64 	bl	8005430 <xTaskGenericNotify>
				break;
 8000f68:	e01f      	b.n	8000faa <menu_task+0xbe>

				case 1:
					curr_state = sRtcMenu;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <menu_task+0xe0>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <menu_task+0xe8>)
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	2300      	movs	r3, #0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f004 fa57 	bl	8005430 <xTaskGenericNotify>
				break;
 8000f82:	e012      	b.n	8000faa <menu_task+0xbe>

				case 2:
				break;

				default:
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <menu_task+0xdc>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	4912      	ldr	r1, [pc, #72]	; (8000fd8 <menu_task+0xec>)
 8000f90:	f002 fe2e 	bl	8003bf0 <xQueueGenericSend>
					continue;
 8000f94:	e013      	b.n	8000fbe <menu_task+0xd2>
			}
		} else {
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <menu_task+0xdc>)
 8000f98:	6818      	ldr	r0, [r3, #0]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <menu_task+0xec>)
 8000fa2:	f002 fe25 	bl	8003bf0 <xQueueGenericSend>
			continue;
 8000fa6:	e00a      	b.n	8000fbe <menu_task+0xd2>
				break;
 8000fa8:	bf00      	nop
		}
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f004 f9b1 	bl	8005320 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8000fbe:	e79d      	b.n	8000efc <menu_task+0x10>
 8000fc0:	0800814c 	.word	0x0800814c
 8000fc4:	080081f4 	.word	0x080081f4
 8000fc8:	20013410 	.word	0x20013410
 8000fcc:	20000034 	.word	0x20000034
 8000fd0:	20013438 	.word	0x20013438
 8000fd4:	20013378 	.word	0x20013378
 8000fd8:	20000004 	.word	0x20000004

08000fdc <led_task>:
	}
}

void led_task(void *param) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	const char* msg_led = "========================\n"
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <led_task+0x104>)
 8000fe6:	60fb      	str	r3, [r7, #12]
						  "(none,e1,e2,e3,e4)\n"
						  "Enter your choice here : ";

	while(1){
		/*TODO: Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f004 f993 	bl	8005320 <xTaskGenericNotifyWait>

		/*TODO: Print LED menu */
		xQueueSend(q_print, &msg_led, portMAX_DELAY);
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <led_task+0x108>)
 8000ffc:	6818      	ldr	r0, [r3, #0]
 8000ffe:	f107 010c 	add.w	r1, r7, #12
 8001002:	2300      	movs	r3, #0
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	f002 fdf2 	bl	8003bf0 <xQueueGenericSend>

		/*TODO: wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	9200      	str	r2, [sp, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	2000      	movs	r0, #0
 800101c:	f004 f980 	bl	8005320 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	617b      	str	r3, [r7, #20]
		if(cmd->len <= 4)
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b04      	cmp	r3, #4
 800102a:	d843      	bhi.n	80010b4 <led_task+0xd8>
		{
			if(! strcmp((char*)cmd->payload,"none"))
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	492e      	ldr	r1, [pc, #184]	; (80010e8 <led_task+0x10c>)
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f917 	bl	8000264 <strcmp>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <led_task+0x66>
				led_effect_stop();
 800103c:	f7ff faa0 	bl	8000580 <led_effect_stop>
 8001040:	e040      	b.n	80010c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e1"))
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4929      	ldr	r1, [pc, #164]	; (80010ec <led_task+0x110>)
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f90c 	bl	8000264 <strcmp>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <led_task+0x7e>
				led_effect(1);
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fab4 	bl	80005c0 <led_effect>
 8001058:	e034      	b.n	80010c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e2"))
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	4924      	ldr	r1, [pc, #144]	; (80010f0 <led_task+0x114>)
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff f900 	bl	8000264 <strcmp>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d103      	bne.n	8001072 <led_task+0x96>
				led_effect(2);
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff faa8 	bl	80005c0 <led_effect>
 8001070:	e028      	b.n	80010c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e3"))
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	491f      	ldr	r1, [pc, #124]	; (80010f4 <led_task+0x118>)
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f8f4 	bl	8000264 <strcmp>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d103      	bne.n	800108a <led_task+0xae>
				led_effect(3);
 8001082:	2003      	movs	r0, #3
 8001084:	f7ff fa9c 	bl	80005c0 <led_effect>
 8001088:	e01c      	b.n	80010c4 <led_task+0xe8>
			else if (! strcmp((char*)cmd->payload,"e4"))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	491a      	ldr	r1, [pc, #104]	; (80010f8 <led_task+0x11c>)
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f8e8 	bl	8000264 <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d103      	bne.n	80010a2 <led_task+0xc6>
				led_effect(4);
 800109a:	2004      	movs	r0, #4
 800109c:	f7ff fa90 	bl	80005c0 <led_effect>
 80010a0:	e010      	b.n	80010c4 <led_task+0xe8>
			else
				xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <led_task+0x108>)
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	4913      	ldr	r1, [pc, #76]	; (80010fc <led_task+0x120>)
 80010ae:	f002 fd9f 	bl	8003bf0 <xQueueGenericSend>
 80010b2:	e007      	b.n	80010c4 <led_task+0xe8>
					/*TODO: print invalid message */
		} else
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <led_task+0x108>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	f04f 32ff 	mov.w	r2, #4294967295
 80010be:	490f      	ldr	r1, [pc, #60]	; (80010fc <led_task+0x120>)
 80010c0:	f002 fd96 	bl	8003bf0 <xQueueGenericSend>
		/*TODO : update state variable */
		curr_state = sMainMenu;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <led_task+0x124>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]

		/*TODO : Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <led_task+0x128>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	f004 f9aa 	bl	8005430 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80010dc:	e784      	b.n	8000fe8 <led_task+0xc>
 80010de:	bf00      	nop
 80010e0:	08008200 	.word	0x08008200
 80010e4:	20013410 	.word	0x20013410
 80010e8:	08008278 	.word	0x08008278
 80010ec:	08008280 	.word	0x08008280
 80010f0:	08008284 	.word	0x08008284
 80010f4:	08008288 	.word	0x08008288
 80010f8:	0800828c 	.word	0x0800828c
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000034 	.word	0x20000034
 8001104:	2001340c 	.word	0x2001340c

08001108 <print_task>:

		}//while super loop end
}


void print_task(void *param) {
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while (1) {
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <print_task+0x38>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f107 010c 	add.w	r1, r7, #12
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	4618      	mov	r0, r3
 800111e:	f002 ff4b 	bl	8003fb8 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001122:	68fc      	ldr	r4, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f8a6 	bl	8000278 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	4621      	mov	r1, r4
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <print_task+0x3c>)
 8001138:	f001 fd9b 	bl	8002c72 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800113c:	e7e8      	b.n	8001110 <print_task+0x8>
 800113e:	bf00      	nop
 8001140:	20013410 	.word	0x20013410
 8001144:	200133c8 	.word	0x200133c8

08001148 <cmd_handler_task>:
	}
}

void cmd_handler_task(void *param) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	char* msg = "received\r\n";
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <cmd_handler_task+0x34>)
 8001152:	61fb      	str	r3, [r7, #28]
	while (1) {
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2300      	movs	r3, #0
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2000      	movs	r0, #0
 8001162:	f004 f8dd 	bl	8005320 <xTaskGenericNotifyWait>
 8001166:	61b8      	str	r0, [r7, #24]
		//HAL_UART_Transmit(&huart1, msg, strlen((char*)msg), HAL_MAX_DELAY);
		if(ret == pdTRUE) {
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d1f2      	bne.n	8001154 <cmd_handler_task+0xc>
			process_command(&cmd);
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f804 	bl	8001180 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001178:	e7ec      	b.n	8001154 <cmd_handler_task+0xc>
 800117a:	bf00      	nop
 800117c:	080081f4 	.word	0x080081f4

08001180 <process_command>:
		}

	}
}

void process_command(command_t *cmd) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f839 	bl	8001200 <extract_command>
	char* msg = "received\r\n";
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <process_command+0x6c>)
 8001190:	60fb      	str	r3, [r7, #12]
	switch(curr_state)
 8001192:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <process_command+0x70>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b05      	cmp	r3, #5
 8001198:	dc24      	bgt.n	80011e4 <process_command+0x64>
 800119a:	2b02      	cmp	r3, #2
 800119c:	da18      	bge.n	80011d0 <process_command+0x50>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <process_command+0x28>
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d00a      	beq.n	80011bc <process_command+0x3c>
		case sRtcReport:
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
		break;

	}
}
 80011a6:	e01d      	b.n	80011e4 <process_command+0x64>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <process_command+0x74>)
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	2300      	movs	r3, #0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2303      	movs	r3, #3
 80011b4:	2100      	movs	r1, #0
 80011b6:	f004 f93b 	bl	8005430 <xTaskGenericNotify>
		break;
 80011ba:	e013      	b.n	80011e4 <process_command+0x64>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <process_command+0x78>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	2300      	movs	r3, #0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2303      	movs	r3, #3
 80011c8:	2100      	movs	r1, #0
 80011ca:	f004 f931 	bl	8005430 <xTaskGenericNotify>
		break;
 80011ce:	e009      	b.n	80011e4 <process_command+0x64>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <process_command+0x7c>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	2300      	movs	r3, #0
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2303      	movs	r3, #3
 80011dc:	2100      	movs	r1, #0
 80011de:	f004 f927 	bl	8005430 <xTaskGenericNotify>
		break;
 80011e2:	bf00      	nop
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	080081f4 	.word	0x080081f4
 80011f0:	20000034 	.word	0x20000034
 80011f4:	2001340c 	.word	0x2001340c
 80011f8:	20013438 	.word	0x20013438
 80011fc:	20013378 	.word	0x20013378

08001200 <extract_command>:

int extract_command(command_t *cmd)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;
	uint8_t i = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	75fb      	strb	r3, [r7, #23]
	status = uxQueueMessagesWaiting(q_data);
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <extract_command+0x90>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 f88e 	bl	8004332 <uxQueueMessagesWaiting>
 8001216:	4603      	mov	r3, r0
 8001218:	613b      	str	r3, [r7, #16]
	char* msg = "recieved";
 800121a:	4b1e      	ldr	r3, [pc, #120]	; (8001294 <extract_command+0x94>)
 800121c:	60fb      	str	r3, [r7, #12]
	if(!status) {
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <extract_command+0x2a>
		return -1;
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	e02d      	b.n	8001286 <extract_command+0x86>
	}

	do {
		status = xQueueReceive(q_data, &item, 0);
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <extract_command+0x90>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f107 010b 	add.w	r1, r7, #11
 8001232:	2200      	movs	r2, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f002 febf 	bl	8003fb8 <xQueueReceive>
 800123a:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <extract_command+0x50>
 8001242:	7dfb      	ldrb	r3, [r7, #23]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	75fa      	strb	r2, [r7, #23]
 8001248:	461a      	mov	r2, r3
 800124a:	7af9      	ldrb	r1, [r7, #11]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart1, (cmd->payload), strlen((char*)cmd->payload), HAL_MAX_DELAY);
 8001250:	687c      	ldr	r4, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f80f 	bl	8000278 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	4621      	mov	r1, r4
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <extract_command+0x98>)
 8001266:	f001 fd04 	bl	8002c72 <HAL_UART_Transmit>
	} while(item != 'a');
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	2b61      	cmp	r3, #97	; 0x61
 800126e:	d1dc      	bne.n	800122a <extract_command+0x2a>
	cmd->payload[i-1] = '\n';
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	3b01      	subs	r3, #1
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	210a      	movs	r1, #10
 8001278:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	3b01      	subs	r3, #1
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
	return 0;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	200133c4 	.word	0x200133c4
 8001294:	08008458 	.word	0x08008458
 8001298:	200133c8 	.word	0x200133c8

0800129c <vApplicationIdleHook>:
 * utility.c
 *
 *  Created on: May 28, 2021
 *      Author: minia
 */
void vApplicationIdleHook(void) {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b0:	480d      	ldr	r0, [pc, #52]	; (80012e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b2:	490e      	ldr	r1, [pc, #56]	; (80012ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b4:	4a0e      	ldr	r2, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b8:	e002      	b.n	80012c0 <LoopCopyDataInit>

080012ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012be:	3304      	adds	r3, #4

080012c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c4:	d3f9      	bcc.n	80012ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c8:	4c0b      	ldr	r4, [pc, #44]	; (80012f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012cc:	e001      	b.n	80012d2 <LoopFillZerobss>

080012ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d0:	3204      	adds	r2, #4

080012d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d4:	d3fb      	bcc.n	80012ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012d6:	f7ff fdf7 	bl	8000ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f006 fead 	bl	8008038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff f9e3 	bl	80006a8 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80012f0:	08008520 	.word	0x08008520
  ldr r2, =_sbss
 80012f4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80012f8:	20013574 	.word	0x20013574

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_Init+0x40>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_Init+0x40>)
 8001316:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_Init+0x40>)
 8001322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001328:	2003      	movs	r0, #3
 800132a:	f000 f8d8 	bl	80014de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800132e:	2000      	movs	r0, #0
 8001330:	f7ff fd48 	bl	8000dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001334:	f7ff fc60 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023c00 	.word	0x40023c00

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	20013488 	.word	0x20013488

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20013488 	.word	0x20013488

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff ff4c 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001506:	f7ff ff61 	bl	80013cc <__NVIC_GetPriorityGrouping>
 800150a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	6978      	ldr	r0, [r7, #20]
 8001512:	f7ff ffb1 	bl	8001478 <NVIC_EncodePriority>
 8001516:	4602      	mov	r2, r0
 8001518:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff80 	bl	8001424 <__NVIC_SetPriority>
}
 8001524:	bf00      	nop
 8001526:	3718      	adds	r7, #24
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff54 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001556:	f7ff ff09 	bl	800136c <HAL_GetTick>
 800155a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d008      	beq.n	800157a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2280      	movs	r2, #128	; 0x80
 800156c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e052      	b.n	8001620 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0216 	bic.w	r2, r2, #22
 8001588:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695a      	ldr	r2, [r3, #20]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001598:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <HAL_DMA_Abort+0x62>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0208 	bic.w	r2, r2, #8
 80015b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0201 	bic.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ca:	e013      	b.n	80015f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015cc:	f7ff fece 	bl	800136c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d90c      	bls.n	80015f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2220      	movs	r2, #32
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2203      	movs	r2, #3
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e015      	b.n	8001620 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1e4      	bne.n	80015cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001606:	223f      	movs	r2, #63	; 0x3f
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d004      	beq.n	8001646 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00c      	b.n	8001660 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2205      	movs	r2, #5
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	e16b      	b.n	8001960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 815a 	bne.w	800195a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d130      	bne.n	8001720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016f4:	2201      	movs	r2, #1
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0201 	and.w	r2, r3, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b03      	cmp	r3, #3
 800172a:	d017      	beq.n	800175c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d123      	bne.n	80017b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	08da      	lsrs	r2, r3, #3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3208      	adds	r2, #8
 8001770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	220f      	movs	r2, #15
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	08da      	lsrs	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3208      	adds	r2, #8
 80017aa:	69b9      	ldr	r1, [r7, #24]
 80017ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0203 	and.w	r2, r3, #3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80b4 	beq.w	800195a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b60      	ldr	r3, [pc, #384]	; (8001978 <HAL_GPIO_Init+0x30c>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_GPIO_Init+0x30c>)
 80017fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001800:	6453      	str	r3, [r2, #68]	; 0x44
 8001802:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <HAL_GPIO_Init+0x30c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180e:	4a5b      	ldr	r2, [pc, #364]	; (800197c <HAL_GPIO_Init+0x310>)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	3302      	adds	r3, #2
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a52      	ldr	r2, [pc, #328]	; (8001980 <HAL_GPIO_Init+0x314>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d02b      	beq.n	8001892 <HAL_GPIO_Init+0x226>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a51      	ldr	r2, [pc, #324]	; (8001984 <HAL_GPIO_Init+0x318>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d025      	beq.n	800188e <HAL_GPIO_Init+0x222>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a50      	ldr	r2, [pc, #320]	; (8001988 <HAL_GPIO_Init+0x31c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01f      	beq.n	800188a <HAL_GPIO_Init+0x21e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4f      	ldr	r2, [pc, #316]	; (800198c <HAL_GPIO_Init+0x320>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d019      	beq.n	8001886 <HAL_GPIO_Init+0x21a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a4e      	ldr	r2, [pc, #312]	; (8001990 <HAL_GPIO_Init+0x324>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x216>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x328>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00d      	beq.n	800187e <HAL_GPIO_Init+0x212>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a4c      	ldr	r2, [pc, #304]	; (8001998 <HAL_GPIO_Init+0x32c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x20e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4b      	ldr	r2, [pc, #300]	; (800199c <HAL_GPIO_Init+0x330>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d101      	bne.n	8001876 <HAL_GPIO_Init+0x20a>
 8001872:	2307      	movs	r3, #7
 8001874:	e00e      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001876:	2308      	movs	r3, #8
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800187a:	2306      	movs	r3, #6
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x228>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x228>
 8001892:	2300      	movs	r3, #0
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a4:	4935      	ldr	r1, [pc, #212]	; (800197c <HAL_GPIO_Init+0x310>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d6:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_GPIO_Init+0x334>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001900:	4a27      	ldr	r2, [pc, #156]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192a:	4a1d      	ldr	r2, [pc, #116]	; (80019a0 <HAL_GPIO_Init+0x334>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_GPIO_Init+0x334>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	f67f ae90 	bls.w	8001688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	; 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40013800 	.word	0x40013800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40021400 	.word	0x40021400
 8001998:	40021800 	.word	0x40021800
 800199c:	40021c00 	.word	0x40021c00
 80019a0:	40013c00 	.word	0x40013c00

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e264      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d075      	beq.n	8001aae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019c2:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 030c 	and.w	r3, r3, #12
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d00c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ce:	4ba0      	ldr	r3, [pc, #640]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d112      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019da:	4b9d      	ldr	r3, [pc, #628]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	4b99      	ldr	r3, [pc, #612]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d05b      	beq.n	8001aac <HAL_RCC_OscConfig+0x108>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d157      	bne.n	8001aac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e23f      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_OscConfig+0x74>
 8001a0a:	4b91      	ldr	r3, [pc, #580]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a90      	ldr	r2, [pc, #576]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xb0>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a8a      	ldr	r2, [pc, #552]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a87      	ldr	r2, [pc, #540]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xb0>
 8001a3c:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a83      	ldr	r2, [pc, #524]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a80      	ldr	r2, [pc, #512]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc86 	bl	800136c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc82 	bl	800136c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e204      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xc0>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc72 	bl	800136c <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc6e 	bl	800136c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1f0      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b6c      	ldr	r3, [pc, #432]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0xe8>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aba:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad2:	4b5f      	ldr	r3, [pc, #380]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x152>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c4      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b56      	ldr	r3, [pc, #344]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4952      	ldr	r1, [pc, #328]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCC_OscConfig+0x2b0>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fc27 	bl	800136c <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fc23 	bl	800136c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a5      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4940      	ldr	r1, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <HAL_RCC_OscConfig+0x2b0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fc06 	bl	800136c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fc02 	bl	800136c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e184      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d030      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d016      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_OscConfig+0x2b4>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9c:	f7ff fbe6 	bl	800136c <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fbe2 	bl	800136c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e164      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x200>
 8001bc2:	e015      	b.n	8001bf0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_OscConfig+0x2b4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bca:	f7ff fbcf 	bl	800136c <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fbcb 	bl	800136c <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e14d      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1f0      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80a0 	beq.w	8001d3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10f      	bne.n	8001c2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a0e      	ldr	r2, [pc, #56]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x2b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d121      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <HAL_RCC_OscConfig+0x2b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a07      	ldr	r2, [pc, #28]	; (8001c5c <HAL_RCC_OscConfig+0x2b8>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7ff fb91 	bl	800136c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4c:	e011      	b.n	8001c72 <HAL_RCC_OscConfig+0x2ce>
 8001c4e:	bf00      	nop
 8001c50:	40023800 	.word	0x40023800
 8001c54:	42470000 	.word	0x42470000
 8001c58:	42470e80 	.word	0x42470e80
 8001c5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7ff fb84 	bl	800136c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e106      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HAL_RCC_OscConfig+0x4e4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d106      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
 8001c86:	4b81      	ldr	r3, [pc, #516]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4a80      	ldr	r2, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6713      	str	r3, [r2, #112]	; 0x70
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x32a>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001c9c:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb4:	e00b      	b.n	8001cce <HAL_RCC_OscConfig+0x32a>
 8001cb6:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cba:	4a74      	ldr	r2, [pc, #464]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fb49 	bl	800136c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff fb45 	bl	800136c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0c5      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCC_OscConfig+0x33a>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fb33 	bl	800136c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fb2f 	bl	800136c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e0af      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a55      	ldr	r2, [pc, #340]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 809b 	beq.w	8001e7e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d48:	4b50      	ldr	r3, [pc, #320]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d05c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d141      	bne.n	8001de0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	; (8001e90 <HAL_RCC_OscConfig+0x4ec>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fb03 	bl	800136c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff faff 	bl	800136c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e081      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7c:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	431a      	orrs	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	019b      	lsls	r3, r3, #6
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	3b01      	subs	r3, #1
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	061b      	lsls	r3, r3, #24
 8001dac:	4937      	ldr	r1, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db2:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_OscConfig+0x4ec>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fad8 	bl	800136c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff fad4 	bl	800136c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e056      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
 8001dde:	e04e      	b.n	8001e7e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x4ec>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff fac1 	bl	800136c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff fabd 	bl	800136c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e03f      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x44a>
 8001e0c:	e037      	b.n	8001e7e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e032      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0x4e8>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d028      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d121      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d11a      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e50:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d111      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	085b      	lsrs	r3, r3, #1
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	42470060 	.word	0x42470060

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0cc      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b68      	ldr	r3, [pc, #416]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d90c      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d044      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d119      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d107      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d109      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e067      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f72:	4b37      	ldr	r3, [pc, #220]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 0203 	bic.w	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	4934      	ldr	r1, [pc, #208]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f84:	f7ff f9f2 	bl	800136c <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	e00a      	b.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7ff f9ee 	bl	800136c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e04f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 020c 	and.w	r2, r3, #12
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d1eb      	bne.n	8001f8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d20c      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b22      	ldr	r3, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490a      	ldr	r1, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fec2 	bl	8000dc4 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00
 8002050:	40023800 	.word	0x40023800
 8002054:	080084ec 	.word	0x080084ec
 8002058:	20000000 	.word	0x20000000
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	607b      	str	r3, [r7, #4]
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	2300      	movs	r3, #0
 8002072:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002078:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d00d      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002084:	2b08      	cmp	r3, #8
 8002086:	f200 80bd 	bhi.w	8002204 <HAL_RCC_GetSysClockFreq+0x1a4>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x3a>
 8002092:	e0b7      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b61      	ldr	r3, [pc, #388]	; (800221c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002096:	60bb      	str	r3, [r7, #8]
       break;
 8002098:	e0b7      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209a:	4b61      	ldr	r3, [pc, #388]	; (8002220 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800209c:	60bb      	str	r3, [r7, #8]
      break;
 800209e:	e0b4      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4b5d      	ldr	r3, [pc, #372]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020aa:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d04d      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	461a      	mov	r2, r3
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020c6:	f04f 0100 	mov.w	r1, #0
 80020ca:	ea02 0800 	and.w	r8, r2, r0
 80020ce:	ea03 0901 	and.w	r9, r3, r1
 80020d2:	4640      	mov	r0, r8
 80020d4:	4649      	mov	r1, r9
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	014b      	lsls	r3, r1, #5
 80020e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020e4:	0142      	lsls	r2, r0, #5
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	ebb0 0008 	subs.w	r0, r0, r8
 80020ee:	eb61 0109 	sbc.w	r1, r1, r9
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	018b      	lsls	r3, r1, #6
 80020fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002100:	0182      	lsls	r2, r0, #6
 8002102:	1a12      	subs	r2, r2, r0
 8002104:	eb63 0301 	sbc.w	r3, r3, r1
 8002108:	f04f 0000 	mov.w	r0, #0
 800210c:	f04f 0100 	mov.w	r1, #0
 8002110:	00d9      	lsls	r1, r3, #3
 8002112:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002116:	00d0      	lsls	r0, r2, #3
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	eb12 0208 	adds.w	r2, r2, r8
 8002120:	eb43 0309 	adc.w	r3, r3, r9
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	f04f 0100 	mov.w	r1, #0
 800212c:	0259      	lsls	r1, r3, #9
 800212e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002132:	0250      	lsls	r0, r2, #9
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	461a      	mov	r2, r3
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	f7fe f8a0 	bl	8000288 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4613      	mov	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e04a      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	461a      	mov	r2, r3
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002162:	f04f 0100 	mov.w	r1, #0
 8002166:	ea02 0400 	and.w	r4, r2, r0
 800216a:	ea03 0501 	and.w	r5, r3, r1
 800216e:	4620      	mov	r0, r4
 8002170:	4629      	mov	r1, r5
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	014b      	lsls	r3, r1, #5
 800217c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002180:	0142      	lsls	r2, r0, #5
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	1b00      	subs	r0, r0, r4
 8002188:	eb61 0105 	sbc.w	r1, r1, r5
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	018b      	lsls	r3, r1, #6
 8002196:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800219a:	0182      	lsls	r2, r0, #6
 800219c:	1a12      	subs	r2, r2, r0
 800219e:	eb63 0301 	sbc.w	r3, r3, r1
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	00d9      	lsls	r1, r3, #3
 80021ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021b0:	00d0      	lsls	r0, r2, #3
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	1912      	adds	r2, r2, r4
 80021b8:	eb45 0303 	adc.w	r3, r5, r3
 80021bc:	f04f 0000 	mov.w	r0, #0
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	0299      	lsls	r1, r3, #10
 80021c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021ca:	0290      	lsls	r0, r2, #10
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	f7fe f854 	bl	8000288 <__aeabi_uldivmod>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4613      	mov	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	3301      	adds	r3, #1
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002200:	60bb      	str	r3, [r7, #8]
      break;
 8002202:	e002      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002206:	60bb      	str	r3, [r7, #8]
      break;
 8002208:	bf00      	nop
    }
  }
  return sysclockfreq;
 800220a:	68bb      	ldr	r3, [r7, #8]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	00f42400 	.word	0x00f42400
 8002220:	007a1200 	.word	0x007a1200

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	080084fc 	.word	0x080084fc

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	; (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	080084fc 	.word	0x080084fc

0800228c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	220f      	movs	r2, #15
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0203 	and.w	r2, r3, #3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_GetClockConfig+0x5c>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_RCC_GetClockConfig+0x60>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0207 	and.w	r2, r3, #7
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	601a      	str	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40023c00 	.word	0x40023c00

080022f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002314:	2b00      	cmp	r3, #0
 8002316:	d035      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002318:	4b62      	ldr	r3, [pc, #392]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800231e:	f7ff f825 	bl	800136c <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002326:	f7ff f821 	bl	800136c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0b0      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002338:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f0      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	019a      	lsls	r2, r3, #6
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	071b      	lsls	r3, r3, #28
 8002350:	4955      	ldr	r1, [pc, #340]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002358:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800235e:	f7ff f805 	bl	800136c <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002366:	f7ff f801 	bl	800136c <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e090      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002378:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8083 	beq.w	8002498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	4b44      	ldr	r3, [pc, #272]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	4a43      	ldr	r2, [pc, #268]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800239c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a3e      	ldr	r2, [pc, #248]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80023ba:	f7fe ffd7 	bl	800136c <HAL_GetTick>
 80023be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023c0:	e008      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7fe ffd3 	bl	800136c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e062      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80023d4:	4b35      	ldr	r3, [pc, #212]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e0:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d02f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d028      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002406:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002414:	4a24      	ldr	r2, [pc, #144]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800241a:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b01      	cmp	r3, #1
 8002424:	d114      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002426:	f7fe ffa1 	bl	800136c <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe ff9d 	bl	800136c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e02a      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	4b18      	ldr	r3, [pc, #96]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ee      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002458:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800245c:	d10d      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800246e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002472:	490d      	ldr	r1, [pc, #52]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
 8002478:	e005      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002480:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002484:	6093      	str	r3, [r2, #8]
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002488:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002492:	4905      	ldr	r1, [pc, #20]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002494:	4313      	orrs	r3, r2
 8002496:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	42470068 	.word	0x42470068
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42470e40 	.word	0x42470e40

080024b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e083      	b.n	80025ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	7f5b      	ldrb	r3, [r3, #29]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fbb6 	bl	8000c48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2202      	movs	r2, #2
 80024e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	22ca      	movs	r2, #202	; 0xca
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2253      	movs	r2, #83	; 0x53
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f897 	bl	8002626 <RTC_EnterInitMode>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2204      	movs	r2, #4
 800250a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e05e      	b.n	80025ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800251e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002522:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	041a      	lsls	r2, r3, #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10e      	bne.n	800259c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f829 	bl	80025d6 <HAL_RTC_WaitForSynchro>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	22ff      	movs	r2, #255	; 0xff
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e018      	b.n	80025ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	699a      	ldr	r2, [r3, #24]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	22ff      	movs	r2, #255	; 0xff
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b084      	sub	sp, #16
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025f2:	f7fe febb 	bl	800136c <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80025f8:	e009      	b.n	800260e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025fa:	f7fe feb7 	bl	800136c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002608:	d901      	bls.n	800260e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e007      	b.n	800261e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d119      	bne.n	8002674 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800264a:	f7fe fe8f 	bl	800136c <HAL_GetTick>
 800264e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002650:	e009      	b.n	8002666 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002652:	f7fe fe8b 	bl	800136c <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002660:	d901      	bls.n	8002666 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e007      	b.n	8002676 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ee      	beq.n	8002652 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e041      	b.n	8002714 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f839 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f000 f9d7 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2201      	movs	r2, #1
 80026d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d001      	beq.n	8002748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04e      	b.n	80027e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a23      	ldr	r2, [pc, #140]	; (80027f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d022      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d01d      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d018      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <HAL_TIM_Base_Start_IT+0xcc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d013      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1c      	ldr	r2, [pc, #112]	; (8002800 <HAL_TIM_Base_Start_IT+0xd0>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00e      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_TIM_Base_Start_IT+0xd4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d009      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_TIM_Base_Start_IT+0xd8>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d004      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0x80>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_TIM_Base_Start_IT+0xdc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d111      	bne.n	80027d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b06      	cmp	r3, #6
 80027c0:	d010      	beq.n	80027e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d2:	e007      	b.n	80027e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0201 	orr.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40000400 	.word	0x40000400
 80027fc:	40000800 	.word	0x40000800
 8002800:	40000c00 	.word	0x40000c00
 8002804:	40010400 	.word	0x40010400
 8002808:	40014000 	.word	0x40014000
 800280c:	40001800 	.word	0x40001800

08002810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0202 	mvn.w	r2, #2
 800283c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8ee 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8e0 	bl	8002a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f8f1 	bl	8002a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b04      	cmp	r3, #4
 8002878:	d122      	bne.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0204 	mvn.w	r2, #4
 8002890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2202      	movs	r2, #2
 8002896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f8c4 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 80028ac:	e005      	b.n	80028ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f8b6 	bl	8002a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f8c7 	bl	8002a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d122      	bne.n	8002914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d11b      	bne.n	8002914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0208 	mvn.w	r2, #8
 80028e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2204      	movs	r2, #4
 80028ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f89a 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f88c 	bl	8002a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f89d 	bl	8002a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b10      	cmp	r3, #16
 8002920:	d122      	bne.n	8002968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b10      	cmp	r3, #16
 800292e:	d11b      	bne.n	8002968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0210 	mvn.w	r2, #16
 8002938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2208      	movs	r2, #8
 800293e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f870 	bl	8002a34 <HAL_TIM_IC_CaptureCallback>
 8002954:	e005      	b.n	8002962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f862 	bl	8002a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f873 	bl	8002a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10e      	bne.n	8002994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d107      	bne.n	8002994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0201 	mvn.w	r2, #1
 800298c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe f91a 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b80      	cmp	r3, #128	; 0x80
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d107      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f902 	bl	8002bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d10e      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d107      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f838 	bl	8002a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d10e      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d107      	bne.n	8002a18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f06f 0220 	mvn.w	r2, #32
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8cc 	bl	8002bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a40      	ldr	r2, [pc, #256]	; (8002b84 <TIM_Base_SetConfig+0x114>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8e:	d00f      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3d      	ldr	r2, [pc, #244]	; (8002b88 <TIM_Base_SetConfig+0x118>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3c      	ldr	r2, [pc, #240]	; (8002b8c <TIM_Base_SetConfig+0x11c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3b      	ldr	r2, [pc, #236]	; (8002b90 <TIM_Base_SetConfig+0x120>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3a      	ldr	r2, [pc, #232]	; (8002b94 <TIM_Base_SetConfig+0x124>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d108      	bne.n	8002ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <TIM_Base_SetConfig+0x114>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad0:	d027      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a2c      	ldr	r2, [pc, #176]	; (8002b88 <TIM_Base_SetConfig+0x118>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d023      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <TIM_Base_SetConfig+0x11c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2a      	ldr	r2, [pc, #168]	; (8002b90 <TIM_Base_SetConfig+0x120>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <TIM_Base_SetConfig+0x124>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d017      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a28      	ldr	r2, [pc, #160]	; (8002b98 <TIM_Base_SetConfig+0x128>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a27      	ldr	r2, [pc, #156]	; (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <TIM_Base_SetConfig+0x134>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a24      	ldr	r2, [pc, #144]	; (8002ba8 <TIM_Base_SetConfig+0x138>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a23      	ldr	r2, [pc, #140]	; (8002bac <TIM_Base_SetConfig+0x13c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <TIM_Base_SetConfig+0x114>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_Base_SetConfig+0xf8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <TIM_Base_SetConfig+0x124>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	615a      	str	r2, [r3, #20]
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40010000 	.word	0x40010000
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40010400 	.word	0x40010400
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800
 8002ba4:	40001800 	.word	0x40001800
 8002ba8:	40001c00 	.word	0x40001c00
 8002bac:	40002000 	.word	0x40002000

08002bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e03f      	b.n	8002c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fe f838 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fc7b 	bl	8003518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	; 0x28
 8002c76:	af02      	add	r7, sp, #8
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d17c      	bne.n	8002d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <HAL_UART_Transmit+0x2c>
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e075      	b.n	8002d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_UART_Transmit+0x3e>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e06e      	b.n	8002d8e <HAL_UART_Transmit+0x11c>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2221      	movs	r2, #33	; 0x21
 8002cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fb51 	bl	800136c <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	88fa      	ldrh	r2, [r7, #6]
 8002cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce0:	d108      	bne.n	8002cf4 <HAL_UART_Transmit+0x82>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	61bb      	str	r3, [r7, #24]
 8002cf2:	e003      	b.n	8002cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d04:	e02a      	b.n	8002d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fa3d 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e036      	b.n	8002d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	3302      	adds	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	e007      	b.n	8002d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1cf      	bne.n	8002d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fa0d 	bl	8003190 <UART_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e006      	b.n	8002d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e000      	b.n	8002d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	4613      	mov	r3, r2
 8002da2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d11d      	bne.n	8002dec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_UART_Receive_IT+0x26>
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e016      	b.n	8002dee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Receive_IT+0x38>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e00f      	b.n	8002dee <HAL_UART_Receive_IT+0x58>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68b9      	ldr	r1, [r7, #8]
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fa1e 	bl	8003224 <UART_Start_Receive_IT>
 8002de8:	4603      	mov	r3, r0
 8002dea:	e000      	b.n	8002dee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002dec:	2302      	movs	r3, #2
  }
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10d      	bne.n	8002e4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_UART_IRQHandler+0x52>
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fad1 	bl	80033ea <UART_Receive_IT>
      return;
 8002e48:	e17c      	b.n	8003144 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80b1 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x1bc>
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_UART_IRQHandler+0x70>
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80a6 	beq.w	8002fb4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_UART_IRQHandler+0x90>
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0201 	orr.w	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xb0>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f043 0202 	orr.w	r2, r3, #2
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_UART_IRQHandler+0xd0>
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f043 0204 	orr.w	r2, r3, #4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00f      	beq.n	8002ef2 <HAL_UART_IRQHandler+0xfa>
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d104      	bne.n	8002ee6 <HAL_UART_IRQHandler+0xee>
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0208 	orr.w	r2, r3, #8
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 811f 	beq.w	800313a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d007      	beq.n	8002f16 <HAL_UART_IRQHandler+0x11e>
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f003 0320 	and.w	r3, r3, #32
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 fa6a 	bl	80033ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f20:	2b40      	cmp	r3, #64	; 0x40
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_UART_IRQHandler+0x146>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d031      	beq.n	8002fa2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9aa 	bl	8003298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d123      	bne.n	8002f9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d013      	beq.n	8002f92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	4a77      	ldr	r2, [pc, #476]	; (800314c <HAL_UART_IRQHandler+0x354>)
 8002f70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fb56 	bl	8001628 <HAL_DMA_Abort_IT>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	e00e      	b.n	8002fb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f8e6 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	e00a      	b.n	8002fb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8e2 	bl	8003164 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e006      	b.n	8002fb0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8de 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fae:	e0c4      	b.n	800313a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb0:	bf00      	nop
    return;
 8002fb2:	e0c2      	b.n	800313a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f040 80a2 	bne.w	8003102 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	f003 0310 	and.w	r3, r3, #16
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 809c 	beq.w	8003102 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8096 	beq.w	8003102 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d14f      	bne.n	800309a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003004:	8a3b      	ldrh	r3, [r7, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8099 	beq.w	800313e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003010:	8a3a      	ldrh	r2, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	f080 8093 	bcs.w	800313e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8a3a      	ldrh	r2, [r7, #16]
 800301c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d02b      	beq.n	8003082 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003038:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695a      	ldr	r2, [r3, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003058:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0210 	bic.w	r2, r2, #16
 8003076:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fa63 	bl	8001548 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800308a:	b29b      	uxth	r3, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	b29b      	uxth	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f870 	bl	8003178 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003098:	e051      	b.n	800313e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d047      	beq.n	8003142 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80030b2:	8a7b      	ldrh	r3, [r7, #18]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d044      	beq.n	8003142 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80030c6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0201 	bic.w	r2, r2, #1
 80030d6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0210 	bic.w	r2, r2, #16
 80030f4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030f6:	8a7b      	ldrh	r3, [r7, #18]
 80030f8:	4619      	mov	r1, r3
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f83c 	bl	8003178 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003100:	e01f      	b.n	8003142 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x326>
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f8ff 	bl	800331a <UART_Transmit_IT>
    return;
 800311c:	e012      	b.n	8003144 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00d      	beq.n	8003144 <HAL_UART_IRQHandler+0x34c>
 8003128:	6a3b      	ldr	r3, [r7, #32]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f941 	bl	80033ba <UART_EndTransmit_IT>
    return;
 8003138:	e004      	b.n	8003144 <HAL_UART_IRQHandler+0x34c>
    return;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_UART_IRQHandler+0x34c>
      return;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_UART_IRQHandler+0x34c>
      return;
 8003142:	bf00      	nop
  }
}
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	080032f3 	.word	0x080032f3

08003150 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a0:	e02c      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a8:	d028      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b0:	f7fe f8dc 	bl	800136c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d21d      	bcs.n	80031fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e00f      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	429a      	cmp	r2, r3
 8003218:	d0c3      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	4613      	mov	r3, r2
 8003230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	88fa      	ldrh	r2, [r7, #6]
 800323c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	88fa      	ldrh	r2, [r7, #6]
 8003242:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2222      	movs	r2, #34	; 0x22
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003268:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0201 	orr.w	r2, r2, #1
 8003278:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0220 	orr.w	r2, r2, #32
 8003288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff ff29 	bl	8003164 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b21      	cmp	r3, #33	; 0x21
 800332c:	d13e      	bne.n	80033ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	d114      	bne.n	8003362 <UART_Transmit_IT+0x48>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d110      	bne.n	8003362 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	1c9a      	adds	r2, r3, #2
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]
 8003360:	e008      	b.n	8003374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	1c59      	adds	r1, r3, #1
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6211      	str	r1, [r2, #32]
 800336c:	781a      	ldrb	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29b      	uxth	r3, r3
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	4619      	mov	r1, r3
 8003382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033a8:	2300      	movs	r3, #0
 80033aa:	e000      	b.n	80033ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033ac:	2302      	movs	r3, #2
  }
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff feb8 	bl	8003150 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b22      	cmp	r3, #34	; 0x22
 80033fc:	f040 8087 	bne.w	800350e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003408:	d117      	bne.n	800343a <UART_Receive_IT+0x50>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d113      	bne.n	800343a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003428:	b29a      	uxth	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	1c9a      	adds	r2, r3, #2
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
 8003438:	e026      	b.n	8003488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003440:	2300      	movs	r3, #0
 8003442:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344c:	d007      	beq.n	800345e <UART_Receive_IT+0x74>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <UART_Receive_IT+0x82>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	e008      	b.n	800347e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4619      	mov	r1, r3
 8003496:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003498:	2b00      	cmp	r3, #0
 800349a:	d136      	bne.n	800350a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 0220 	bic.w	r2, r2, #32
 80034aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d10e      	bne.n	80034fa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0210 	bic.w	r2, r2, #16
 80034ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fe40 	bl	8003178 <HAL_UARTEx_RxEventCallback>
 80034f8:	e002      	b.n	8003500 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7fd faf0 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e002      	b.n	8003510 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800351c:	b09f      	sub	sp, #124	; 0x7c
 800351e:	af00      	add	r7, sp, #0
 8003520:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	68d9      	ldr	r1, [r3, #12]
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	ea40 0301 	orr.w	r3, r0, r1
 8003538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	431a      	orrs	r2, r3
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	4313      	orrs	r3, r2
 8003550:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800355c:	f021 010c 	bic.w	r1, r1, #12
 8003560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003566:	430b      	orrs	r3, r1
 8003568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800356a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003576:	6999      	ldr	r1, [r3, #24]
 8003578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	ea40 0301 	orr.w	r3, r0, r1
 8003580:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	4bc5      	ldr	r3, [pc, #788]	; (800389c <UART_SetConfig+0x384>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d004      	beq.n	8003596 <UART_SetConfig+0x7e>
 800358c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4bc3      	ldr	r3, [pc, #780]	; (80038a0 <UART_SetConfig+0x388>)
 8003592:	429a      	cmp	r2, r3
 8003594:	d103      	bne.n	800359e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003596:	f7fe fe65 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 800359a:	6778      	str	r0, [r7, #116]	; 0x74
 800359c:	e002      	b.n	80035a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359e:	f7fe fe4d 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 80035a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ac:	f040 80b6 	bne.w	800371c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b2:	461c      	mov	r4, r3
 80035b4:	f04f 0500 	mov.w	r5, #0
 80035b8:	4622      	mov	r2, r4
 80035ba:	462b      	mov	r3, r5
 80035bc:	1891      	adds	r1, r2, r2
 80035be:	6439      	str	r1, [r7, #64]	; 0x40
 80035c0:	415b      	adcs	r3, r3
 80035c2:	647b      	str	r3, [r7, #68]	; 0x44
 80035c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035c8:	1912      	adds	r2, r2, r4
 80035ca:	eb45 0303 	adc.w	r3, r5, r3
 80035ce:	f04f 0000 	mov.w	r0, #0
 80035d2:	f04f 0100 	mov.w	r1, #0
 80035d6:	00d9      	lsls	r1, r3, #3
 80035d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035dc:	00d0      	lsls	r0, r2, #3
 80035de:	4602      	mov	r2, r0
 80035e0:	460b      	mov	r3, r1
 80035e2:	1911      	adds	r1, r2, r4
 80035e4:	6639      	str	r1, [r7, #96]	; 0x60
 80035e6:	416b      	adcs	r3, r5
 80035e8:	667b      	str	r3, [r7, #100]	; 0x64
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	1891      	adds	r1, r2, r2
 80035f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80035f8:	415b      	adcs	r3, r3
 80035fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003604:	f7fc fe40 	bl	8000288 <__aeabi_uldivmod>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4ba5      	ldr	r3, [pc, #660]	; (80038a4 <UART_SetConfig+0x38c>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	011e      	lsls	r6, r3, #4
 8003616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003618:	461c      	mov	r4, r3
 800361a:	f04f 0500 	mov.w	r5, #0
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	1891      	adds	r1, r2, r2
 8003624:	6339      	str	r1, [r7, #48]	; 0x30
 8003626:	415b      	adcs	r3, r3
 8003628:	637b      	str	r3, [r7, #52]	; 0x34
 800362a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800362e:	1912      	adds	r2, r2, r4
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	00d9      	lsls	r1, r3, #3
 800363e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003642:	00d0      	lsls	r0, r2, #3
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	1911      	adds	r1, r2, r4
 800364a:	65b9      	str	r1, [r7, #88]	; 0x58
 800364c:	416b      	adcs	r3, r5
 800364e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	461a      	mov	r2, r3
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	1891      	adds	r1, r2, r2
 800365c:	62b9      	str	r1, [r7, #40]	; 0x28
 800365e:	415b      	adcs	r3, r3
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800366a:	f7fc fe0d 	bl	8000288 <__aeabi_uldivmod>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	4b8c      	ldr	r3, [pc, #560]	; (80038a4 <UART_SetConfig+0x38c>)
 8003674:	fba3 1302 	umull	r1, r3, r3, r2
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	4a87      	ldr	r2, [pc, #540]	; (80038a4 <UART_SetConfig+0x38c>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003694:	441e      	add	r6, r3
 8003696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003698:	4618      	mov	r0, r3
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	1894      	adds	r4, r2, r2
 80036a4:	623c      	str	r4, [r7, #32]
 80036a6:	415b      	adcs	r3, r3
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ae:	1812      	adds	r2, r2, r0
 80036b0:	eb41 0303 	adc.w	r3, r1, r3
 80036b4:	f04f 0400 	mov.w	r4, #0
 80036b8:	f04f 0500 	mov.w	r5, #0
 80036bc:	00dd      	lsls	r5, r3, #3
 80036be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036c2:	00d4      	lsls	r4, r2, #3
 80036c4:	4622      	mov	r2, r4
 80036c6:	462b      	mov	r3, r5
 80036c8:	1814      	adds	r4, r2, r0
 80036ca:	653c      	str	r4, [r7, #80]	; 0x50
 80036cc:	414b      	adcs	r3, r1
 80036ce:	657b      	str	r3, [r7, #84]	; 0x54
 80036d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	61b9      	str	r1, [r7, #24]
 80036de:	415b      	adcs	r3, r3
 80036e0:	61fb      	str	r3, [r7, #28]
 80036e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80036ea:	f7fc fdcd 	bl	8000288 <__aeabi_uldivmod>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4b6c      	ldr	r3, [pc, #432]	; (80038a4 <UART_SetConfig+0x38c>)
 80036f4:	fba3 1302 	umull	r1, r3, r3, r2
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	2164      	movs	r1, #100	; 0x64
 80036fc:	fb01 f303 	mul.w	r3, r1, r3
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	3332      	adds	r3, #50	; 0x32
 8003706:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <UART_SetConfig+0x38c>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	f003 0207 	and.w	r2, r3, #7
 8003712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4432      	add	r2, r6
 8003718:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800371a:	e0b9      	b.n	8003890 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800371e:	461c      	mov	r4, r3
 8003720:	f04f 0500 	mov.w	r5, #0
 8003724:	4622      	mov	r2, r4
 8003726:	462b      	mov	r3, r5
 8003728:	1891      	adds	r1, r2, r2
 800372a:	6139      	str	r1, [r7, #16]
 800372c:	415b      	adcs	r3, r3
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003734:	1912      	adds	r2, r2, r4
 8003736:	eb45 0303 	adc.w	r3, r5, r3
 800373a:	f04f 0000 	mov.w	r0, #0
 800373e:	f04f 0100 	mov.w	r1, #0
 8003742:	00d9      	lsls	r1, r3, #3
 8003744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003748:	00d0      	lsls	r0, r2, #3
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	eb12 0804 	adds.w	r8, r2, r4
 8003752:	eb43 0905 	adc.w	r9, r3, r5
 8003756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4618      	mov	r0, r3
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	008b      	lsls	r3, r1, #2
 800376a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800376e:	0082      	lsls	r2, r0, #2
 8003770:	4640      	mov	r0, r8
 8003772:	4649      	mov	r1, r9
 8003774:	f7fc fd88 	bl	8000288 <__aeabi_uldivmod>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4b49      	ldr	r3, [pc, #292]	; (80038a4 <UART_SetConfig+0x38c>)
 800377e:	fba3 2302 	umull	r2, r3, r3, r2
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	011e      	lsls	r6, r3, #4
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	4618      	mov	r0, r3
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	1894      	adds	r4, r2, r2
 8003794:	60bc      	str	r4, [r7, #8]
 8003796:	415b      	adcs	r3, r3
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800379e:	1812      	adds	r2, r2, r0
 80037a0:	eb41 0303 	adc.w	r3, r1, r3
 80037a4:	f04f 0400 	mov.w	r4, #0
 80037a8:	f04f 0500 	mov.w	r5, #0
 80037ac:	00dd      	lsls	r5, r3, #3
 80037ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037b2:	00d4      	lsls	r4, r2, #3
 80037b4:	4622      	mov	r2, r4
 80037b6:	462b      	mov	r3, r5
 80037b8:	1814      	adds	r4, r2, r0
 80037ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80037bc:	414b      	adcs	r3, r1
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	008b      	lsls	r3, r1, #2
 80037d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037d8:	0082      	lsls	r2, r0, #2
 80037da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037de:	f7fc fd53 	bl	8000288 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b2f      	ldr	r3, [pc, #188]	; (80038a4 <UART_SetConfig+0x38c>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	3332      	adds	r3, #50	; 0x32
 80037fa:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <UART_SetConfig+0x38c>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003806:	441e      	add	r6, r3
 8003808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380a:	4618      	mov	r0, r3
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	1894      	adds	r4, r2, r2
 8003816:	603c      	str	r4, [r7, #0]
 8003818:	415b      	adcs	r3, r3
 800381a:	607b      	str	r3, [r7, #4]
 800381c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003820:	1812      	adds	r2, r2, r0
 8003822:	eb41 0303 	adc.w	r3, r1, r3
 8003826:	f04f 0400 	mov.w	r4, #0
 800382a:	f04f 0500 	mov.w	r5, #0
 800382e:	00dd      	lsls	r5, r3, #3
 8003830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003834:	00d4      	lsls	r4, r2, #3
 8003836:	4622      	mov	r2, r4
 8003838:	462b      	mov	r3, r5
 800383a:	eb12 0a00 	adds.w	sl, r2, r0
 800383e:	eb43 0b01 	adc.w	fp, r3, r1
 8003842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	4618      	mov	r0, r3
 8003848:	f04f 0100 	mov.w	r1, #0
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	008b      	lsls	r3, r1, #2
 8003856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800385a:	0082      	lsls	r2, r0, #2
 800385c:	4650      	mov	r0, sl
 800385e:	4659      	mov	r1, fp
 8003860:	f7fc fd12 	bl	8000288 <__aeabi_uldivmod>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	4b0e      	ldr	r3, [pc, #56]	; (80038a4 <UART_SetConfig+0x38c>)
 800386a:	fba3 1302 	umull	r1, r3, r3, r2
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2164      	movs	r1, #100	; 0x64
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	3332      	adds	r3, #50	; 0x32
 800387c:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <UART_SetConfig+0x38c>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4432      	add	r2, r6
 800388e:	609a      	str	r2, [r3, #8]
}
 8003890:	bf00      	nop
 8003892:	377c      	adds	r7, #124	; 0x7c
 8003894:	46bd      	mov	sp, r7
 8003896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389a:	bf00      	nop
 800389c:	40011000 	.word	0x40011000
 80038a0:	40011400 	.word	0x40011400
 80038a4:	51eb851f 	.word	0x51eb851f

080038a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f103 0208 	add.w	r2, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f04f 32ff 	mov.w	r2, #4294967295
 80038c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f103 0208 	add.w	r2, r3, #8
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f103 0208 	add.w	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003902:	b480      	push	{r7}
 8003904:	b085      	sub	sp, #20
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
}
 800393e:	bf00      	nop
 8003940:	3714      	adds	r7, #20
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d103      	bne.n	800396a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e00c      	b.n	8003984 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3308      	adds	r3, #8
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e002      	b.n	8003978 <vListInsert+0x2e>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	d2f6      	bcs.n	8003972 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	601a      	str	r2, [r3, #0]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	691b      	ldr	r3, [r3, #16]
 80039c8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6892      	ldr	r2, [r2, #8]
 80039d2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6852      	ldr	r2, [r2, #4]
 80039dc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d103      	bne.n	80039f0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	1e5a      	subs	r2, r3, #1
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <xQueueGenericReset+0x2a>
        __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60bb      	str	r3, [r7, #8]
    }
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003a3a:	f002 fc35 	bl	80062a8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	68f9      	ldr	r1, [r7, #12]
 8003a6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d114      	bne.n	8003aba <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d01a      	beq.n	8003ace <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3310      	adds	r3, #16
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 f9ff 	bl	8004ea0 <xTaskRemoveFromEventList>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <xQueueGenericReset+0xcc>)
 8003aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	e009      	b.n	8003ace <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3310      	adds	r3, #16
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fef2 	bl	80038a8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3324      	adds	r3, #36	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff feed 	bl	80038a8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003ace:	f002 fc1b 	bl	8006308 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003ad2:	2301      	movs	r3, #1
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08c      	sub	sp, #48	; 0x30
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xQueueGenericCreate+0x2a>
        __asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	61bb      	str	r3, [r7, #24]
    }
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d006      	beq.n	8003b28 <xQueueGenericCreate+0x48>
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d101      	bne.n	8003b2c <xQueueGenericCreate+0x4c>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <xQueueGenericCreate+0x4e>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <xQueueGenericCreate+0x68>
        __asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	617b      	str	r3, [r7, #20]
    }
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003b4e:	d90a      	bls.n	8003b66 <xQueueGenericCreate+0x86>
        __asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	613b      	str	r3, [r7, #16]
    }
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	3350      	adds	r3, #80	; 0x50
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 fcc6 	bl	80064fc <pvPortMalloc>
 8003b70:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	3350      	adds	r3, #80	; 0x50
 8003b80:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b82:	79fa      	ldrb	r2, [r7, #7]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	69fa      	ldr	r2, [r7, #28]
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 f805 	bl	8003b9e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003b94:	6a3b      	ldr	r3, [r7, #32]
    }
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b084      	sub	sp, #16
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d103      	bne.n	8003bba <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	e002      	b.n	8003bc0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003bcc:	2101      	movs	r1, #1
 8003bce:	69b8      	ldr	r0, [r7, #24]
 8003bd0:	f7ff ff1e 	bl	8003a10 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	2073      	movs	r0, #115	; 0x73
 8003be4:	f003 faca 	bl	800717c <SEGGER_SYSVIEW_RecordU32x3>
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b090      	sub	sp, #64	; 0x40
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xQueueGenericSend+0x32>
        __asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d103      	bne.n	8003c30 <xQueueGenericSend+0x40>
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <xQueueGenericSend+0x44>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <xQueueGenericSend+0x46>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <xQueueGenericSend+0x60>
        __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d103      	bne.n	8003c5e <xQueueGenericSend+0x6e>
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <xQueueGenericSend+0x72>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e000      	b.n	8003c64 <xQueueGenericSend+0x74>
 8003c62:	2300      	movs	r3, #0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <xQueueGenericSend+0x8e>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	623b      	str	r3, [r7, #32]
    }
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c7e:	f001 fab1 	bl	80051e4 <xTaskGetSchedulerState>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d102      	bne.n	8003c8e <xQueueGenericSend+0x9e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <xQueueGenericSend+0xa2>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <xQueueGenericSend+0xa4>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10a      	bne.n	8003cae <xQueueGenericSend+0xbe>
        __asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	61fb      	str	r3, [r7, #28]
    }
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003cae:	f002 fafb 	bl	80062a8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <xQueueGenericSend+0xd4>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d136      	bne.n	8003d32 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 f86e 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4601      	mov	r1, r0
 8003cd8:	205a      	movs	r0, #90	; 0x5a
 8003cda:	f003 fac5 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce4:	f000 fb43 	bl	800436e <prvCopyDataToQueue>
 8003ce8:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d010      	beq.n	8003d14 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	3324      	adds	r3, #36	; 0x24
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f8d2 	bl	8004ea0 <xTaskRemoveFromEventList>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003d02:	4b4d      	ldr	r3, [pc, #308]	; (8003e38 <xQueueGenericSend+0x248>)
 8003d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	e00a      	b.n	8003d2a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <xQueueGenericSend+0x248>)
 8003d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003d2a:	f002 faed 	bl	8006308 <vPortExitCritical>
                return pdPASS;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e07d      	b.n	8003e2e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d110      	bne.n	8003d5a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003d38:	f002 fae6 	bl	8006308 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f004 f832 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4601      	mov	r1, r0
 8003d50:	205a      	movs	r0, #90	; 0x5a
 8003d52:	f003 fa89 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e069      	b.n	8003e2e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4618      	mov	r0, r3
 8003d66:	f001 f901 	bl	8004f6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003d6e:	f002 facb 	bl	8006308 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003d72:	f000 fe5f 	bl	8004a34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d76:	f002 fa97 	bl	80062a8 <vPortEnterCritical>
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d103      	bne.n	8003d90 <xQueueGenericSend+0x1a0>
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d96:	b25b      	sxtb	r3, r3
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSend+0x1b6>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da6:	f002 faaf 	bl	8006308 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003daa:	1d3a      	adds	r2, r7, #4
 8003dac:	f107 0314 	add.w	r3, r7, #20
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f8f0 	bl	8004f98 <xTaskCheckForTimeOut>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d124      	bne.n	8003e08 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc0:	f000 fbcd 	bl	800455e <prvIsQueueFull>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d018      	beq.n	8003dfc <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dcc:	3310      	adds	r3, #16
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 f812 	bl	8004dfc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dda:	f000 fb58 	bl	800448e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003dde:	f000 fe37 	bl	8004a50 <xTaskResumeAll>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f47f af62 	bne.w	8003cae <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <xQueueGenericSend+0x248>)
 8003dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	e758      	b.n	8003cae <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dfe:	f000 fb46 	bl	800448e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e02:	f000 fe25 	bl	8004a50 <xTaskResumeAll>
 8003e06:	e752      	b.n	8003cae <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e0a:	f000 fb40 	bl	800448e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e0e:	f000 fe1f 	bl	8004a50 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 ffc7 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	460b      	mov	r3, r1
 8003e24:	4601      	mov	r1, r0
 8003e26:	205a      	movs	r0, #90	; 0x5a
 8003e28:	f003 fa1e 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8003e2c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3738      	adds	r7, #56	; 0x38
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b090      	sub	sp, #64	; 0x40
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10a      	bne.n	8003e6a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003e66:	bf00      	nop
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d103      	bne.n	8003e78 <xQueueGenericSendFromISR+0x3c>
 8003e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <xQueueGenericSendFromISR+0x40>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <xQueueGenericSendFromISR+0x42>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10a      	bne.n	8003e98 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d103      	bne.n	8003ea6 <xQueueGenericSendFromISR+0x6a>
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d101      	bne.n	8003eaa <xQueueGenericSendFromISR+0x6e>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <xQueueGenericSendFromISR+0x70>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	623b      	str	r3, [r7, #32]
    }
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ec6:	f002 fad9 	bl	800647c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003eca:	f3ef 8211 	mrs	r2, BASEPRI
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ee4:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <xQueueGenericSendFromISR+0xbc>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d148      	bne.n	8003f8a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8003f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 ff4c 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8003f10:	4601      	mov	r1, r0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	461a      	mov	r2, r3
 8003f16:	2060      	movs	r0, #96	; 0x60
 8003f18:	f003 f8d6 	bl	80070c8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f22:	f000 fa24 	bl	800436e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003f26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2e:	d112      	bne.n	8003f56 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d025      	beq.n	8003f84 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 ffaf 	bl	8004ea0 <xTaskRemoveFromEventList>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01d      	beq.n	8003f84 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01a      	beq.n	8003f84 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e016      	b.n	8003f84 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003f56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8003f5c:	d10a      	bne.n	8003f74 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	617b      	str	r3, [r7, #20]
    }
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	b25a      	sxtb	r2, r3
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003f84:	2301      	movs	r3, #1
 8003f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003f88:	e00b      	b.n	8003fa2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f003 ff0b 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8003f92:	4601      	mov	r1, r0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	2060      	movs	r0, #96	; 0x60
 8003f9a:	f003 f895 	bl	80070c8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003fac:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3740      	adds	r7, #64	; 0x40
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b08f      	sub	sp, #60	; 0x3c
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <xQueueReceive+0x30>
        __asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	623b      	str	r3, [r7, #32]
    }
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <xQueueReceive+0x3e>
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <xQueueReceive+0x42>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <xQueueReceive+0x44>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xQueueReceive+0x5e>
        __asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61fb      	str	r3, [r7, #28]
    }
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004016:	f001 f8e5 	bl	80051e4 <xTaskGetSchedulerState>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <xQueueReceive+0x6e>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <xQueueReceive+0x72>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <xQueueReceive+0x74>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <xQueueReceive+0x8e>
        __asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	61bb      	str	r3, [r7, #24]
    }
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004046:	f002 f92f 	bl	80062a8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d02f      	beq.n	80040b6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800405a:	f000 f9f2 	bl	8004442 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	4618      	mov	r0, r3
 8004062:	f003 fea1 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8004066:	4604      	mov	r4, r0
 8004068:	2000      	movs	r0, #0
 800406a:	f003 fe9d 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 800406e:	4602      	mov	r2, r0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2101      	movs	r1, #1
 8004074:	9100      	str	r1, [sp, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	205c      	movs	r0, #92	; 0x5c
 800407a:	f003 f8f5 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00f      	beq.n	80040ae <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	3310      	adds	r3, #16
 8004092:	4618      	mov	r0, r3
 8004094:	f000 ff04 	bl	8004ea0 <xTaskRemoveFromEventList>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800409e:	4b4d      	ldr	r3, [pc, #308]	; (80041d4 <xQueueReceive+0x21c>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80040ae:	f002 f92b 	bl	8006308 <vPortExitCritical>
                return pdPASS;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e08a      	b.n	80041cc <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d113      	bne.n	80040e4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80040bc:	f002 f924 	bl	8006308 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	4618      	mov	r0, r3
 80040c4:	f003 fe70 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 80040c8:	4604      	mov	r4, r0
 80040ca:	2000      	movs	r0, #0
 80040cc:	f003 fe6c 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 80040d0:	4602      	mov	r2, r0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2101      	movs	r1, #1
 80040d6:	9100      	str	r1, [sp, #0]
 80040d8:	4621      	mov	r1, r4
 80040da:	205c      	movs	r0, #92	; 0x5c
 80040dc:	f003 f8c4 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e073      	b.n	80041cc <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80040ea:	f107 0310 	add.w	r3, r7, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ff3c 	bl	8004f6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80040f8:	f002 f906 	bl	8006308 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040fc:	f000 fc9a 	bl	8004a34 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004100:	f002 f8d2 	bl	80062a8 <vPortEnterCritical>
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800410a:	b25b      	sxtb	r3, r3
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d103      	bne.n	800411a <xQueueReceive+0x162>
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004120:	b25b      	sxtb	r3, r3
 8004122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004126:	d103      	bne.n	8004130 <xQueueReceive+0x178>
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004130:	f002 f8ea 	bl	8006308 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004134:	1d3a      	adds	r2, r7, #4
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ff2b 	bl	8004f98 <xTaskCheckForTimeOut>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d124      	bne.n	8004192 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800414a:	f000 f9f2 	bl	8004532 <prvIsQueueEmpty>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d018      	beq.n	8004186 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	3324      	adds	r3, #36	; 0x24
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4611      	mov	r1, r2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe4d 	bl	8004dfc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004164:	f000 f993 	bl	800448e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004168:	f000 fc72 	bl	8004a50 <xTaskResumeAll>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f af69 	bne.w	8004046 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <xQueueReceive+0x21c>)
 8004176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	e75f      	b.n	8004046 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004188:	f000 f981 	bl	800448e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800418c:	f000 fc60 	bl	8004a50 <xTaskResumeAll>
 8004190:	e759      	b.n	8004046 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004194:	f000 f97b 	bl	800448e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004198:	f000 fc5a 	bl	8004a50 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800419c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800419e:	f000 f9c8 	bl	8004532 <prvIsQueueEmpty>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f43f af4e 	beq.w	8004046 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80041aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fdfb 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 80041b2:	4604      	mov	r4, r0
 80041b4:	2000      	movs	r0, #0
 80041b6:	f003 fdf7 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2101      	movs	r1, #1
 80041c0:	9100      	str	r1, [sp, #0]
 80041c2:	4621      	mov	r1, r4
 80041c4:	205c      	movs	r0, #92	; 0x5c
 80041c6:	f003 f84f 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80041ca:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3734      	adds	r7, #52	; 0x34
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041d8:	b590      	push	{r4, r7, lr}
 80041da:	b091      	sub	sp, #68	; 0x44
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10a      	bne.n	8004204 <xQueueReceiveFromISR+0x2c>
        __asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8004200:	bf00      	nop
 8004202:	e7fe      	b.n	8004202 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <xQueueReceiveFromISR+0x3a>
 800420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <xQueueReceiveFromISR+0x3e>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <xQueueReceiveFromISR+0x40>
 8004216:	2300      	movs	r3, #0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <xQueueReceiveFromISR+0x5a>
        __asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xQueueReceiveFromISR+0x58>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004232:	f002 f923 	bl	800647c <vPortValidateInterruptPriority>
        __asm volatile
 8004236:	f3ef 8211 	mrs	r2, BASEPRI
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	623a      	str	r2, [r7, #32]
 800424c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800424e:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004250:	637b      	str	r3, [r7, #52]	; 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	633b      	str	r3, [r7, #48]	; 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425a:	2b00      	cmp	r3, #0
 800425c:	d04d      	beq.n	80042fa <xQueueReceiveFromISR+0x122>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	4618      	mov	r0, r3
 800426c:	f003 fd9c 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8004270:	4604      	mov	r4, r0
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4618      	mov	r0, r3
 8004276:	f003 fd97 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 800427a:	4602      	mov	r2, r0
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4621      	mov	r1, r4
 8004280:	2062      	movs	r0, #98	; 0x62
 8004282:	f002 ff7b 	bl	800717c <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800428a:	f000 f8da 	bl	8004442 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	639a      	str	r2, [r3, #56]	; 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004296:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d112      	bne.n	80042c6 <xQueueReceiveFromISR+0xee>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d025      	beq.n	80042f4 <xQueueReceiveFromISR+0x11c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	3310      	adds	r3, #16
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fdf7 	bl	8004ea0 <xTaskRemoveFromEventList>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01d      	beq.n	80042f4 <xQueueReceiveFromISR+0x11c>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01a      	beq.n	80042f4 <xQueueReceiveFromISR+0x11c>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e016      	b.n	80042f4 <xQueueReceiveFromISR+0x11c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80042c6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80042ca:	2b7f      	cmp	r3, #127	; 0x7f
 80042cc:	d10a      	bne.n	80042e4 <xQueueReceiveFromISR+0x10c>
        __asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	61bb      	str	r3, [r7, #24]
    }
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <xQueueReceiveFromISR+0x10a>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80042e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042e8:	3301      	adds	r3, #1
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	b25a      	sxtb	r2, r3
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            }

            xReturn = pdPASS;
 80042f4:	2301      	movs	r3, #1
 80042f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f8:	e010      	b.n	800431c <xQueueReceiveFromISR+0x144>
        }
        else
        {
            xReturn = pdFAIL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 80042fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004300:	4618      	mov	r0, r3
 8004302:	f003 fd51 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8004306:	4604      	mov	r4, r0
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fd4c 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8004310:	4602      	mov	r2, r0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4621      	mov	r1, r4
 8004316:	2062      	movs	r0, #98	; 0x62
 8004318:	f002 ff30 	bl	800717c <SEGGER_SYSVIEW_RecordU32x3>
 800431c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f383 8811 	msr	BASEPRI, r3
    }
 8004326:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800432a:	4618      	mov	r0, r3
 800432c:	3744      	adds	r7, #68	; 0x44
 800432e:	46bd      	mov	sp, r7
 8004330:	bd90      	pop	{r4, r7, pc}

08004332 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10a      	bne.n	8004356 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60bb      	str	r3, [r7, #8]
    }
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004356:	f001 ffa7 	bl	80062a8 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004360:	f001 ffd2 	bl	8006308 <vPortExitCritical>

    return uxReturn;
 8004364:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004382:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d14d      	bne.n	8004430 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 ff41 	bl	8005220 <xTaskPriorityDisinherit>
 800439e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	e043      	b.n	8004430 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d119      	bne.n	80043e2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6858      	ldr	r0, [r3, #4]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	461a      	mov	r2, r3
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	f003 fe6f 	bl	800809c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	441a      	add	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d32b      	bcc.n	8004430 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	605a      	str	r2, [r3, #4]
 80043e0:	e026      	b.n	8004430 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68d8      	ldr	r0, [r3, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	461a      	mov	r2, r3
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	f003 fe55 	bl	800809c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	425b      	negs	r3, r3
 80043fc:	441a      	add	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d207      	bcs.n	800441e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	425b      	negs	r3, r3
 8004418:	441a      	add	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d105      	bne.n	8004430 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	3b01      	subs	r3, #1
 800442e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004438:	697b      	ldr	r3, [r7, #20]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d018      	beq.n	8004486 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	441a      	add	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d303      	bcc.n	8004476 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68d9      	ldr	r1, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	461a      	mov	r2, r3
 8004480:	6838      	ldr	r0, [r7, #0]
 8004482:	f003 fe0b 	bl	800809c <memcpy>
    }
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004496:	f001 ff07 	bl	80062a8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044a0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044a2:	e011      	b.n	80044c8 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3324      	adds	r3, #36	; 0x24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 fcf5 	bl	8004ea0 <xTaskRemoveFromEventList>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80044bc:	f000 fdd2 	bl	8005064 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80044c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	dce9      	bgt.n	80044a4 <prvUnlockQueue+0x16>
 80044d0:	e000      	b.n	80044d4 <prvUnlockQueue+0x46>
                        break;
 80044d2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	22ff      	movs	r2, #255	; 0xff
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80044dc:	f001 ff14 	bl	8006308 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80044e0:	f001 fee2 	bl	80062a8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044ea:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ec:	e011      	b.n	8004512 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d012      	beq.n	800451c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3310      	adds	r3, #16
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fcd0 	bl	8004ea0 <xTaskRemoveFromEventList>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004506:	f000 fdad 	bl	8005064 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	3b01      	subs	r3, #1
 800450e:	b2db      	uxtb	r3, r3
 8004510:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004512:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004516:	2b00      	cmp	r3, #0
 8004518:	dce9      	bgt.n	80044ee <prvUnlockQueue+0x60>
 800451a:	e000      	b.n	800451e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800451c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	22ff      	movs	r2, #255	; 0xff
 8004522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004526:	f001 feef 	bl	8006308 <vPortExitCritical>
}
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800453a:	f001 feb5 	bl	80062a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	2b00      	cmp	r3, #0
 8004544:	d102      	bne.n	800454c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004546:	2301      	movs	r3, #1
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	e001      	b.n	8004550 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004550:	f001 feda 	bl	8006308 <vPortExitCritical>

    return xReturn;
 8004554:	68fb      	ldr	r3, [r7, #12]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004566:	f001 fe9f 	bl	80062a8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	429a      	cmp	r2, r3
 8004574:	d102      	bne.n	800457c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004576:	2301      	movs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e001      	b.n	8004580 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004580:	f001 fec2 	bl	8006308 <vPortExitCritical>

    return xReturn;
 8004584:	68fb      	ldr	r3, [r7, #12]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
    }
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d102      	bne.n	80045c8 <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e001      	b.n	80045cc <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80045cc:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80045ce:	4618      	mov	r0, r3
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
	...

080045dc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e01e      	b.n	800462a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <vQueueAddToRegistry+0x60>)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d115      	bne.n	8004624 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045f8:	4910      	ldr	r1, [pc, #64]	; (800463c <vQueueAddToRegistry+0x60>)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004602:	4a0e      	ldr	r2, [pc, #56]	; (800463c <vQueueAddToRegistry+0x60>)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	f003 fbc9 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 8004616:	4601      	mov	r1, r0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	2071      	movs	r0, #113	; 0x71
 800461e:	f002 fd53 	bl	80070c8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8004622:	e006      	b.n	8004632 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b07      	cmp	r3, #7
 800462e:	d9dd      	bls.n	80045ec <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	2001348c 	.word	0x2001348c

08004640 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004650:	f001 fe2a 	bl	80062a8 <vPortEnterCritical>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d103      	bne.n	800466a <vQueueWaitForMessageRestricted+0x2a>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004670:	b25b      	sxtb	r3, r3
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d103      	bne.n	8004680 <vQueueWaitForMessageRestricted+0x40>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004680:	f001 fe42 	bl	8006308 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fbd5 	bl	8004e44 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff fef7 	bl	800448e <prvUnlockQueue>
    }
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af04      	add	r7, sp, #16
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4618      	mov	r0, r3
 80046be:	f001 ff1d 	bl	80064fc <pvPortMalloc>
 80046c2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046ca:	2058      	movs	r0, #88	; 0x58
 80046cc:	f001 ff16 	bl	80064fc <pvPortMalloc>
 80046d0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30
 80046de:	e005      	b.n	80046ec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80046e0:	6978      	ldr	r0, [r7, #20]
 80046e2:	f001 ffeb 	bl	80066bc <vPortFree>
 80046e6:	e001      	b.n	80046ec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	2300      	movs	r3, #0
 80046f6:	9303      	str	r3, [sp, #12]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	9302      	str	r3, [sp, #8]
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68b9      	ldr	r1, [r7, #8]
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f80e 	bl	800472a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800470e:	69f8      	ldr	r0, [r7, #28]
 8004710:	f000 f8a2 	bl	8004858 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004714:	2301      	movs	r3, #1
 8004716:	61bb      	str	r3, [r7, #24]
 8004718:	e002      	b.n	8004720 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800471a:	f04f 33ff 	mov.w	r3, #4294967295
 800471e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004720:	69bb      	ldr	r3, [r7, #24]
    }
 8004722:	4618      	mov	r0, r3
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b088      	sub	sp, #32
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	461a      	mov	r2, r3
 8004742:	21a5      	movs	r1, #165	; 0xa5
 8004744:	f003 fcb8 	bl	80080b8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004752:	3b01      	subs	r3, #1
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	f023 0307 	bic.w	r3, r3, #7
 8004760:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <prvInitialiseNewTask+0x58>
        __asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	617b      	str	r3, [r7, #20]
    }
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d01f      	beq.n	80047c8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004788:	2300      	movs	r3, #0
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e012      	b.n	80047b4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	7819      	ldrb	r1, [r3, #0]
 8004796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	3334      	adds	r3, #52	; 0x34
 800479e:	460a      	mov	r2, r1
 80047a0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d006      	beq.n	80047bc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b09      	cmp	r3, #9
 80047b8:	d9e9      	bls.n	800478e <prvInitialiseNewTask+0x64>
 80047ba:	e000      	b.n	80047be <prvInitialiseNewTask+0x94>
            {
                break;
 80047bc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80047c6:	e003      	b.n	80047d0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d901      	bls.n	80047da <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d6:	2304      	movs	r3, #4
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2200      	movs	r2, #0
 80047ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	3304      	adds	r3, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff f879 	bl	80038e8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	3318      	adds	r3, #24
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7ff f874 	bl	80038e8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004804:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	f1c3 0205 	rsb	r2, r3, #5
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004814:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	3350      	adds	r3, #80	; 0x50
 800481a:	2204      	movs	r2, #4
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f003 fc4a 	bl	80080b8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	3354      	adds	r3, #84	; 0x54
 8004828:	2201      	movs	r2, #1
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f003 fc43 	bl	80080b8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f001 fc08 	bl	800604c <pxPortInitialiseStack>
 800483c:	4602      	mov	r2, r0
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800484c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800484e:	bf00      	nop
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004858:	b5b0      	push	{r4, r5, r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af02      	add	r7, sp, #8
 800485e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004860:	f001 fd22 	bl	80062a8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <prvAddNewTaskToReadyList+0xfc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	4a3a      	ldr	r2, [pc, #232]	; (8004954 <prvAddNewTaskToReadyList+0xfc>)
 800486c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800486e:	4b3a      	ldr	r3, [pc, #232]	; (8004958 <prvAddNewTaskToReadyList+0x100>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004876:	4a38      	ldr	r2, [pc, #224]	; (8004958 <prvAddNewTaskToReadyList+0x100>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800487c:	4b35      	ldr	r3, [pc, #212]	; (8004954 <prvAddNewTaskToReadyList+0xfc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d110      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004884:	f000 fc14 	bl	80050b0 <prvInitialiseTaskLists>
 8004888:	e00d      	b.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <prvAddNewTaskToReadyList+0x104>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004892:	4b31      	ldr	r3, [pc, #196]	; (8004958 <prvAddNewTaskToReadyList+0x100>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	429a      	cmp	r2, r3
 800489e:	d802      	bhi.n	80048a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80048a0:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <prvAddNewTaskToReadyList+0x100>)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80048a6:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <prvAddNewTaskToReadyList+0x108>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3301      	adds	r3, #1
 80048ac:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <prvAddNewTaskToReadyList+0x108>)
 80048ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048b0:	4b2b      	ldr	r3, [pc, #172]	; (8004960 <prvAddNewTaskToReadyList+0x108>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d016      	beq.n	80048ec <prvAddNewTaskToReadyList+0x94>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f003 f94b 	bl	8007b5c <SEGGER_SYSVIEW_OnTaskCreate>
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	461d      	mov	r5, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461c      	mov	r4, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	1ae3      	subs	r3, r4, r3
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	462b      	mov	r3, r5
 80048e8:	f002 f806 	bl	80068f8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f003 f9b8 	bl	8007c64 <SEGGER_SYSVIEW_OnTaskStartReady>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <prvAddNewTaskToReadyList+0x10c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	4a18      	ldr	r2, [pc, #96]	; (8004964 <prvAddNewTaskToReadyList+0x10c>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a15      	ldr	r2, [pc, #84]	; (8004968 <prvAddNewTaskToReadyList+0x110>)
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7fe fff0 	bl	8003902 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004922:	f001 fcf1 	bl	8006308 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004926:	4b0d      	ldr	r3, [pc, #52]	; (800495c <prvAddNewTaskToReadyList+0x104>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800492e:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <prvAddNewTaskToReadyList+0x100>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d207      	bcs.n	800494c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <prvAddNewTaskToReadyList+0x114>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bdb0      	pop	{r4, r5, r7, pc}
 8004954:	20000110 	.word	0x20000110
 8004958:	20000038 	.word	0x20000038
 800495c:	2000011c 	.word	0x2000011c
 8004960:	2000012c 	.word	0x2000012c
 8004964:	20000118 	.word	0x20000118
 8004968:	2000003c 	.word	0x2000003c
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004976:	4b27      	ldr	r3, [pc, #156]	; (8004a14 <vTaskStartScheduler+0xa4>)
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	2300      	movs	r3, #0
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2300      	movs	r3, #0
 8004980:	2282      	movs	r2, #130	; 0x82
 8004982:	4925      	ldr	r1, [pc, #148]	; (8004a18 <vTaskStartScheduler+0xa8>)
 8004984:	4825      	ldr	r0, [pc, #148]	; (8004a1c <vTaskStartScheduler+0xac>)
 8004986:	f7ff fe8f 	bl	80046a8 <xTaskCreate>
 800498a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004992:	f000 ffcd 	bl	8005930 <xTimerCreateTimerTask>
 8004996:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d124      	bne.n	80049e8 <vTaskStartScheduler+0x78>
        __asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	60bb      	str	r3, [r7, #8]
    }
 80049b0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <vTaskStartScheduler+0xb0>)
 80049b4:	f04f 32ff 	mov.w	r2, #4294967295
 80049b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <vTaskStartScheduler+0xb4>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049c0:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <vTaskStartScheduler+0xb8>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80049c6:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <vTaskStartScheduler+0xbc>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <vTaskStartScheduler+0xa4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d102      	bne.n	80049d8 <vTaskStartScheduler+0x68>
 80049d2:	f003 f8a7 	bl	8007b24 <SEGGER_SYSVIEW_OnIdle>
 80049d6:	e004      	b.n	80049e2 <vTaskStartScheduler+0x72>
 80049d8:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <vTaskStartScheduler+0xbc>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f003 f8ff 	bl	8007be0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80049e2:	f001 fbbf 	bl	8006164 <xPortStartScheduler>
 80049e6:	e00e      	b.n	8004a06 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d10a      	bne.n	8004a06 <vTaskStartScheduler+0x96>
        __asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	607b      	str	r3, [r7, #4]
    }
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <vTaskStartScheduler+0xc0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	20000134 	.word	0x20000134
 8004a18:	08008464 	.word	0x08008464
 8004a1c:	0800507d 	.word	0x0800507d
 8004a20:	20000130 	.word	0x20000130
 8004a24:	2000011c 	.word	0x2000011c
 8004a28:	20000114 	.word	0x20000114
 8004a2c:	20000038 	.word	0x20000038
 8004a30:	20000010 	.word	0x20000010

08004a34 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004a38:	4b04      	ldr	r3, [pc, #16]	; (8004a4c <vTaskSuspendAll+0x18>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a03      	ldr	r2, [pc, #12]	; (8004a4c <vTaskSuspendAll+0x18>)
 8004a40:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	20000138 	.word	0x20000138

08004a50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004a5e:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10a      	bne.n	8004a7c <xTaskResumeAll+0x2c>
        __asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	603b      	str	r3, [r7, #0]
    }
 8004a78:	bf00      	nop
 8004a7a:	e7fe      	b.n	8004a7a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004a7c:	f001 fc14 	bl	80062a8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	4a39      	ldr	r2, [pc, #228]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004a88:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <xTaskResumeAll+0x11c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d165      	bne.n	8004b5e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a92:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <xTaskResumeAll+0x120>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d061      	beq.n	8004b5e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a9a:	e032      	b.n	8004b02 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <xTaskResumeAll+0x124>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe ff87 	bl	80039bc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe ff82 	bl	80039bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f003 f8d2 	bl	8007c64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	; (8004b78 <xTaskResumeAll+0x128>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <xTaskResumeAll+0x128>)
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a27      	ldr	r2, [pc, #156]	; (8004b7c <xTaskResumeAll+0x12c>)
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7fe ff0a 	bl	8003902 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b23      	ldr	r3, [pc, #140]	; (8004b80 <xTaskResumeAll+0x130>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8004afc:	4b21      	ldr	r3, [pc, #132]	; (8004b84 <xTaskResumeAll+0x134>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <xTaskResumeAll+0x124>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1c8      	bne.n	8004a9c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004b10:	f000 fb4c 	bl	80051ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b14:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <xTaskResumeAll+0x138>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d010      	beq.n	8004b42 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004b20:	f000 f846 	bl	8004bb0 <xTaskIncrementTick>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <xTaskResumeAll+0x134>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f1      	bne.n	8004b20 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8004b3c:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <xTaskResumeAll+0x138>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004b42:	4b10      	ldr	r3, [pc, #64]	; (8004b84 <xTaskResumeAll+0x134>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <xTaskResumeAll+0x13c>)
 8004b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004b5e:	f001 fbd3 	bl	8006308 <vPortExitCritical>

    return xAlreadyYielded;
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000138 	.word	0x20000138
 8004b70:	20000110 	.word	0x20000110
 8004b74:	200000d0 	.word	0x200000d0
 8004b78:	20000118 	.word	0x20000118
 8004b7c:	2000003c 	.word	0x2000003c
 8004b80:	20000038 	.word	0x20000038
 8004b84:	20000124 	.word	0x20000124
 8004b88:	20000120 	.word	0x20000120
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <xTaskGetTickCount+0x1c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004b9c:	687b      	ldr	r3, [r7, #4]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	20000114 	.word	0x20000114

08004bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bba:	4b50      	ldr	r3, [pc, #320]	; (8004cfc <xTaskIncrementTick+0x14c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 8092 	bne.w	8004ce8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bc4:	4b4e      	ldr	r3, [pc, #312]	; (8004d00 <xTaskIncrementTick+0x150>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004bcc:	4a4c      	ldr	r2, [pc, #304]	; (8004d00 <xTaskIncrementTick+0x150>)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d120      	bne.n	8004c1a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004bd8:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <xTaskIncrementTick+0x48>
        __asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	603b      	str	r3, [r7, #0]
    }
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <xTaskIncrementTick+0x46>
 8004bf8:	4b42      	ldr	r3, [pc, #264]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4b42      	ldr	r3, [pc, #264]	; (8004d08 <xTaskIncrementTick+0x158>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a40      	ldr	r2, [pc, #256]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004c04:	6013      	str	r3, [r2, #0]
 8004c06:	4a40      	ldr	r2, [pc, #256]	; (8004d08 <xTaskIncrementTick+0x158>)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b3f      	ldr	r3, [pc, #252]	; (8004d0c <xTaskIncrementTick+0x15c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3301      	adds	r3, #1
 8004c12:	4a3e      	ldr	r2, [pc, #248]	; (8004d0c <xTaskIncrementTick+0x15c>)
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	f000 fac9 	bl	80051ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <xTaskIncrementTick+0x160>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d34c      	bcc.n	8004cbe <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c24:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2e:	4b38      	ldr	r3, [pc, #224]	; (8004d10 <xTaskIncrementTick+0x160>)
 8004c30:	f04f 32ff 	mov.w	r2, #4294967295
 8004c34:	601a      	str	r2, [r3, #0]
                    break;
 8004c36:	e042      	b.n	8004cbe <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c38:	4b32      	ldr	r3, [pc, #200]	; (8004d04 <xTaskIncrementTick+0x154>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d203      	bcs.n	8004c58 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c50:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <xTaskIncrementTick+0x160>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c56:	e032      	b.n	8004cbe <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fead 	bl	80039bc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d004      	beq.n	8004c74 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fea4 	bl	80039bc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f002 fff4 	bl	8007c64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	2201      	movs	r2, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <xTaskIncrementTick+0x164>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	4a22      	ldr	r2, [pc, #136]	; (8004d14 <xTaskIncrementTick+0x164>)
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4613      	mov	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4413      	add	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <xTaskIncrementTick+0x168>)
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	f7fe fe2c 	bl	8003902 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cae:	4b1b      	ldr	r3, [pc, #108]	; (8004d1c <xTaskIncrementTick+0x16c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d3b5      	bcc.n	8004c24 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cbc:	e7b2      	b.n	8004c24 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <xTaskIncrementTick+0x16c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc4:	4914      	ldr	r1, [pc, #80]	; (8004d18 <xTaskIncrementTick+0x168>)
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d901      	bls.n	8004cda <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <xTaskIncrementTick+0x170>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e004      	b.n	8004cf2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <xTaskIncrementTick+0x174>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3301      	adds	r3, #1
 8004cee:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <xTaskIncrementTick+0x174>)
 8004cf0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004cf2:	697b      	ldr	r3, [r7, #20]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000138 	.word	0x20000138
 8004d00:	20000114 	.word	0x20000114
 8004d04:	200000c8 	.word	0x200000c8
 8004d08:	200000cc 	.word	0x200000cc
 8004d0c:	20000128 	.word	0x20000128
 8004d10:	20000130 	.word	0x20000130
 8004d14:	20000118 	.word	0x20000118
 8004d18:	2000003c 	.word	0x2000003c
 8004d1c:	20000038 	.word	0x20000038
 8004d20:	20000124 	.word	0x20000124
 8004d24:	20000120 	.word	0x20000120

08004d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b086      	sub	sp, #24
 8004d2c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d2e:	4b2d      	ldr	r3, [pc, #180]	; (8004de4 <vTaskSwitchContext+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004d36:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <vTaskSwitchContext+0xc0>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004d3c:	e04d      	b.n	8004dda <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <vTaskSwitchContext+0xc0>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d44:	4b29      	ldr	r3, [pc, #164]	; (8004dec <vTaskSwitchContext+0xc4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004d52:	7afb      	ldrb	r3, [r7, #11]
 8004d54:	f1c3 031f 	rsb	r3, r3, #31
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	4925      	ldr	r1, [pc, #148]	; (8004df0 <vTaskSwitchContext+0xc8>)
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10a      	bne.n	8004d84 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	607b      	str	r3, [r7, #4]
    }
 8004d80:	bf00      	nop
 8004d82:	e7fe      	b.n	8004d82 <vTaskSwitchContext+0x5a>
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <vTaskSwitchContext+0xc8>)
 8004d90:	4413      	add	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	605a      	str	r2, [r3, #4]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3308      	adds	r3, #8
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d104      	bne.n	8004db4 <vTaskSwitchContext+0x8c>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a0e      	ldr	r2, [pc, #56]	; (8004df4 <vTaskSwitchContext+0xcc>)
 8004dbc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	; (8004df4 <vTaskSwitchContext+0xcc>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <vTaskSwitchContext+0xd0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d102      	bne.n	8004dd0 <vTaskSwitchContext+0xa8>
 8004dca:	f002 feab 	bl	8007b24 <SEGGER_SYSVIEW_OnIdle>
}
 8004dce:	e004      	b.n	8004dda <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <vTaskSwitchContext+0xcc>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 ff03 	bl	8007be0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000138 	.word	0x20000138
 8004de8:	20000124 	.word	0x20000124
 8004dec:	20000118 	.word	0x20000118
 8004df0:	2000003c 	.word	0x2000003c
 8004df4:	20000038 	.word	0x20000038
 8004df8:	20000134 	.word	0x20000134

08004dfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	60fb      	str	r3, [r7, #12]
    }
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <vTaskPlaceOnEventList+0x44>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3318      	adds	r3, #24
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fe fd8d 	bl	800394a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e30:	2101      	movs	r1, #1
 8004e32:	6838      	ldr	r0, [r7, #0]
 8004e34:	f000 fd04 	bl	8005840 <prvAddCurrentTaskToDelayedList>
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000038 	.word	0x20000038

08004e44 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	617b      	str	r3, [r7, #20]
    }
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <vTaskPlaceOnEventListRestricted+0x58>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3318      	adds	r3, #24
 8004e72:	4619      	mov	r1, r3
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f7fe fd44 	bl	8003902 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295
 8004e84:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8004e86:	2024      	movs	r0, #36	; 0x24
 8004e88:	f002 f8c4 	bl	8007014 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	68b8      	ldr	r0, [r7, #8]
 8004e90:	f000 fcd6 	bl	8005840 <prvAddCurrentTaskToDelayedList>
    }
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000038 	.word	0x20000038

08004ea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	f383 8811 	msr	BASEPRI, r3
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f3bf 8f4f 	dsb	sy
 8004ec6:	60fb      	str	r3, [r7, #12]
    }
 8004ec8:	bf00      	nop
 8004eca:	e7fe      	b.n	8004eca <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3318      	adds	r3, #24
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fe fd73 	bl	80039bc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed6:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <xTaskRemoveFromEventList+0xb4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d120      	bne.n	8004f20 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fd6a 	bl	80039bc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f002 feba 	bl	8007c64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	409a      	lsls	r2, r3
 8004ef8:	4b17      	ldr	r3, [pc, #92]	; (8004f58 <xTaskRemoveFromEventList+0xb8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <xTaskRemoveFromEventList+0xb8>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <xTaskRemoveFromEventList+0xbc>)
 8004f10:	441a      	add	r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f7fe fcf2 	bl	8003902 <vListInsertEnd>
 8004f1e:	e005      	b.n	8004f2c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3318      	adds	r3, #24
 8004f24:	4619      	mov	r1, r3
 8004f26:	480e      	ldr	r0, [pc, #56]	; (8004f60 <xTaskRemoveFromEventList+0xc0>)
 8004f28:	f7fe fceb 	bl	8003902 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f30:	4b0c      	ldr	r3, [pc, #48]	; (8004f64 <xTaskRemoveFromEventList+0xc4>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d905      	bls.n	8004f46 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <xTaskRemoveFromEventList+0xc8>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e001      	b.n	8004f4a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004f4a:	697b      	ldr	r3, [r7, #20]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3718      	adds	r7, #24
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000138 	.word	0x20000138
 8004f58:	20000118 	.word	0x20000118
 8004f5c:	2000003c 	.word	0x2000003c
 8004f60:	200000d0 	.word	0x200000d0
 8004f64:	20000038 	.word	0x20000038
 8004f68:	20000124 	.word	0x20000124

08004f6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f74:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <vTaskInternalSetTimeOutState+0x24>)
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <vTaskInternalSetTimeOutState+0x28>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	20000128 	.word	0x20000128
 8004f94:	20000114 	.word	0x20000114

08004f98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	613b      	str	r3, [r7, #16]
    }
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60fb      	str	r3, [r7, #12]
    }
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004fda:	f001 f965 	bl	80062a8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004fde:	4b1f      	ldr	r3, [pc, #124]	; (800505c <xTaskCheckForTimeOut+0xc4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d102      	bne.n	8004ffe <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
 8004ffc:	e026      	b.n	800504c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <xTaskCheckForTimeOut+0xc8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	429a      	cmp	r2, r3
 8005008:	d00a      	beq.n	8005020 <xTaskCheckForTimeOut+0x88>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	429a      	cmp	r2, r3
 8005012:	d305      	bcc.n	8005020 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005014:	2301      	movs	r3, #1
 8005016:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
 800501e:	e015      	b.n	800504c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d20b      	bcs.n	8005042 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad2      	subs	r2, r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7ff ff98 	bl	8004f6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	61fb      	str	r3, [r7, #28]
 8005040:	e004      	b.n	800504c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800504c:	f001 f95c 	bl	8006308 <vPortExitCritical>

    return xReturn;
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000114 	.word	0x20000114
 8005060:	20000128 	.word	0x20000128

08005064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005064:	b480      	push	{r7}
 8005066:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005068:	4b03      	ldr	r3, [pc, #12]	; (8005078 <vTaskMissedYield+0x14>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	20000124 	.word	0x20000124

0800507c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005084:	f000 f854 	bl	8005130 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005088:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <prvIdleTask+0x2c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d907      	bls.n	80050a0 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8005090:	4b06      	ldr	r3, [pc, #24]	; (80050ac <prvIdleTask+0x30>)
 8005092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 80050a0:	f7fc f8fc 	bl	800129c <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 80050a4:	e7ee      	b.n	8005084 <prvIdleTask+0x8>
 80050a6:	bf00      	nop
 80050a8:	2000003c 	.word	0x2000003c
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	e00c      	b.n	80050d6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <prvInitialiseTaskLists+0x60>)
 80050c8:	4413      	add	r3, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fbec 	bl	80038a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3301      	adds	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d9ef      	bls.n	80050bc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80050dc:	480d      	ldr	r0, [pc, #52]	; (8005114 <prvInitialiseTaskLists+0x64>)
 80050de:	f7fe fbe3 	bl	80038a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80050e2:	480d      	ldr	r0, [pc, #52]	; (8005118 <prvInitialiseTaskLists+0x68>)
 80050e4:	f7fe fbe0 	bl	80038a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80050e8:	480c      	ldr	r0, [pc, #48]	; (800511c <prvInitialiseTaskLists+0x6c>)
 80050ea:	f7fe fbdd 	bl	80038a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80050ee:	480c      	ldr	r0, [pc, #48]	; (8005120 <prvInitialiseTaskLists+0x70>)
 80050f0:	f7fe fbda 	bl	80038a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80050f4:	480b      	ldr	r0, [pc, #44]	; (8005124 <prvInitialiseTaskLists+0x74>)
 80050f6:	f7fe fbd7 	bl	80038a8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	; (8005128 <prvInitialiseTaskLists+0x78>)
 80050fc:	4a05      	ldr	r2, [pc, #20]	; (8005114 <prvInitialiseTaskLists+0x64>)
 80050fe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005100:	4b0a      	ldr	r3, [pc, #40]	; (800512c <prvInitialiseTaskLists+0x7c>)
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <prvInitialiseTaskLists+0x68>)
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000003c 	.word	0x2000003c
 8005114:	200000a0 	.word	0x200000a0
 8005118:	200000b4 	.word	0x200000b4
 800511c:	200000d0 	.word	0x200000d0
 8005120:	200000e4 	.word	0x200000e4
 8005124:	200000fc 	.word	0x200000fc
 8005128:	200000c8 	.word	0x200000c8
 800512c:	200000cc 	.word	0x200000cc

08005130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005136:	e019      	b.n	800516c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005138:	f001 f8b6 	bl	80062a8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <prvCheckTasksWaitingTermination+0x50>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fc37 	bl	80039bc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800514e:	4b0d      	ldr	r3, [pc, #52]	; (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005156:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <prvCheckTasksWaitingTermination+0x58>)
 8005160:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005162:	f001 f8d1 	bl	8006308 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f810 	bl	800518c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e1      	bne.n	8005138 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	200000e4 	.word	0x200000e4
 8005184:	20000110 	.word	0x20000110
 8005188:	200000f8 	.word	0x200000f8

0800518c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005198:	4618      	mov	r0, r3
 800519a:	f001 fa8f 	bl	80066bc <vPortFree>
                vPortFree( pxTCB );
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fa8c 	bl	80066bc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051b0:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <prvResetNextTaskUnblockTime+0x30>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80051ba:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <prvResetNextTaskUnblockTime+0x34>)
 80051bc:	f04f 32ff 	mov.w	r2, #4294967295
 80051c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80051c2:	e005      	b.n	80051d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80051c4:	4b05      	ldr	r3, [pc, #20]	; (80051dc <prvResetNextTaskUnblockTime+0x30>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <prvResetNextTaskUnblockTime+0x34>)
 80051ce:	6013      	str	r3, [r2, #0]
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	200000c8 	.word	0x200000c8
 80051e0:	20000130 	.word	0x20000130

080051e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <xTaskGetSchedulerState+0x34>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80051f2:	2301      	movs	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
 80051f6:	e008      	b.n	800520a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <xTaskGetSchedulerState+0x38>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005200:	2302      	movs	r3, #2
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e001      	b.n	800520a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800520a:	687b      	ldr	r3, [r7, #4]
    }
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	2000011c 	.word	0x2000011c
 800521c:	20000138 	.word	0x20000138

08005220 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d068      	beq.n	8005308 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005236:	4b37      	ldr	r3, [pc, #220]	; (8005314 <xTaskPriorityDisinherit+0xf4>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	429a      	cmp	r2, r3
 800523e:	d00a      	beq.n	8005256 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	60fb      	str	r3, [r7, #12]
    }
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10a      	bne.n	8005274 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60bb      	str	r3, [r7, #8]
    }
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005286:	429a      	cmp	r2, r3
 8005288:	d03e      	beq.n	8005308 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d13a      	bne.n	8005308 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fb90 	bl	80039bc <uxListRemove>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	2201      	movs	r2, #1
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43da      	mvns	r2, r3
 80052ae:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <xTaskPriorityDisinherit+0xf8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4013      	ands	r3, r2
 80052b4:	4a18      	ldr	r2, [pc, #96]	; (8005318 <xTaskPriorityDisinherit+0xf8>)
 80052b6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4619      	mov	r1, r3
 80052bc:	204a      	movs	r0, #74	; 0x4a
 80052be:	f001 fec7 	bl	8007050 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f1c3 0205 	rsb	r2, r3, #5
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	2201      	movs	r2, #1
 80052dc:	409a      	lsls	r2, r3
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <xTaskPriorityDisinherit+0xf8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	4a0c      	ldr	r2, [pc, #48]	; (8005318 <xTaskPriorityDisinherit+0xf8>)
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4a09      	ldr	r2, [pc, #36]	; (800531c <xTaskPriorityDisinherit+0xfc>)
 80052f6:	441a      	add	r2, r3
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4619      	mov	r1, r3
 80052fe:	4610      	mov	r0, r2
 8005300:	f7fe faff 	bl	8003902 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005304:	2301      	movs	r3, #1
 8005306:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005308:	697b      	ldr	r3, [r7, #20]
    }
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000038 	.word	0x20000038
 8005318:	20000118 	.word	0x20000118
 800531c:	2000003c 	.word	0x2000003c

08005320 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	613b      	str	r3, [r7, #16]
    }
 8005346:	bf00      	nop
 8005348:	e7fe      	b.n	8005348 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800534a:	f000 ffad 	bl	80062a8 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800534e:	4b36      	ldr	r3, [pc, #216]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	3354      	adds	r3, #84	; 0x54
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d022      	beq.n	80053a6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	3214      	adds	r2, #20
 8005368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	43d2      	mvns	r2, r2
 8005370:	4011      	ands	r1, r2
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	3214      	adds	r2, #20
 8005376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800537a:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	3354      	adds	r3, #84	; 0x54
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800538e:	2101      	movs	r1, #1
 8005390:	6a38      	ldr	r0, [r7, #32]
 8005392:	f000 fa55 	bl	8005840 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005396:	4b25      	ldr	r3, [pc, #148]	; (800542c <xTaskGenericNotifyWait+0x10c>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80053a6:	f000 ffaf 	bl	8006308 <vPortExitCritical>

        taskENTER_CRITICAL();
 80053aa:	f000 ff7d 	bl	80062a8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	4613      	mov	r3, r2
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	2040      	movs	r0, #64	; 0x40
 80053bc:	f001 ff54 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80053c6:	4b18      	ldr	r3, [pc, #96]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	3214      	adds	r2, #20
 80053ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	3354      	adds	r3, #84	; 0x54
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d002      	beq.n	80053ee <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	e00e      	b.n	800540c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80053ee:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	3214      	adds	r2, #20
 80053f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	43d2      	mvns	r2, r2
 80053fe:	4011      	ands	r1, r2
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	3214      	adds	r2, #20
 8005404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800540c:	4b06      	ldr	r3, [pc, #24]	; (8005428 <xTaskGenericNotifyWait+0x108>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	3354      	adds	r3, #84	; 0x54
 8005416:	2200      	movs	r2, #0
 8005418:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800541a:	f000 ff75 	bl	8006308 <vPortExitCritical>

        return xReturn;
 800541e:	697b      	ldr	r3, [r7, #20]
    }
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20000038 	.word	0x20000038
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005430:	b580      	push	{r7, lr}
 8005432:	b08e      	sub	sp, #56	; 0x38
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800543e:	2301      	movs	r3, #1
 8005440:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <xTaskGenericNotify+0x2e>
        __asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	623b      	str	r3, [r7, #32]
    }
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10a      	bne.n	800547a <xTaskGenericNotify+0x4a>
        __asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	61fb      	str	r3, [r7, #28]
    }
 8005476:	bf00      	nop
 8005478:	e7fe      	b.n	8005478 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800547e:	f000 ff13 	bl	80062a8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	2b00      	cmp	r3, #0
 8005486:	d006      	beq.n	8005496 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	3214      	adds	r2, #20
 800548e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4413      	add	r3, r2
 800549c:	3354      	adds	r3, #84	; 0x54
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80054a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4413      	add	r3, r2
 80054aa:	3354      	adds	r3, #84	; 0x54
 80054ac:	2202      	movs	r2, #2
 80054ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d83b      	bhi.n	800552e <xTaskGenericNotify+0xfe>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <xTaskGenericNotify+0x8c>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	0800554d 	.word	0x0800554d
 80054c0:	080054d1 	.word	0x080054d1
 80054c4:	080054ed 	.word	0x080054ed
 80054c8:	08005505 	.word	0x08005505
 80054cc:	08005513 	.word	0x08005513
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	3214      	adds	r2, #20
 80054d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	ea42 0103 	orr.w	r1, r2, r3
 80054e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	3214      	adds	r2, #20
 80054e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054ea:	e032      	b.n	8005552 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	3214      	adds	r2, #20
 80054f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	3214      	adds	r2, #20
 80054fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005502:	e026      	b.n	8005552 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	3214      	adds	r2, #20
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005510:	e01f      	b.n	8005552 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005516:	2b02      	cmp	r3, #2
 8005518:	d006      	beq.n	8005528 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	3214      	adds	r2, #20
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005526:	e014      	b.n	8005552 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8005528:	2300      	movs	r3, #0
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800552c:	e011      	b.n	8005552 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800552e:	4b34      	ldr	r3, [pc, #208]	; (8005600 <xTaskGenericNotify+0x1d0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <xTaskGenericNotify+0x120>
        __asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	61bb      	str	r3, [r7, #24]
    }
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xTaskGenericNotify+0x11a>
                    break;
 800554c:	bf00      	nop
 800554e:	e000      	b.n	8005552 <xTaskGenericNotify+0x122>

                    break;
 8005550:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	4618      	mov	r0, r3
 8005556:	f002 fc27 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 800555a:	4601      	mov	r1, r0
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	203e      	movs	r0, #62	; 0x3e
 8005568:	f001 fe7e 	bl	8007268 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800556c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005570:	2b01      	cmp	r3, #1
 8005572:	d13d      	bne.n	80055f0 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fa1f 	bl	80039bc <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	4618      	mov	r0, r3
 8005582:	f002 fb6f 	bl	8007c64 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	2201      	movs	r2, #1
 800558c:	409a      	lsls	r2, r3
 800558e:	4b1d      	ldr	r3, [pc, #116]	; (8005604 <xTaskGenericNotify+0x1d4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4313      	orrs	r3, r2
 8005594:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <xTaskGenericNotify+0x1d4>)
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4a18      	ldr	r2, [pc, #96]	; (8005608 <xTaskGenericNotify+0x1d8>)
 80055a6:	441a      	add	r2, r3
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	3304      	adds	r3, #4
 80055ac:	4619      	mov	r1, r3
 80055ae:	4610      	mov	r0, r2
 80055b0:	f7fe f9a7 	bl	8003902 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80055b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <xTaskGenericNotify+0x1a2>
        __asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	617b      	str	r3, [r7, #20]
    }
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <xTaskGenericNotify+0x1dc>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d907      	bls.n	80055f0 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <xTaskGenericNotify+0x1e0>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80055f0:	f000 fe8a 	bl	8006308 <vPortExitCritical>

        return xReturn;
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80055f6:	4618      	mov	r0, r3
 80055f8:	3730      	adds	r7, #48	; 0x30
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20000114 	.word	0x20000114
 8005604:	20000118 	.word	0x20000118
 8005608:	2000003c 	.word	0x2000003c
 800560c:	20000038 	.word	0x20000038
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005614:	b580      	push	{r7, lr}
 8005616:	b092      	sub	sp, #72	; 0x48
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005622:	2301      	movs	r3, #1
 8005624:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800565e:	f000 ff0d 	bl	800647c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8005666:	f3ef 8211 	mrs	r2, BASEPRI
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	627a      	str	r2, [r7, #36]	; 0x24
 800567c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8005682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	3214      	adds	r2, #20
 800568e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005694:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4413      	add	r3, r2
 800569c:	3354      	adds	r3, #84	; 0x54
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80056a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	3354      	adds	r3, #84	; 0x54
 80056ac:	2202      	movs	r2, #2
 80056ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d83b      	bhi.n	800572e <xTaskGenericNotifyFromISR+0x11a>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <xTaskGenericNotifyFromISR+0xa8>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	0800574d 	.word	0x0800574d
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	08005705 	.word	0x08005705
 80056cc:	08005713 	.word	0x08005713
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	3214      	adds	r2, #20
 80056d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	ea42 0103 	orr.w	r1, r2, r3
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	3214      	adds	r2, #20
 80056e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80056ea:	e032      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	3214      	adds	r2, #20
 80056f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	3214      	adds	r2, #20
 80056fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005702:	e026      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	3214      	adds	r2, #20
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005710:	e01f      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005712:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005716:	2b02      	cmp	r3, #2
 8005718:	d006      	beq.n	8005728 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800571a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	3214      	adds	r2, #20
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005726:	e014      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005728:	2300      	movs	r3, #0
 800572a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800572c:	e011      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800572e:	4b3d      	ldr	r3, [pc, #244]	; (8005824 <xTaskGenericNotifyFromISR+0x210>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fb      	str	r3, [r7, #28]
    }
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005750:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8005752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005754:	4618      	mov	r0, r3
 8005756:	f002 fb27 	bl	8007da8 <SEGGER_SYSVIEW_ShrinkId>
 800575a:	78f9      	ldrb	r1, [r7, #3]
 800575c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005760:	9201      	str	r2, [sp, #4]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	460b      	mov	r3, r1
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	4601      	mov	r1, r0
 800576a:	203f      	movs	r0, #63	; 0x3f
 800576c:	f001 fe0e 	bl	800738c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005774:	2b01      	cmp	r3, #1
 8005776:	d149      	bne.n	800580c <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00a      	beq.n	8005796 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	61bb      	str	r3, [r7, #24]
    }
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <xTaskGenericNotifyFromISR+0x214>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d120      	bne.n	80057e0 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	3304      	adds	r3, #4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe f90a 	bl	80039bc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	4618      	mov	r0, r3
 80057ac:	f002 fa5a 	bl	8007c64 <SEGGER_SYSVIEW_OnTaskStartReady>
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	2201      	movs	r2, #1
 80057b6:	409a      	lsls	r2, r3
 80057b8:	4b1c      	ldr	r3, [pc, #112]	; (800582c <xTaskGenericNotifyFromISR+0x218>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4313      	orrs	r3, r2
 80057be:	4a1b      	ldr	r2, [pc, #108]	; (800582c <xTaskGenericNotifyFromISR+0x218>)
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <xTaskGenericNotifyFromISR+0x21c>)
 80057d0:	441a      	add	r2, r3
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7fe f892 	bl	8003902 <vListInsertEnd>
 80057de:	e005      	b.n	80057ec <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	3318      	adds	r3, #24
 80057e4:	4619      	mov	r1, r3
 80057e6:	4813      	ldr	r0, [pc, #76]	; (8005834 <xTaskGenericNotifyFromISR+0x220>)
 80057e8:	f7fe f88b 	bl	8003902 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	4b11      	ldr	r3, [pc, #68]	; (8005838 <xTaskGenericNotifyFromISR+0x224>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d908      	bls.n	800580c <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80057fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005806:	4b0d      	ldr	r3, [pc, #52]	; (800583c <xTaskGenericNotifyFromISR+0x228>)
 8005808:	2201      	movs	r2, #1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800580e:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f383 8811 	msr	BASEPRI, r3
    }
 8005816:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8005818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 800581a:	4618      	mov	r0, r3
 800581c:	3740      	adds	r7, #64	; 0x40
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000114 	.word	0x20000114
 8005828:	20000138 	.word	0x20000138
 800582c:	20000118 	.word	0x20000118
 8005830:	2000003c 	.word	0x2000003c
 8005834:	200000d0 	.word	0x200000d0
 8005838:	20000038 	.word	0x20000038
 800583c:	20000124 	.word	0x20000124

08005840 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800584a:	4b32      	ldr	r3, [pc, #200]	; (8005914 <prvAddCurrentTaskToDelayedList+0xd4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005850:	4b31      	ldr	r3, [pc, #196]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	3304      	adds	r3, #4
 8005856:	4618      	mov	r0, r3
 8005858:	f7fe f8b0 	bl	80039bc <uxListRemove>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	2201      	movs	r2, #1
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43da      	mvns	r2, r3
 8005870:	4b2a      	ldr	r3, [pc, #168]	; (800591c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4013      	ands	r3, r2
 8005876:	4a29      	ldr	r2, [pc, #164]	; (800591c <prvAddCurrentTaskToDelayedList+0xdc>)
 8005878:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005880:	d110      	bne.n	80058a4 <prvAddCurrentTaskToDelayedList+0x64>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8005888:	4b23      	ldr	r3, [pc, #140]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	211b      	movs	r1, #27
 800588e:	4618      	mov	r0, r3
 8005890:	f002 fa2a 	bl	8007ce8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005894:	4b20      	ldr	r3, [pc, #128]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3304      	adds	r3, #4
 800589a:	4619      	mov	r1, r3
 800589c:	4820      	ldr	r0, [pc, #128]	; (8005920 <prvAddCurrentTaskToDelayedList+0xe0>)
 800589e:	f7fe f830 	bl	8003902 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80058a2:	e032      	b.n	800590a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058ac:	4b1a      	ldr	r3, [pc, #104]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d20f      	bcs.n	80058dc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80058bc:	4b16      	ldr	r3, [pc, #88]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2104      	movs	r1, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f002 fa10 	bl	8007ce8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c8:	4b16      	ldr	r3, [pc, #88]	; (8005924 <prvAddCurrentTaskToDelayedList+0xe4>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b12      	ldr	r3, [pc, #72]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4619      	mov	r1, r3
 80058d4:	4610      	mov	r0, r2
 80058d6:	f7fe f838 	bl	800394a <vListInsert>
}
 80058da:	e016      	b.n	800590a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80058dc:	4b0e      	ldr	r3, [pc, #56]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2104      	movs	r1, #4
 80058e2:	4618      	mov	r0, r3
 80058e4:	f002 fa00 	bl	8007ce8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e8:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <prvAddCurrentTaskToDelayedList+0xd8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	4610      	mov	r0, r2
 80058f6:	f7fe f828 	bl	800394a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <prvAddCurrentTaskToDelayedList+0xec>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	429a      	cmp	r2, r3
 8005902:	d202      	bcs.n	800590a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8005904:	4a09      	ldr	r2, [pc, #36]	; (800592c <prvAddCurrentTaskToDelayedList+0xec>)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6013      	str	r3, [r2, #0]
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000114 	.word	0x20000114
 8005918:	20000038 	.word	0x20000038
 800591c:	20000118 	.word	0x20000118
 8005920:	200000fc 	.word	0x200000fc
 8005924:	200000cc 	.word	0x200000cc
 8005928:	200000c8 	.word	0x200000c8
 800592c:	20000130 	.word	0x20000130

08005930 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005936:	2300      	movs	r3, #0
 8005938:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800593a:	f000 fb31 	bl	8005fa0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800593e:	4b11      	ldr	r3, [pc, #68]	; (8005984 <xTimerCreateTimerTask+0x54>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005946:	4b10      	ldr	r3, [pc, #64]	; (8005988 <xTimerCreateTimerTask+0x58>)
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	2302      	movs	r3, #2
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	2300      	movs	r3, #0
 8005950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005954:	490d      	ldr	r1, [pc, #52]	; (800598c <xTimerCreateTimerTask+0x5c>)
 8005956:	480e      	ldr	r0, [pc, #56]	; (8005990 <xTimerCreateTimerTask+0x60>)
 8005958:	f7fe fea6 	bl	80046a8 <xTaskCreate>
 800595c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10a      	bne.n	800597a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	603b      	str	r3, [r7, #0]
    }
 8005976:	bf00      	nop
 8005978:	e7fe      	b.n	8005978 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800597a:	687b      	ldr	r3, [r7, #4]
    }
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	2000016c 	.word	0x2000016c
 8005988:	20000170 	.word	0x20000170
 800598c:	0800846c 	.word	0x0800846c
 8005990:	08005b81 	.word	0x08005b81

08005994 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af02      	add	r7, sp, #8
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80059a2:	202c      	movs	r0, #44	; 0x2c
 80059a4:	f000 fdaa 	bl	80064fc <pvPortMalloc>
 80059a8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 f805 	bl	80059d6 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80059cc:	697b      	ldr	r3, [r7, #20]
        }
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b086      	sub	sp, #24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10a      	bne.n	8005a00 <prvInitialiseNewTimer+0x2a>
        __asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	617b      	str	r3, [r7, #20]
    }
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01e      	beq.n	8005a44 <prvInitialiseNewTimer+0x6e>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8005a06:	f000 facb 	bl	8005fa0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	6a3a      	ldr	r2, [r7, #32]
 8005a20:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	3304      	adds	r3, #4
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fd ff5e 	bl	80038e8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <prvInitialiseNewTimer+0x6e>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	; 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <xTimerGenericCommand+0x2e>
        __asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	623b      	str	r3, [r7, #32]
    }
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005a7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <xTimerGenericCommand+0x98>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d02a      	beq.n	8005ad8 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b05      	cmp	r3, #5
 8005a92:	dc18      	bgt.n	8005ac6 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a94:	f7ff fba6 	bl	80051e4 <xTaskGetSchedulerState>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d109      	bne.n	8005ab2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a9e:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <xTimerGenericCommand+0x98>)
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	f107 0114 	add.w	r1, r7, #20
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aaa:	f7fe f8a1 	bl	8003bf0 <xQueueGenericSend>
 8005aae:	6278      	str	r0, [r7, #36]	; 0x24
 8005ab0:	e012      	b.n	8005ad8 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <xTimerGenericCommand+0x98>)
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f107 0114 	add.w	r1, r7, #20
 8005aba:	2300      	movs	r3, #0
 8005abc:	2200      	movs	r2, #0
 8005abe:	f7fe f897 	bl	8003bf0 <xQueueGenericSend>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24
 8005ac4:	e008      	b.n	8005ad8 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ac6:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <xTimerGenericCommand+0x98>)
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	f107 0114 	add.w	r1, r7, #20
 8005ace:	2300      	movs	r3, #0
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	f7fe f9b3 	bl	8003e3c <xQueueGenericSendFromISR>
 8005ad6:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005ada:	4618      	mov	r0, r3
 8005adc:	3728      	adds	r7, #40	; 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	2000016c 	.word	0x2000016c

08005ae8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af2:	4b22      	ldr	r3, [pc, #136]	; (8005b7c <prvProcessExpiredTimer+0x94>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fd ff5b 	bl	80039bc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d022      	beq.n	8005b5a <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	18d1      	adds	r1, r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	6978      	ldr	r0, [r7, #20]
 8005b22:	f000 f8d1 	bl	8005cc8 <prvInsertTimerInActiveList>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01f      	beq.n	8005b6c <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	2300      	movs	r3, #0
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	2100      	movs	r1, #0
 8005b36:	6978      	ldr	r0, [r7, #20]
 8005b38:	f7ff ff88 	bl	8005a4c <xTimerGenericCommand>
 8005b3c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d113      	bne.n	8005b6c <prvProcessExpiredTimer+0x84>
        __asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	60fb      	str	r3, [r7, #12]
    }
 8005b56:	bf00      	nop
 8005b58:	e7fe      	b.n	8005b58 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	6978      	ldr	r0, [r7, #20]
 8005b72:	4798      	blx	r3
    }
 8005b74:	bf00      	nop
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000164 	.word	0x20000164

08005b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b88:	f107 0308 	add.w	r3, r7, #8
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f000 f857 	bl	8005c40 <prvGetNextExpireTime>
 8005b92:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4619      	mov	r1, r3
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f803 	bl	8005ba4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005b9e:	f000 f8d5 	bl	8005d4c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ba2:	e7f1      	b.n	8005b88 <prvTimerTask+0x8>

08005ba4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005bae:	f7fe ff41 	bl	8004a34 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bb2:	f107 0308 	add.w	r3, r7, #8
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f866 	bl	8005c88 <prvSampleTimeNow>
 8005bbc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d130      	bne.n	8005c26 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <prvProcessTimerOrBlockTask+0x3c>
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d806      	bhi.n	8005be0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005bd2:	f7fe ff3d 	bl	8004a50 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ff85 	bl	8005ae8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005bde:	e024      	b.n	8005c2a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005be6:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <prvProcessTimerOrBlockTask+0x90>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d101      	bne.n	8005bf4 <prvProcessTimerOrBlockTask+0x50>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <prvProcessTimerOrBlockTask+0x52>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <prvProcessTimerOrBlockTask+0x94>)
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	4619      	mov	r1, r3
 8005c06:	f7fe fd1b 	bl	8004640 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005c0a:	f7fe ff21 	bl	8004a50 <xTaskResumeAll>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005c14:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <prvProcessTimerOrBlockTask+0x98>)
 8005c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1a:	601a      	str	r2, [r3, #0]
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	f3bf 8f6f 	isb	sy
    }
 8005c24:	e001      	b.n	8005c2a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005c26:	f7fe ff13 	bl	8004a50 <xTaskResumeAll>
    }
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	20000168 	.word	0x20000168
 8005c38:	2000016c 	.word	0x2000016c
 8005c3c:	e000ed04 	.word	0xe000ed04

08005c40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c48:	4b0e      	ldr	r3, [pc, #56]	; (8005c84 <prvGetNextExpireTime+0x44>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <prvGetNextExpireTime+0x16>
 8005c52:	2201      	movs	r2, #1
 8005c54:	e000      	b.n	8005c58 <prvGetNextExpireTime+0x18>
 8005c56:	2200      	movs	r2, #0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <prvGetNextExpireTime+0x44>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	e001      	b.n	8005c74 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005c74:	68fb      	ldr	r3, [r7, #12]
    }
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000164 	.word	0x20000164

08005c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005c90:	f7fe ff7e 	bl	8004b90 <xTaskGetTickCount>
 8005c94:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <prvSampleTimeNow+0x3c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d205      	bcs.n	8005cac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005ca0:	f000 f91a 	bl	8005ed8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005cb2:	4a04      	ldr	r2, [pc, #16]	; (8005cc4 <prvSampleTimeNow+0x3c>)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
    }
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	20000174 	.word	0x20000174

08005cc8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d812      	bhi.n	8005d14 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	1ad2      	subs	r2, r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
 8005d00:	e01b      	b.n	8005d3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005d02:	4b10      	ldr	r3, [pc, #64]	; (8005d44 <prvInsertTimerInActiveList+0x7c>)
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	f7fd fe1c 	bl	800394a <vListInsert>
 8005d12:	e012      	b.n	8005d3a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d206      	bcs.n	8005d2a <prvInsertTimerInActiveList+0x62>
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	e007      	b.n	8005d3a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d2a:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <prvInsertTimerInActiveList+0x80>)
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fd fe08 	bl	800394a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005d3a:	697b      	ldr	r3, [r7, #20]
    }
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	20000168 	.word	0x20000168
 8005d48:	20000164 	.word	0x20000164

08005d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	; 0x30
 8005d50:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d52:	e0ae      	b.n	8005eb2 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f2c0 80aa 	blt.w	8005eb0 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d004      	beq.n	8005d72 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fd fe25 	bl	80039bc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d72:	1d3b      	adds	r3, r7, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff ff87 	bl	8005c88 <prvSampleTimeNow>
 8005d7a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	f200 8097 	bhi.w	8005eb2 <prvProcessReceivedCommands+0x166>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <prvProcessReceivedCommands+0x40>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005db5 	.word	0x08005db5
 8005d94:	08005db5 	.word	0x08005db5
 8005d98:	08005e29 	.word	0x08005e29
 8005d9c:	08005e3d 	.word	0x08005e3d
 8005da0:	08005e87 	.word	0x08005e87
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005db5 	.word	0x08005db5
 8005dac:	08005e29 	.word	0x08005e29
 8005db0:	08005e3d 	.word	0x08005e3d
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	18d1      	adds	r1, r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dd4:	f7ff ff78 	bl	8005cc8 <prvInsertTimerInActiveList>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d069      	beq.n	8005eb2 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005de4:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05e      	beq.n	8005eb2 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	441a      	add	r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2300      	movs	r3, #0
 8005e02:	2100      	movs	r1, #0
 8005e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e06:	f7ff fe21 	bl	8005a4c <xTimerGenericCommand>
 8005e0a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d14f      	bne.n	8005eb2 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	61bb      	str	r3, [r7, #24]
    }
 8005e24:	bf00      	nop
 8005e26:	e7fe      	b.n	8005e26 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005e3a:	e03a      	b.n	8005eb2 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e42:	f043 0301 	orr.w	r3, r3, #1
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	617b      	str	r3, [r7, #20]
    }
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	18d1      	adds	r1, r2, r3
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	6a3a      	ldr	r2, [r7, #32]
 8005e7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e80:	f7ff ff22 	bl	8005cc8 <prvInsertTimerInActiveList>
                        break;
 8005e84:	e015      	b.n	8005eb2 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d103      	bne.n	8005e9c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8005e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e96:	f000 fc11 	bl	80066bc <vPortFree>
 8005e9a:	e00a      	b.n	8005eb2 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005eae:	e000      	b.n	8005eb2 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005eb0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <prvProcessReceivedCommands+0x188>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f107 0108 	add.w	r1, r7, #8
 8005eba:	2200      	movs	r2, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fe f87b 	bl	8003fb8 <xQueueReceive>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f47f af45 	bne.w	8005d54 <prvProcessReceivedCommands+0x8>
        }
    }
 8005eca:	bf00      	nop
 8005ecc:	bf00      	nop
 8005ece:	3728      	adds	r7, #40	; 0x28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	2000016c 	.word	0x2000016c

08005ed8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b088      	sub	sp, #32
 8005edc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ede:	e048      	b.n	8005f72 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ee0:	4b2d      	ldr	r3, [pc, #180]	; (8005f98 <prvSwitchTimerLists+0xc0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eea:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <prvSwitchTimerLists+0xc0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd fd5f 	bl	80039bc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d02e      	beq.n	8005f72 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d90e      	bls.n	8005f44 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f32:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <prvSwitchTimerLists+0xc0>)
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7fd fd04 	bl	800394a <vListInsert>
 8005f42:	e016      	b.n	8005f72 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f44:	2300      	movs	r3, #0
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	2300      	movs	r3, #0
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f7ff fd7c 	bl	8005a4c <xTimerGenericCommand>
 8005f54:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8005f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f60:	f383 8811 	msr	BASEPRI, r3
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	603b      	str	r3, [r7, #0]
    }
 8005f6e:	bf00      	nop
 8005f70:	e7fe      	b.n	8005f70 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <prvSwitchTimerLists+0xc0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1b1      	bne.n	8005ee0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <prvSwitchTimerLists+0xc0>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <prvSwitchTimerLists+0xc4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <prvSwitchTimerLists+0xc0>)
 8005f88:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005f8a:	4a04      	ldr	r2, [pc, #16]	; (8005f9c <prvSwitchTimerLists+0xc4>)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	6013      	str	r3, [r2, #0]
    }
 8005f90:	bf00      	nop
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000164 	.word	0x20000164
 8005f9c:	20000168 	.word	0x20000168

08005fa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005fa4:	f000 f980 	bl	80062a8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005fa8:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <prvCheckForValidListAndQueue+0x54>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11d      	bne.n	8005fec <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005fb0:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <prvCheckForValidListAndQueue+0x58>)
 8005fb2:	f7fd fc79 	bl	80038a8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005fb6:	4811      	ldr	r0, [pc, #68]	; (8005ffc <prvCheckForValidListAndQueue+0x5c>)
 8005fb8:	f7fd fc76 	bl	80038a8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <prvCheckForValidListAndQueue+0x60>)
 8005fbe:	4a0e      	ldr	r2, [pc, #56]	; (8005ff8 <prvCheckForValidListAndQueue+0x58>)
 8005fc0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <prvCheckForValidListAndQueue+0x64>)
 8005fc4:	4a0d      	ldr	r2, [pc, #52]	; (8005ffc <prvCheckForValidListAndQueue+0x5c>)
 8005fc6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005fc8:	2200      	movs	r2, #0
 8005fca:	210c      	movs	r1, #12
 8005fcc:	200a      	movs	r0, #10
 8005fce:	f7fd fd87 	bl	8003ae0 <xQueueGenericCreate>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	4a07      	ldr	r2, [pc, #28]	; (8005ff4 <prvCheckForValidListAndQueue+0x54>)
 8005fd6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <prvCheckForValidListAndQueue+0x54>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d005      	beq.n	8005fec <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <prvCheckForValidListAndQueue+0x54>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4908      	ldr	r1, [pc, #32]	; (8006008 <prvCheckForValidListAndQueue+0x68>)
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe faf8 	bl	80045dc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005fec:	f000 f98c 	bl	8006308 <vPortExitCritical>
    }
 8005ff0:	bf00      	nop
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	2000016c 	.word	0x2000016c
 8005ff8:	2000013c 	.word	0x2000013c
 8005ffc:	20000150 	.word	0x20000150
 8006000:	20000164 	.word	0x20000164
 8006004:	20000168 	.word	0x20000168
 8006008:	08008474 	.word	0x08008474

0800600c <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <pvTimerGetTimerID+0x28>
        __asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	60fb      	str	r3, [r7, #12]
    }
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006034:	f000 f938 	bl	80062a8 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800603e:	f000 f963 	bl	8006308 <vPortExitCritical>

        return pvReturn;
 8006042:	693b      	ldr	r3, [r7, #16]
    }
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3b04      	subs	r3, #4
 800605c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006064:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3b04      	subs	r3, #4
 800606a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f023 0201 	bic.w	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3b04      	subs	r3, #4
 800607a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800607c:	4a0c      	ldr	r2, [pc, #48]	; (80060b0 <pxPortInitialiseStack+0x64>)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	3b14      	subs	r3, #20
 8006086:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	3b04      	subs	r3, #4
 8006092:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f06f 0202 	mvn.w	r2, #2
 800609a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	3b20      	subs	r3, #32
 80060a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80060a2:	68fb      	ldr	r3, [r7, #12]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	080060b5 	.word	0x080060b5

080060b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <prvTaskExitError+0x54>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d00a      	beq.n	80060de <prvTaskExitError+0x2a>
        __asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	60fb      	str	r3, [r7, #12]
    }
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <prvTaskExitError+0x28>
        __asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60bb      	str	r3, [r7, #8]
    }
 80060f0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80060f2:	bf00      	nop
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0fc      	beq.n	80060f4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	20000014 	.word	0x20000014
 800610c:	00000000 	.word	0x00000000

08006110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006110:	4b07      	ldr	r3, [pc, #28]	; (8006130 <pxCurrentTCBConst2>)
 8006112:	6819      	ldr	r1, [r3, #0]
 8006114:	6808      	ldr	r0, [r1, #0]
 8006116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611a:	f380 8809 	msr	PSP, r0
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f380 8811 	msr	BASEPRI, r0
 800612a:	4770      	bx	lr
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst2>:
 8006130:	20000038 	.word	0x20000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006138:	4808      	ldr	r0, [pc, #32]	; (800615c <prvPortStartFirstTask+0x24>)
 800613a:	6800      	ldr	r0, [r0, #0]
 800613c:	6800      	ldr	r0, [r0, #0]
 800613e:	f380 8808 	msr	MSP, r0
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f380 8814 	msr	CONTROL, r0
 800614a:	b662      	cpsie	i
 800614c:	b661      	cpsie	f
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	df00      	svc	0
 8006158:	bf00      	nop
 800615a:	0000      	.short	0x0000
 800615c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop

08006164 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800616a:	4b46      	ldr	r3, [pc, #280]	; (8006284 <xPortStartScheduler+0x120>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a46      	ldr	r2, [pc, #280]	; (8006288 <xPortStartScheduler+0x124>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10a      	bne.n	800618a <xPortStartScheduler+0x26>
        __asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	613b      	str	r3, [r7, #16]
    }
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800618a:	4b3e      	ldr	r3, [pc, #248]	; (8006284 <xPortStartScheduler+0x120>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3f      	ldr	r2, [pc, #252]	; (800628c <xPortStartScheduler+0x128>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10a      	bne.n	80061aa <xPortStartScheduler+0x46>
        __asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60fb      	str	r3, [r7, #12]
    }
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061aa:	4b39      	ldr	r3, [pc, #228]	; (8006290 <xPortStartScheduler+0x12c>)
 80061ac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	22ff      	movs	r2, #255	; 0xff
 80061ba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	4b31      	ldr	r3, [pc, #196]	; (8006294 <xPortStartScheduler+0x130>)
 80061d0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061d2:	4b31      	ldr	r3, [pc, #196]	; (8006298 <xPortStartScheduler+0x134>)
 80061d4:	2207      	movs	r2, #7
 80061d6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061d8:	e009      	b.n	80061ee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80061da:	4b2f      	ldr	r3, [pc, #188]	; (8006298 <xPortStartScheduler+0x134>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3b01      	subs	r3, #1
 80061e0:	4a2d      	ldr	r2, [pc, #180]	; (8006298 <xPortStartScheduler+0x134>)
 80061e2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ee:	78fb      	ldrb	r3, [r7, #3]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b80      	cmp	r3, #128	; 0x80
 80061f8:	d0ef      	beq.n	80061da <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061fa:	4b27      	ldr	r3, [pc, #156]	; (8006298 <xPortStartScheduler+0x134>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1c3 0307 	rsb	r3, r3, #7
 8006202:	2b04      	cmp	r3, #4
 8006204:	d00a      	beq.n	800621c <xPortStartScheduler+0xb8>
        __asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
    }
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800621c:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <xPortStartScheduler+0x134>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	4a1d      	ldr	r2, [pc, #116]	; (8006298 <xPortStartScheduler+0x134>)
 8006224:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006226:	4b1c      	ldr	r3, [pc, #112]	; (8006298 <xPortStartScheduler+0x134>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800622e:	4a1a      	ldr	r2, [pc, #104]	; (8006298 <xPortStartScheduler+0x134>)
 8006230:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	b2da      	uxtb	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800623a:	4b18      	ldr	r3, [pc, #96]	; (800629c <xPortStartScheduler+0x138>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a17      	ldr	r2, [pc, #92]	; (800629c <xPortStartScheduler+0x138>)
 8006240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006244:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006246:	4b15      	ldr	r3, [pc, #84]	; (800629c <xPortStartScheduler+0x138>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a14      	ldr	r2, [pc, #80]	; (800629c <xPortStartScheduler+0x138>)
 800624c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006250:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006252:	f000 f8e3 	bl	800641c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006256:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <xPortStartScheduler+0x13c>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800625c:	f000 f902 	bl	8006464 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006260:	4b10      	ldr	r3, [pc, #64]	; (80062a4 <xPortStartScheduler+0x140>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <xPortStartScheduler+0x140>)
 8006266:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800626a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800626c:	f7ff ff64 	bl	8006138 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006270:	f7fe fd5a 	bl	8004d28 <vTaskSwitchContext>
    prvTaskExitError();
 8006274:	f7ff ff1e 	bl	80060b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	e000ed00 	.word	0xe000ed00
 8006288:	410fc271 	.word	0x410fc271
 800628c:	410fc270 	.word	0x410fc270
 8006290:	e000e400 	.word	0xe000e400
 8006294:	20000178 	.word	0x20000178
 8006298:	2000017c 	.word	0x2000017c
 800629c:	e000ed20 	.word	0xe000ed20
 80062a0:	20000014 	.word	0x20000014
 80062a4:	e000ef34 	.word	0xe000ef34

080062a8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
        __asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
    }
 80062c0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80062c2:	4b0f      	ldr	r3, [pc, #60]	; (8006300 <vPortEnterCritical+0x58>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3301      	adds	r3, #1
 80062c8:	4a0d      	ldr	r2, [pc, #52]	; (8006300 <vPortEnterCritical+0x58>)
 80062ca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80062cc:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <vPortEnterCritical+0x58>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d10f      	bne.n	80062f4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d4:	4b0b      	ldr	r3, [pc, #44]	; (8006304 <vPortEnterCritical+0x5c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <vPortEnterCritical+0x4c>
        __asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	603b      	str	r3, [r7, #0]
    }
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <vPortEnterCritical+0x4a>
    }
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20000014 	.word	0x20000014
 8006304:	e000ed04 	.word	0xe000ed04

08006308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <vPortExitCritical+0x50>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <vPortExitCritical+0x24>
        __asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	607b      	str	r3, [r7, #4]
    }
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <vPortExitCritical+0x50>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3b01      	subs	r3, #1
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <vPortExitCritical+0x50>)
 8006334:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006336:	4b08      	ldr	r3, [pc, #32]	; (8006358 <vPortExitCritical+0x50>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d105      	bne.n	800634a <vPortExitCritical+0x42>
 800633e:	2300      	movs	r3, #0
 8006340:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	f383 8811 	msr	BASEPRI, r3
    }
 8006348:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	20000014 	.word	0x20000014
 800635c:	00000000 	.word	0x00000000

08006360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006360:	f3ef 8009 	mrs	r0, PSP
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <pxCurrentTCBConst>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	f01e 0f10 	tst.w	lr, #16
 8006370:	bf08      	it	eq
 8006372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	6010      	str	r0, [r2, #0]
 800637c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006384:	f380 8811 	msr	BASEPRI, r0
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f7fe fcca 	bl	8004d28 <vTaskSwitchContext>
 8006394:	f04f 0000 	mov.w	r0, #0
 8006398:	f380 8811 	msr	BASEPRI, r0
 800639c:	bc09      	pop	{r0, r3}
 800639e:	6819      	ldr	r1, [r3, #0]
 80063a0:	6808      	ldr	r0, [r1, #0]
 80063a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a6:	f01e 0f10 	tst.w	lr, #16
 80063aa:	bf08      	it	eq
 80063ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063b0:	f380 8809 	msr	PSP, r0
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	f3af 8000 	nop.w

080063c0 <pxCurrentTCBConst>:
 80063c0:	20000038 	.word	0x20000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
        __asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
    }
 80063e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80063e2:	f001 fb25 	bl	8007a30 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80063e6:	f7fe fbe3 	bl	8004bb0 <xTaskIncrementTick>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80063f0:	f001 fb7c 	bl	8007aec <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063f4:	4b08      	ldr	r3, [pc, #32]	; (8006418 <SysTick_Handler+0x50>)
 80063f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	e001      	b.n	8006402 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80063fe:	f001 fb59 	bl	8007ab4 <SEGGER_SYSVIEW_RecordExitISR>
 8006402:	2300      	movs	r3, #0
 8006404:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f383 8811 	msr	BASEPRI, r3
    }
 800640c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0b      	ldr	r3, [pc, #44]	; (8006454 <vPortSetupTimerInterrupt+0x38>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	; (800645c <vPortSetupTimerInterrupt+0x40>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a09      	ldr	r2, [pc, #36]	; (8006460 <vPortSetupTimerInterrupt+0x44>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b04      	ldr	r3, [pc, #16]	; (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010
 8006454:	e000e018 	.word	0xe000e018
 8006458:	20000000 	.word	0x20000000
 800645c:	10624dd3 	.word	0x10624dd3
 8006460:	e000e014 	.word	0xe000e014

08006464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006474 <vPortEnableVFP+0x10>
 8006468:	6801      	ldr	r1, [r0, #0]
 800646a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800646e:	6001      	str	r1, [r0, #0]
 8006470:	4770      	bx	lr
 8006472:	0000      	.short	0x0000
 8006474:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006478:	bf00      	nop
 800647a:	bf00      	nop

0800647c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006482:	f3ef 8305 	mrs	r3, IPSR
 8006486:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2b0f      	cmp	r3, #15
 800648c:	d914      	bls.n	80064b8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800648e:	4a17      	ldr	r2, [pc, #92]	; (80064ec <vPortValidateInterruptPriority+0x70>)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006498:	4b15      	ldr	r3, [pc, #84]	; (80064f0 <vPortValidateInterruptPriority+0x74>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	7afa      	ldrb	r2, [r7, #11]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d20a      	bcs.n	80064b8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	607b      	str	r3, [r7, #4]
    }
 80064b4:	bf00      	nop
 80064b6:	e7fe      	b.n	80064b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b8:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <vPortValidateInterruptPriority+0x78>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064c0:	4b0d      	ldr	r3, [pc, #52]	; (80064f8 <vPortValidateInterruptPriority+0x7c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d90a      	bls.n	80064de <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80064c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064cc:	f383 8811 	msr	BASEPRI, r3
 80064d0:	f3bf 8f6f 	isb	sy
 80064d4:	f3bf 8f4f 	dsb	sy
 80064d8:	603b      	str	r3, [r7, #0]
    }
 80064da:	bf00      	nop
 80064dc:	e7fe      	b.n	80064dc <vPortValidateInterruptPriority+0x60>
    }
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000e3f0 	.word	0xe000e3f0
 80064f0:	20000178 	.word	0x20000178
 80064f4:	e000ed0c 	.word	0xe000ed0c
 80064f8:	2000017c 	.word	0x2000017c

080064fc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	; 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006508:	f7fe fa94 	bl	8004a34 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800650c:	4b65      	ldr	r3, [pc, #404]	; (80066a4 <pvPortMalloc+0x1a8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006514:	f000 f934 	bl	8006780 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006518:	4b63      	ldr	r3, [pc, #396]	; (80066a8 <pvPortMalloc+0x1ac>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 80a7 	bne.w	8006674 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d02d      	beq.n	8006588 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800652c:	2208      	movs	r2, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d227      	bcs.n	8006588 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006538:	2208      	movs	r2, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	2b00      	cmp	r3, #0
 8006548:	d021      	beq.n	800658e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	3308      	adds	r3, #8
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	429a      	cmp	r2, r3
 8006556:	d214      	bcs.n	8006582 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	3308      	adds	r3, #8
 8006560:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <pvPortMalloc+0x92>
        __asm volatile
 800656c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006570:	f383 8811 	msr	BASEPRI, r3
 8006574:	f3bf 8f6f 	isb	sy
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	617b      	str	r3, [r7, #20]
    }
 800657e:	bf00      	nop
 8006580:	e7fe      	b.n	8006580 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006586:	e002      	b.n	800658e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006588:	2300      	movs	r3, #0
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	e000      	b.n	8006590 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800658e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d06e      	beq.n	8006674 <pvPortMalloc+0x178>
 8006596:	4b45      	ldr	r3, [pc, #276]	; (80066ac <pvPortMalloc+0x1b0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	429a      	cmp	r2, r3
 800659e:	d869      	bhi.n	8006674 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80065a0:	4b43      	ldr	r3, [pc, #268]	; (80066b0 <pvPortMalloc+0x1b4>)
 80065a2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80065a4:	4b42      	ldr	r3, [pc, #264]	; (80066b0 <pvPortMalloc+0x1b4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065aa:	e004      	b.n	80065b6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d903      	bls.n	80065c8 <pvPortMalloc+0xcc>
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1f1      	bne.n	80065ac <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80065c8:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <pvPortMalloc+0x1a8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d050      	beq.n	8006674 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2208      	movs	r2, #8
 80065d8:	4413      	add	r3, r2
 80065da:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	1ad2      	subs	r2, r2, r3
 80065ec:	2308      	movs	r3, #8
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d91f      	bls.n	8006634 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <pvPortMalloc+0x120>
        __asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	613b      	str	r3, [r7, #16]
    }
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800662e:	69b8      	ldr	r0, [r7, #24]
 8006630:	f000 f908 	bl	8006844 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006634:	4b1d      	ldr	r3, [pc, #116]	; (80066ac <pvPortMalloc+0x1b0>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <pvPortMalloc+0x1b0>)
 8006640:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006642:	4b1a      	ldr	r3, [pc, #104]	; (80066ac <pvPortMalloc+0x1b0>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b1b      	ldr	r3, [pc, #108]	; (80066b4 <pvPortMalloc+0x1b8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	d203      	bcs.n	8006656 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800664e:	4b17      	ldr	r3, [pc, #92]	; (80066ac <pvPortMalloc+0x1b0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a18      	ldr	r2, [pc, #96]	; (80066b4 <pvPortMalloc+0x1b8>)
 8006654:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <pvPortMalloc+0x1ac>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	431a      	orrs	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <pvPortMalloc+0x1bc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3301      	adds	r3, #1
 8006670:	4a11      	ldr	r2, [pc, #68]	; (80066b8 <pvPortMalloc+0x1bc>)
 8006672:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006674:	f7fe f9ec 	bl	8004a50 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <pvPortMalloc+0x19c>
        __asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	60fb      	str	r3, [r7, #12]
    }
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <pvPortMalloc+0x19a>
    return pvReturn;
 8006698:	69fb      	ldr	r3, [r7, #28]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20012d88 	.word	0x20012d88
 80066a8:	20012d9c 	.word	0x20012d9c
 80066ac:	20012d8c 	.word	0x20012d8c
 80066b0:	20012d80 	.word	0x20012d80
 80066b4:	20012d90 	.word	0x20012d90
 80066b8:	20012d94 	.word	0x20012d94

080066bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04d      	beq.n	800676a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80066ce:	2308      	movs	r3, #8
 80066d0:	425b      	negs	r3, r3
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <vPortFree+0xb8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4013      	ands	r3, r2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <vPortFree+0x44>
        __asm volatile
 80066ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ee:	f383 8811 	msr	BASEPRI, r3
 80066f2:	f3bf 8f6f 	isb	sy
 80066f6:	f3bf 8f4f 	dsb	sy
 80066fa:	60fb      	str	r3, [r7, #12]
    }
 80066fc:	bf00      	nop
 80066fe:	e7fe      	b.n	80066fe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <vPortFree+0x62>
        __asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	60bb      	str	r3, [r7, #8]
    }
 800671a:	bf00      	nop
 800671c:	e7fe      	b.n	800671c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	4b14      	ldr	r3, [pc, #80]	; (8006774 <vPortFree+0xb8>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4013      	ands	r3, r2
 8006728:	2b00      	cmp	r3, #0
 800672a:	d01e      	beq.n	800676a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11a      	bne.n	800676a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	4b0e      	ldr	r3, [pc, #56]	; (8006774 <vPortFree+0xb8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	43db      	mvns	r3, r3
 800673e:	401a      	ands	r2, r3
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006744:	f7fe f976 	bl	8004a34 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <vPortFree+0xbc>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4413      	add	r3, r2
 8006752:	4a09      	ldr	r2, [pc, #36]	; (8006778 <vPortFree+0xbc>)
 8006754:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006756:	6938      	ldr	r0, [r7, #16]
 8006758:	f000 f874 	bl	8006844 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800675c:	4b07      	ldr	r3, [pc, #28]	; (800677c <vPortFree+0xc0>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	4a06      	ldr	r2, [pc, #24]	; (800677c <vPortFree+0xc0>)
 8006764:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006766:	f7fe f973 	bl	8004a50 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800676a:	bf00      	nop
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20012d9c 	.word	0x20012d9c
 8006778:	20012d8c 	.word	0x20012d8c
 800677c:	20012d98 	.word	0x20012d98

08006780 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006786:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800678a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <prvHeapInit+0xac>)
 800678e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00c      	beq.n	80067b4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3307      	adds	r3, #7
 800679e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f023 0307 	bic.w	r3, r3, #7
 80067a6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	4a1f      	ldr	r2, [pc, #124]	; (800682c <prvHeapInit+0xac>)
 80067b0:	4413      	add	r3, r2
 80067b2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067b8:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <prvHeapInit+0xb0>)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80067be:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <prvHeapInit+0xb0>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	4413      	add	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80067cc:	2208      	movs	r2, #8
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a15      	ldr	r2, [pc, #84]	; (8006834 <prvHeapInit+0xb4>)
 80067e0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80067e2:	4b14      	ldr	r3, [pc, #80]	; (8006834 <prvHeapInit+0xb4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2200      	movs	r2, #0
 80067e8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <prvHeapInit+0xb4>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	1ad2      	subs	r2, r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006800:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <prvHeapInit+0xb4>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4a0a      	ldr	r2, [pc, #40]	; (8006838 <prvHeapInit+0xb8>)
 800680e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	4a09      	ldr	r2, [pc, #36]	; (800683c <prvHeapInit+0xbc>)
 8006816:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006818:	4b09      	ldr	r3, [pc, #36]	; (8006840 <prvHeapInit+0xc0>)
 800681a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800681e:	601a      	str	r2, [r3, #0]
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	20000180 	.word	0x20000180
 8006830:	20012d80 	.word	0x20012d80
 8006834:	20012d88 	.word	0x20012d88
 8006838:	20012d90 	.word	0x20012d90
 800683c:	20012d8c 	.word	0x20012d8c
 8006840:	20012d9c 	.word	0x20012d9c

08006844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800684c:	4b28      	ldr	r3, [pc, #160]	; (80068f0 <prvInsertBlockIntoFreeList+0xac>)
 800684e:	60fb      	str	r3, [r7, #12]
 8006850:	e002      	b.n	8006858 <prvInsertBlockIntoFreeList+0x14>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	429a      	cmp	r2, r3
 8006860:	d8f7      	bhi.n	8006852 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	4413      	add	r3, r2
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d108      	bne.n	8006886 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	441a      	add	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	441a      	add	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d118      	bne.n	80068cc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <prvInsertBlockIntoFreeList+0xb0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d00d      	beq.n	80068c2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	441a      	add	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e008      	b.n	80068d4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068c2:	4b0c      	ldr	r3, [pc, #48]	; (80068f4 <prvInsertBlockIntoFreeList+0xb0>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e003      	b.n	80068d4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d002      	beq.n	80068e2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	20012d80 	.word	0x20012d80
 80068f4:	20012d88 	.word	0x20012d88

080068f8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006906:	2205      	movs	r2, #5
 8006908:	492b      	ldr	r1, [pc, #172]	; (80069b8 <SYSVIEW_AddTask+0xc0>)
 800690a:	68b8      	ldr	r0, [r7, #8]
 800690c:	f001 fbb8 	bl	8008080 <memcmp>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d04b      	beq.n	80069ae <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006916:	4b29      	ldr	r3, [pc, #164]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	2b07      	cmp	r3, #7
 800691c:	d903      	bls.n	8006926 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800691e:	4828      	ldr	r0, [pc, #160]	; (80069c0 <SYSVIEW_AddTask+0xc8>)
 8006920:	f001 fb2e 	bl	8007f80 <SEGGER_SYSVIEW_Warn>
    return;
 8006924:	e044      	b.n	80069b0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006926:	4b25      	ldr	r3, [pc, #148]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4926      	ldr	r1, [pc, #152]	; (80069c4 <SYSVIEW_AddTask+0xcc>)
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800693a:	4b20      	ldr	r3, [pc, #128]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	4921      	ldr	r1, [pc, #132]	; (80069c4 <SYSVIEW_AddTask+0xcc>)
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	3304      	adds	r3, #4
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006950:	4b1a      	ldr	r3, [pc, #104]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	491b      	ldr	r1, [pc, #108]	; (80069c4 <SYSVIEW_AddTask+0xcc>)
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	3308      	adds	r3, #8
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006966:	4b15      	ldr	r3, [pc, #84]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4916      	ldr	r1, [pc, #88]	; (80069c4 <SYSVIEW_AddTask+0xcc>)
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	330c      	adds	r3, #12
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800697c:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	4910      	ldr	r1, [pc, #64]	; (80069c4 <SYSVIEW_AddTask+0xcc>)
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	3310      	adds	r3, #16
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a08      	ldr	r2, [pc, #32]	; (80069bc <SYSVIEW_AddTask+0xc4>)
 800699a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 f80e 	bl	80069c8 <SYSVIEW_SendTaskInfo>
 80069ac:	e000      	b.n	80069b0 <SYSVIEW_AddTask+0xb8>
    return;
 80069ae:	bf00      	nop

}
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	0800847c 	.word	0x0800847c
 80069bc:	20012e40 	.word	0x20012e40
 80069c0:	08008484 	.word	0x08008484
 80069c4:	20012da0 	.word	0x20012da0

080069c8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80069d6:	f107 0314 	add.w	r3, r7, #20
 80069da:	2214      	movs	r2, #20
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fb6a 	bl	80080b8 <memset>
  TaskInfo.TaskID     = TaskID;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 feed 	bl	80077dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006a02:	bf00      	nop
 8006a04:	3728      	adds	r7, #40	; 0x28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8006a12:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <_DoInit+0x98>)
 8006a14:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2203      	movs	r2, #3
 8006a1a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <_DoInit+0x9c>)
 8006a26:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a20      	ldr	r2, [pc, #128]	; (8006aac <_DoInit+0xa0>)
 8006a2c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a34:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a17      	ldr	r2, [pc, #92]	; (8006aa8 <_DoInit+0x9c>)
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a17      	ldr	r2, [pc, #92]	; (8006ab0 <_DoInit+0xa4>)
 8006a52:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2210      	movs	r2, #16
 8006a58:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3307      	adds	r3, #7
 8006a70:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <_DoInit+0xa8>)
 8006a72:	6810      	ldr	r0, [r2, #0]
 8006a74:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006a76:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a0e      	ldr	r2, [pc, #56]	; (8006ab8 <_DoInit+0xac>)
 8006a7e:	6810      	ldr	r0, [r2, #0]
 8006a80:	6018      	str	r0, [r3, #0]
 8006a82:	8891      	ldrh	r1, [r2, #4]
 8006a84:	7992      	ldrb	r2, [r2, #6]
 8006a86:	8099      	strh	r1, [r3, #4]
 8006a88:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006a8a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8006a94:	f3bf 8f5f 	dmb	sy
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	200134cc 	.word	0x200134cc
 8006aa8:	080084d4 	.word	0x080084d4
 8006aac:	20012e44 	.word	0x20012e44
 8006ab0:	20013244 	.word	0x20013244
 8006ab4:	080084e0 	.word	0x080084e0
 8006ab8:	080084e4 	.word	0x080084e4

08006abc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	; 0x30
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8006ac8:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006aca:	623b      	str	r3, [r7, #32]
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <SEGGER_RTT_ReadNoLock+0x1e>
 8006ad6:	f7ff ff99 	bl	8006a0c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	3360      	adds	r3, #96	; 0x60
 8006ae6:	4a37      	ldr	r2, [pc, #220]	; (8006bc4 <SEGGER_RTT_ReadNoLock+0x108>)
 8006ae8:	4413      	add	r3, r2
 8006aea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8006b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d92b      	bls.n	8006b60 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	689a      	ldr	r2, [r3, #8]
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	bf28      	it	cs
 8006b1a:	4613      	movcs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b24:	4413      	add	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	6939      	ldr	r1, [r7, #16]
 8006b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b2e:	f001 fab5 	bl	800809c <memcpy>
    NumBytesRead += NumBytesRem;
 8006b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	4413      	add	r3, r2
 8006b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	4413      	add	r3, r2
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4413      	add	r3, r2
 8006b50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d101      	bne.n	8006b60 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	bf28      	it	cs
 8006b70:	4613      	movcs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d019      	beq.n	8006bae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	4413      	add	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	6939      	ldr	r1, [r7, #16]
 8006b88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b8a:	f001 fa87 	bl	800809c <memcpy>
    NumBytesRead += NumBytesRem;
 8006b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8006b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8006ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4413      	add	r3, r2
 8006bac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bb8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3730      	adds	r7, #48	; 0x30
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200134cc 	.word	0x200134cc

08006bc8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00f      	beq.n	8006bfe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8006bde:	e002      	b.n	8006be6 <_EncodeStr+0x1e>
      Len++;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	3301      	adds	r3, #1
 8006be4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4413      	add	r3, r2
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f6      	bne.n	8006be0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d901      	bls.n	8006bfe <_EncodeStr+0x36>
      Len = Limit;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2bfe      	cmp	r3, #254	; 0xfe
 8006c02:	d806      	bhi.n	8006c12 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	60fa      	str	r2, [r7, #12]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e011      	b.n	8006c36 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	60fa      	str	r2, [r7, #12]
 8006c18:	22ff      	movs	r2, #255	; 0xff
 8006c1a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	60fa      	str	r2, [r7, #12]
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	0a19      	lsrs	r1, r3, #8
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	60fa      	str	r2, [r7, #12]
 8006c32:	b2ca      	uxtb	r2, r1
 8006c34:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006c3a:	e00a      	b.n	8006c52 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	1c53      	adds	r3, r2, #1
 8006c40:	60bb      	str	r3, [r7, #8]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	1c59      	adds	r1, r3, #1
 8006c46:	60f9      	str	r1, [r7, #12]
 8006c48:	7812      	ldrb	r2, [r2, #0]
 8006c4a:	701a      	strb	r2, [r3, #0]
    n++;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d3f0      	bcc.n	8006c3c <_EncodeStr+0x74>
  }
  return pPayload;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	371c      	adds	r7, #28
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006c86:	4b36      	ldr	r3, [pc, #216]	; (8006d60 <_HandleIncomingPacket+0xe0>)
 8006c88:	7e1b      	ldrb	r3, [r3, #24]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	1cfb      	adds	r3, r7, #3
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4619      	mov	r1, r3
 8006c92:	f7ff ff13 	bl	8006abc <SEGGER_RTT_ReadNoLock>
 8006c96:	4603      	mov	r3, r0
 8006c98:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dd54      	ble.n	8006d4a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8006ca0:	78fb      	ldrb	r3, [r7, #3]
 8006ca2:	2b80      	cmp	r3, #128	; 0x80
 8006ca4:	d032      	beq.n	8006d0c <_HandleIncomingPacket+0x8c>
 8006ca6:	2b80      	cmp	r3, #128	; 0x80
 8006ca8:	dc42      	bgt.n	8006d30 <_HandleIncomingPacket+0xb0>
 8006caa:	2b07      	cmp	r3, #7
 8006cac:	dc16      	bgt.n	8006cdc <_HandleIncomingPacket+0x5c>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd3e      	ble.n	8006d30 <_HandleIncomingPacket+0xb0>
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2b06      	cmp	r3, #6
 8006cb6:	d83b      	bhi.n	8006d30 <_HandleIncomingPacket+0xb0>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <_HandleIncomingPacket+0x40>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006ce3 	.word	0x08006ce3
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cef 	.word	0x08006cef
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cfb 	.word	0x08006cfb
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	08006d07 	.word	0x08006d07
 8006cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cde:	d036      	beq.n	8006d4e <_HandleIncomingPacket+0xce>
 8006ce0:	e026      	b.n	8006d30 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8006ce2:	f000 fc01 	bl	80074e8 <SEGGER_SYSVIEW_Start>
      break;
 8006ce6:	e037      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8006ce8:	f000 fcb8 	bl	800765c <SEGGER_SYSVIEW_Stop>
      break;
 8006cec:	e034      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8006cee:	f000 fe6d 	bl	80079cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006cf2:	e031      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006cf4:	f000 fe56 	bl	80079a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006cf8:	e02e      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8006cfa:	f000 fcd5 	bl	80076a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8006cfe:	e02b      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006d00:	f001 f900 	bl	8007f04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006d04:	e028      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006d06:	f001 f8df 	bl	8007ec8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8006d0a:	e025      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <_HandleIncomingPacket+0xe0>)
 8006d0e:	7e1b      	ldrb	r3, [r3, #24]
 8006d10:	4618      	mov	r0, r3
 8006d12:	1cfb      	adds	r3, r7, #3
 8006d14:	2201      	movs	r2, #1
 8006d16:	4619      	mov	r1, r3
 8006d18:	f7ff fed0 	bl	8006abc <SEGGER_RTT_ReadNoLock>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dd15      	ble.n	8006d52 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f001 f84d 	bl	8007dc8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8006d2e:	e010      	b.n	8006d52 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da0e      	bge.n	8006d56 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006d38:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <_HandleIncomingPacket+0xe0>)
 8006d3a:	7e1b      	ldrb	r3, [r3, #24]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	1cfb      	adds	r3, r7, #3
 8006d40:	2201      	movs	r2, #1
 8006d42:	4619      	mov	r1, r3
 8006d44:	f7ff feba 	bl	8006abc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006d48:	e005      	b.n	8006d56 <_HandleIncomingPacket+0xd6>
    }
  }
 8006d4a:	bf00      	nop
 8006d4c:	e004      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
      break;
 8006d4e:	bf00      	nop
 8006d50:	e002      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
      break;
 8006d52:	bf00      	nop
 8006d54:	e000      	b.n	8006d58 <_HandleIncomingPacket+0xd8>
      break;
 8006d56:	bf00      	nop
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20013254 	.word	0x20013254

08006d64 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08c      	sub	sp, #48	; 0x30
 8006d68:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8006d6e:	1d3b      	adds	r3, r7, #4
 8006d70:	3301      	adds	r3, #1
 8006d72:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d78:	4b31      	ldr	r3, [pc, #196]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7e:	e00b      	b.n	8006d98 <_TrySendOverflowPacket+0x34>
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	1c59      	adds	r1, r3, #1
 8006d88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	09db      	lsrs	r3, r3, #7
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d9c:	d8f0      	bhi.n	8006d80 <_TrySendOverflowPacket+0x1c>
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006dae:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <_TrySendOverflowPacket+0xe0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006db4:	4b22      	ldr	r3, [pc, #136]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	623b      	str	r3, [r7, #32]
 8006dc6:	e00b      	b.n	8006de0 <_TrySendOverflowPacket+0x7c>
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	1c59      	adds	r1, r3, #1
 8006dd0:	6279      	str	r1, [r7, #36]	; 0x24
 8006dd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	09db      	lsrs	r3, r3, #7
 8006dde:	623b      	str	r3, [r7, #32]
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	2b7f      	cmp	r3, #127	; 0x7f
 8006de4:	d8f0      	bhi.n	8006dc8 <_TrySendOverflowPacket+0x64>
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	1c5a      	adds	r2, r3, #1
 8006dea:	627a      	str	r2, [r7, #36]	; 0x24
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8006df6:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	1d3b      	adds	r3, r7, #4
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	1d3b      	adds	r3, r7, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	f7f9 f9e2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d009      	beq.n	8006e2a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006e16:	4a0a      	ldr	r2, [pc, #40]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006e1c:	4b08      	ldr	r3, [pc, #32]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	b2da      	uxtb	r2, r3
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e004      	b.n	8006e34 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	4a03      	ldr	r2, [pc, #12]	; (8006e40 <_TrySendOverflowPacket+0xdc>)
 8006e32:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006e34:	693b      	ldr	r3, [r7, #16]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3730      	adds	r7, #48	; 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20013254 	.word	0x20013254
 8006e44:	e0001004 	.word	0xe0001004

08006e48 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08a      	sub	sp, #40	; 0x28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006e54:	4b6c      	ldr	r3, [pc, #432]	; (8007008 <_SendPacket+0x1c0>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d010      	beq.n	8006e7e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006e5c:	4b6a      	ldr	r3, [pc, #424]	; (8007008 <_SendPacket+0x1c0>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80a3 	beq.w	8006fac <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006e66:	4b68      	ldr	r3, [pc, #416]	; (8007008 <_SendPacket+0x1c0>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d109      	bne.n	8006e82 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8006e6e:	f7ff ff79 	bl	8006d64 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8006e72:	4b65      	ldr	r3, [pc, #404]	; (8007008 <_SendPacket+0x1c0>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	f040 809a 	bne.w	8006fb0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8006e7c:	e001      	b.n	8006e82 <_SendPacket+0x3a>
    goto Send;
 8006e7e:	bf00      	nop
 8006e80:	e000      	b.n	8006e84 <_SendPacket+0x3c>
Send:
 8006e82:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b1f      	cmp	r3, #31
 8006e88:	d809      	bhi.n	8006e9e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006e8a:	4b5f      	ldr	r3, [pc, #380]	; (8007008 <_SendPacket+0x1c0>)
 8006e8c:	69da      	ldr	r2, [r3, #28]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f040 808b 	bne.w	8006fb4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b17      	cmp	r3, #23
 8006ea2:	d807      	bhi.n	8006eb4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	701a      	strb	r2, [r3, #0]
 8006eb2:	e03d      	b.n	8006f30 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec0:	d912      	bls.n	8006ee8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	09da      	lsrs	r2, r3, #7
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	3a01      	subs	r2, #1
 8006eda:	60fa      	str	r2, [r7, #12]
 8006edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e006      	b.n	8006ef6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8006efa:	d912      	bls.n	8006f22 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	09da      	lsrs	r2, r3, #7
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	3a01      	subs	r2, #1
 8006f14:	60fa      	str	r2, [r7, #12]
 8006f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e006      	b.n	8006f30 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	b2da      	uxtb	r2, r3
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006f30:	4b36      	ldr	r3, [pc, #216]	; (800700c <_SendPacket+0x1c4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006f36:	4b34      	ldr	r3, [pc, #208]	; (8007008 <_SendPacket+0x1c0>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	623b      	str	r3, [r7, #32]
 8006f48:	e00b      	b.n	8006f62 <_SendPacket+0x11a>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	6279      	str	r1, [r7, #36]	; 0x24
 8006f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	09db      	lsrs	r3, r3, #7
 8006f60:	623b      	str	r3, [r7, #32]
 8006f62:	6a3b      	ldr	r3, [r7, #32]
 8006f64:	2b7f      	cmp	r3, #127	; 0x7f
 8006f66:	d8f0      	bhi.n	8006f4a <_SendPacket+0x102>
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	627a      	str	r2, [r7, #36]	; 0x24
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	b2d2      	uxtb	r2, r2
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8006f78:	4b23      	ldr	r3, [pc, #140]	; (8007008 <_SendPacket+0x1c0>)
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	461a      	mov	r2, r3
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	f7f9 f922 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006f96:	4a1c      	ldr	r2, [pc, #112]	; (8007008 <_SendPacket+0x1c0>)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	60d3      	str	r3, [r2, #12]
 8006f9c:	e00b      	b.n	8006fb6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <_SendPacket+0x1c0>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	4b18      	ldr	r3, [pc, #96]	; (8007008 <_SendPacket+0x1c0>)
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e004      	b.n	8006fb6 <_SendPacket+0x16e>
    goto SendDone;
 8006fac:	bf00      	nop
 8006fae:	e002      	b.n	8006fb6 <_SendPacket+0x16e>
      goto SendDone;
 8006fb0:	bf00      	nop
 8006fb2:	e000      	b.n	8006fb6 <_SendPacket+0x16e>
      goto SendDone;
 8006fb4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006fb6:	4b14      	ldr	r3, [pc, #80]	; (8007008 <_SendPacket+0x1c0>)
 8006fb8:	7e1b      	ldrb	r3, [r3, #24]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	4a14      	ldr	r2, [pc, #80]	; (8007010 <_SendPacket+0x1c8>)
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	440b      	add	r3, r1
 8006fc4:	00db      	lsls	r3, r3, #3
 8006fc6:	4413      	add	r3, r2
 8006fc8:	336c      	adds	r3, #108	; 0x6c
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <_SendPacket+0x1c0>)
 8006fce:	7e1b      	ldrb	r3, [r3, #24]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	490f      	ldr	r1, [pc, #60]	; (8007010 <_SendPacket+0x1c8>)
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	4403      	add	r3, r0
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	440b      	add	r3, r1
 8006fde:	3370      	adds	r3, #112	; 0x70
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d00b      	beq.n	8006ffe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006fe6:	4b08      	ldr	r3, [pc, #32]	; (8007008 <_SendPacket+0x1c0>)
 8006fe8:	789b      	ldrb	r3, [r3, #2]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d107      	bne.n	8006ffe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <_SendPacket+0x1c0>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006ff4:	f7ff fe44 	bl	8006c80 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006ff8:	4b03      	ldr	r3, [pc, #12]	; (8007008 <_SendPacket+0x1c0>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006ffe:	bf00      	nop
 8007000:	3728      	adds	r7, #40	; 0x28
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20013254 	.word	0x20013254
 800700c:	e0001004 	.word	0xe0001004
 8007010:	200134cc 	.word	0x200134cc

08007014 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800701c:	f3ef 8311 	mrs	r3, BASEPRI
 8007020:	f04f 0120 	mov.w	r1, #32
 8007024:	f381 8811 	msr	BASEPRI, r1
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	4808      	ldr	r0, [pc, #32]	; (800704c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800702c:	f7ff fe1c 	bl	8006c68 <_PreparePacket>
 8007030:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	68b9      	ldr	r1, [r7, #8]
 8007036:	68b8      	ldr	r0, [r7, #8]
 8007038:	f7ff ff06 	bl	8006e48 <_SendPacket>
  RECORD_END();
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f383 8811 	msr	BASEPRI, r3
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20013284 	.word	0x20013284

08007050 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800705a:	f3ef 8311 	mrs	r3, BASEPRI
 800705e:	f04f 0120 	mov.w	r1, #32
 8007062:	f381 8811 	msr	BASEPRI, r1
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	4816      	ldr	r0, [pc, #88]	; (80070c4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800706a:	f7ff fdfd 	bl	8006c68 <_PreparePacket>
 800706e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	e00b      	b.n	8007096 <SEGGER_SYSVIEW_RecordU32+0x46>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	1c59      	adds	r1, r3, #1
 8007086:	61f9      	str	r1, [r7, #28]
 8007088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800708c:	b2d2      	uxtb	r2, r2
 800708e:	701a      	strb	r2, [r3, #0]
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	09db      	lsrs	r3, r3, #7
 8007094:	61bb      	str	r3, [r7, #24]
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	2b7f      	cmp	r3, #127	; 0x7f
 800709a:	d8f0      	bhi.n	800707e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	61fa      	str	r2, [r7, #28]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	6938      	ldr	r0, [r7, #16]
 80070b2:	f7ff fec9 	bl	8006e48 <_SendPacket>
  RECORD_END();
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f383 8811 	msr	BASEPRI, r3
}
 80070bc:	bf00      	nop
 80070be:	3720      	adds	r7, #32
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20013284 	.word	0x20013284

080070c8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08c      	sub	sp, #48	; 0x30
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80070d4:	f3ef 8311 	mrs	r3, BASEPRI
 80070d8:	f04f 0120 	mov.w	r1, #32
 80070dc:	f381 8811 	msr	BASEPRI, r1
 80070e0:	61fb      	str	r3, [r7, #28]
 80070e2:	4825      	ldr	r0, [pc, #148]	; (8007178 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80070e4:	f7ff fdc0 	bl	8006c68 <_PreparePacket>
 80070e8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f6:	e00b      	b.n	8007110 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	b2da      	uxtb	r2, r3
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	1c59      	adds	r1, r3, #1
 8007100:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007102:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
 800710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710c:	09db      	lsrs	r3, r3, #7
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	2b7f      	cmp	r3, #127	; 0x7f
 8007114:	d8f0      	bhi.n	80070f8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800711c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	e00b      	b.n	8007148 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8007130:	6a3b      	ldr	r3, [r7, #32]
 8007132:	b2da      	uxtb	r2, r3
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	1c59      	adds	r1, r3, #1
 8007138:	6279      	str	r1, [r7, #36]	; 0x24
 800713a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	09db      	lsrs	r3, r3, #7
 8007146:	623b      	str	r3, [r7, #32]
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	2b7f      	cmp	r3, #127	; 0x7f
 800714c:	d8f0      	bhi.n	8007130 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	627a      	str	r2, [r7, #36]	; 0x24
 8007154:	6a3a      	ldr	r2, [r7, #32]
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	6979      	ldr	r1, [r7, #20]
 8007162:	69b8      	ldr	r0, [r7, #24]
 8007164:	f7ff fe70 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	f383 8811 	msr	BASEPRI, r3
}
 800716e:	bf00      	nop
 8007170:	3730      	adds	r7, #48	; 0x30
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20013284 	.word	0x20013284

0800717c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b08e      	sub	sp, #56	; 0x38
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800718a:	f3ef 8311 	mrs	r3, BASEPRI
 800718e:	f04f 0120 	mov.w	r1, #32
 8007192:	f381 8811 	msr	BASEPRI, r1
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	4832      	ldr	r0, [pc, #200]	; (8007264 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800719a:	f7ff fd65 	bl	8006c68 <_PreparePacket>
 800719e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	633b      	str	r3, [r7, #48]	; 0x30
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	6379      	str	r1, [r7, #52]	; 0x34
 80071b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	633b      	str	r3, [r7, #48]	; 0x30
 80071c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80071cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	637a      	str	r2, [r7, #52]	; 0x34
 80071d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80071e4:	e00b      	b.n	80071fe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	1c59      	adds	r1, r3, #1
 80071ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	09db      	lsrs	r3, r3, #7
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80071fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007200:	2b7f      	cmp	r3, #127	; 0x7f
 8007202:	d8f0      	bhi.n	80071e6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800720a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	623b      	str	r3, [r7, #32]
 800721c:	e00b      	b.n	8007236 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	b2da      	uxtb	r2, r3
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	1c59      	adds	r1, r3, #1
 8007226:	6279      	str	r1, [r7, #36]	; 0x24
 8007228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	09db      	lsrs	r3, r3, #7
 8007234:	623b      	str	r3, [r7, #32]
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	2b7f      	cmp	r3, #127	; 0x7f
 800723a:	d8f0      	bhi.n	800721e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	1c5a      	adds	r2, r3, #1
 8007240:	627a      	str	r2, [r7, #36]	; 0x24
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	6979      	ldr	r1, [r7, #20]
 8007250:	69b8      	ldr	r0, [r7, #24]
 8007252:	f7ff fdf9 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	f383 8811 	msr	BASEPRI, r3
}
 800725c:	bf00      	nop
 800725e:	3738      	adds	r7, #56	; 0x38
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20013284 	.word	0x20013284

08007268 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b090      	sub	sp, #64	; 0x40
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007276:	f3ef 8311 	mrs	r3, BASEPRI
 800727a:	f04f 0120 	mov.w	r1, #32
 800727e:	f381 8811 	msr	BASEPRI, r1
 8007282:	61fb      	str	r3, [r7, #28]
 8007284:	4840      	ldr	r0, [pc, #256]	; (8007388 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8007286:	f7ff fcef 	bl	8006c68 <_PreparePacket>
 800728a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	63bb      	str	r3, [r7, #56]	; 0x38
 8007298:	e00b      	b.n	80072b2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	b2da      	uxtb	r2, r3
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	1c59      	adds	r1, r3, #1
 80072a2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80072a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	701a      	strb	r2, [r3, #0]
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	09db      	lsrs	r3, r3, #7
 80072b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	2b7f      	cmp	r3, #127	; 0x7f
 80072b6:	d8f0      	bhi.n	800729a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ba:	1c5a      	adds	r2, r3, #1
 80072bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80072be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c0:	b2d2      	uxtb	r2, r2
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	633b      	str	r3, [r7, #48]	; 0x30
 80072d0:	e00b      	b.n	80072ea <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	1c59      	adds	r1, r3, #1
 80072da:	6379      	str	r1, [r7, #52]	; 0x34
 80072dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072e0:	b2d2      	uxtb	r2, r2
 80072e2:	701a      	strb	r2, [r3, #0]
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	09db      	lsrs	r3, r3, #7
 80072e8:	633b      	str	r3, [r7, #48]	; 0x30
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	2b7f      	cmp	r3, #127	; 0x7f
 80072ee:	d8f0      	bhi.n	80072d2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80072f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f2:	1c5a      	adds	r2, r3, #1
 80072f4:	637a      	str	r2, [r7, #52]	; 0x34
 80072f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
 8007308:	e00b      	b.n	8007322 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	b2da      	uxtb	r2, r3
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	1c59      	adds	r1, r3, #1
 8007312:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007318:	b2d2      	uxtb	r2, r2
 800731a:	701a      	strb	r2, [r3, #0]
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	09db      	lsrs	r3, r3, #7
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	2b7f      	cmp	r3, #127	; 0x7f
 8007326:	d8f0      	bhi.n	800730a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800732e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
 800733c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	e00b      	b.n	800735a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	1c59      	adds	r1, r3, #1
 800734a:	6279      	str	r1, [r7, #36]	; 0x24
 800734c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	09db      	lsrs	r3, r3, #7
 8007358:	623b      	str	r3, [r7, #32]
 800735a:	6a3b      	ldr	r3, [r7, #32]
 800735c:	2b7f      	cmp	r3, #127	; 0x7f
 800735e:	d8f0      	bhi.n	8007342 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	1c5a      	adds	r2, r3, #1
 8007364:	627a      	str	r2, [r7, #36]	; 0x24
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	b2d2      	uxtb	r2, r2
 800736a:	701a      	strb	r2, [r3, #0]
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	6979      	ldr	r1, [r7, #20]
 8007374:	69b8      	ldr	r0, [r7, #24]
 8007376:	f7ff fd67 	bl	8006e48 <_SendPacket>
  RECORD_END();
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f383 8811 	msr	BASEPRI, r3
}
 8007380:	bf00      	nop
 8007382:	3740      	adds	r7, #64	; 0x40
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20013284 	.word	0x20013284

0800738c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b092      	sub	sp, #72	; 0x48
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800739a:	f3ef 8311 	mrs	r3, BASEPRI
 800739e:	f04f 0120 	mov.w	r1, #32
 80073a2:	f381 8811 	msr	BASEPRI, r1
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	484e      	ldr	r0, [pc, #312]	; (80074e4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80073aa:	f7ff fc5d 	bl	8006c68 <_PreparePacket>
 80073ae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	647b      	str	r3, [r7, #68]	; 0x44
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	643b      	str	r3, [r7, #64]	; 0x40
 80073bc:	e00b      	b.n	80073d6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80073be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c4:	1c59      	adds	r1, r3, #1
 80073c6:	6479      	str	r1, [r7, #68]	; 0x44
 80073c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	09db      	lsrs	r3, r3, #7
 80073d4:	643b      	str	r3, [r7, #64]	; 0x40
 80073d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d8:	2b7f      	cmp	r3, #127	; 0x7f
 80073da:	d8f0      	bhi.n	80073be <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80073dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	647a      	str	r2, [r7, #68]	; 0x44
 80073e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073e4:	b2d2      	uxtb	r2, r2
 80073e6:	701a      	strb	r2, [r3, #0]
 80073e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80073f4:	e00b      	b.n	800740e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073fc:	1c59      	adds	r1, r3, #1
 80073fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007400:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	09db      	lsrs	r3, r3, #7
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007410:	2b7f      	cmp	r3, #127	; 0x7f
 8007412:	d8f0      	bhi.n	80073f6 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8007414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800741a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800741c:	b2d2      	uxtb	r2, r2
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007422:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	633b      	str	r3, [r7, #48]	; 0x30
 800742c:	e00b      	b.n	8007446 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	b2da      	uxtb	r2, r3
 8007432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007434:	1c59      	adds	r1, r3, #1
 8007436:	6379      	str	r1, [r7, #52]	; 0x34
 8007438:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800743c:	b2d2      	uxtb	r2, r2
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	09db      	lsrs	r3, r3, #7
 8007444:	633b      	str	r3, [r7, #48]	; 0x30
 8007446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007448:	2b7f      	cmp	r3, #127	; 0x7f
 800744a:	d8f0      	bhi.n	800742e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	637a      	str	r2, [r7, #52]	; 0x34
 8007452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007454:	b2d2      	uxtb	r2, r2
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007462:	62bb      	str	r3, [r7, #40]	; 0x28
 8007464:	e00b      	b.n	800747e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	b2da      	uxtb	r2, r3
 800746a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007470:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007474:	b2d2      	uxtb	r2, r2
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	09db      	lsrs	r3, r3, #7
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	2b7f      	cmp	r3, #127	; 0x7f
 8007482:	d8f0      	bhi.n	8007466 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	62fa      	str	r2, [r7, #44]	; 0x2c
 800748a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800749a:	623b      	str	r3, [r7, #32]
 800749c:	e00b      	b.n	80074b6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800749e:	6a3b      	ldr	r3, [r7, #32]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	1c59      	adds	r1, r3, #1
 80074a6:	6279      	str	r1, [r7, #36]	; 0x24
 80074a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074ac:	b2d2      	uxtb	r2, r2
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	09db      	lsrs	r3, r3, #7
 80074b4:	623b      	str	r3, [r7, #32]
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	2b7f      	cmp	r3, #127	; 0x7f
 80074ba:	d8f0      	bhi.n	800749e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	627a      	str	r2, [r7, #36]	; 0x24
 80074c2:	6a3a      	ldr	r2, [r7, #32]
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	6979      	ldr	r1, [r7, #20]
 80074d0:	69b8      	ldr	r0, [r7, #24]
 80074d2:	f7ff fcb9 	bl	8006e48 <_SendPacket>
  RECORD_END();
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	f383 8811 	msr	BASEPRI, r3
}
 80074dc:	bf00      	nop
 80074de:	3748      	adds	r7, #72	; 0x48
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20013284 	.word	0x20013284

080074e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08c      	sub	sp, #48	; 0x30
 80074ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80074ee:	4b58      	ldr	r3, [pc, #352]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 80074f0:	2201      	movs	r2, #1
 80074f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80074f4:	f3ef 8311 	mrs	r3, BASEPRI
 80074f8:	f04f 0120 	mov.w	r1, #32
 80074fc:	f381 8811 	msr	BASEPRI, r1
 8007500:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8007502:	4b53      	ldr	r3, [pc, #332]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 8007504:	785b      	ldrb	r3, [r3, #1]
 8007506:	220a      	movs	r2, #10
 8007508:	4952      	ldr	r1, [pc, #328]	; (8007654 <SEGGER_SYSVIEW_Start+0x16c>)
 800750a:	4618      	mov	r0, r3
 800750c:	f7f8 fe60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8007516:	200a      	movs	r0, #10
 8007518:	f7ff fd7c 	bl	8007014 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800751c:	f3ef 8311 	mrs	r3, BASEPRI
 8007520:	f04f 0120 	mov.w	r1, #32
 8007524:	f381 8811 	msr	BASEPRI, r1
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	484b      	ldr	r0, [pc, #300]	; (8007658 <SEGGER_SYSVIEW_Start+0x170>)
 800752c:	f7ff fb9c 	bl	8006c68 <_PreparePacket>
 8007530:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800753a:	4b45      	ldr	r3, [pc, #276]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007540:	e00b      	b.n	800755a <SEGGER_SYSVIEW_Start+0x72>
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	b2da      	uxtb	r2, r3
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	1c59      	adds	r1, r3, #1
 800754a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800754c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	09db      	lsrs	r3, r3, #7
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	2b7f      	cmp	r3, #127	; 0x7f
 800755e:	d8f0      	bhi.n	8007542 <SEGGER_SYSVIEW_Start+0x5a>
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007568:	b2d2      	uxtb	r2, r2
 800756a:	701a      	strb	r2, [r3, #0]
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	627b      	str	r3, [r7, #36]	; 0x24
 8007574:	4b36      	ldr	r3, [pc, #216]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	623b      	str	r3, [r7, #32]
 800757a:	e00b      	b.n	8007594 <SEGGER_SYSVIEW_Start+0xac>
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	1c59      	adds	r1, r3, #1
 8007584:	6279      	str	r1, [r7, #36]	; 0x24
 8007586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	09db      	lsrs	r3, r3, #7
 8007592:	623b      	str	r3, [r7, #32]
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	2b7f      	cmp	r3, #127	; 0x7f
 8007598:	d8f0      	bhi.n	800757c <SEGGER_SYSVIEW_Start+0x94>
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	627a      	str	r2, [r7, #36]	; 0x24
 80075a0:	6a3a      	ldr	r2, [r7, #32]
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	61fb      	str	r3, [r7, #28]
 80075ae:	4b28      	ldr	r3, [pc, #160]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	e00b      	b.n	80075ce <SEGGER_SYSVIEW_Start+0xe6>
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	b2da      	uxtb	r2, r3
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	1c59      	adds	r1, r3, #1
 80075be:	61f9      	str	r1, [r7, #28]
 80075c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	09db      	lsrs	r3, r3, #7
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b7f      	cmp	r3, #127	; 0x7f
 80075d2:	d8f0      	bhi.n	80075b6 <SEGGER_SYSVIEW_Start+0xce>
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	61fa      	str	r2, [r7, #28]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	2300      	movs	r3, #0
 80075ea:	613b      	str	r3, [r7, #16]
 80075ec:	e00b      	b.n	8007606 <SEGGER_SYSVIEW_Start+0x11e>
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	1c59      	adds	r1, r3, #1
 80075f6:	6179      	str	r1, [r7, #20]
 80075f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	09db      	lsrs	r3, r3, #7
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b7f      	cmp	r3, #127	; 0x7f
 800760a:	d8f0      	bhi.n	80075ee <SEGGER_SYSVIEW_Start+0x106>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	617a      	str	r2, [r7, #20]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800761c:	2218      	movs	r2, #24
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fc11 	bl	8006e48 <_SendPacket>
      RECORD_END();
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800762c:	4b08      	ldr	r3, [pc, #32]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8007634:	4b06      	ldr	r3, [pc, #24]	; (8007650 <SEGGER_SYSVIEW_Start+0x168>)
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800763a:	f000 f9c7 	bl	80079cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800763e:	f000 f9b1 	bl	80079a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8007642:	f000 fc5f 	bl	8007f04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8007646:	bf00      	nop
 8007648:	3730      	adds	r7, #48	; 0x30
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20013254 	.word	0x20013254
 8007654:	08008504 	.word	0x08008504
 8007658:	20013284 	.word	0x20013284

0800765c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007662:	f3ef 8311 	mrs	r3, BASEPRI
 8007666:	f04f 0120 	mov.w	r1, #32
 800766a:	f381 8811 	msr	BASEPRI, r1
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	480b      	ldr	r0, [pc, #44]	; (80076a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8007672:	f7ff faf9 	bl	8006c68 <_PreparePacket>
 8007676:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8007680:	220b      	movs	r2, #11
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6838      	ldr	r0, [r7, #0]
 8007686:	f7ff fbdf 	bl	8006e48 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f383 8811 	msr	BASEPRI, r3
}
 8007696:	bf00      	nop
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20013284 	.word	0x20013284
 80076a4:	20013254 	.word	0x20013254

080076a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	; 0x30
 80076ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80076ae:	f3ef 8311 	mrs	r3, BASEPRI
 80076b2:	f04f 0120 	mov.w	r1, #32
 80076b6:	f381 8811 	msr	BASEPRI, r1
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	4845      	ldr	r0, [pc, #276]	; (80077d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80076be:	f7ff fad3 	bl	8006c68 <_PreparePacket>
 80076c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076cc:	4b42      	ldr	r3, [pc, #264]	; (80077d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d2:	e00b      	b.n	80076ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	1c59      	adds	r1, r3, #1
 80076dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80076de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	09db      	lsrs	r3, r3, #7
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	2b7f      	cmp	r3, #127	; 0x7f
 80076f0:	d8f0      	bhi.n	80076d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
 8007706:	4b34      	ldr	r3, [pc, #208]	; (80077d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	623b      	str	r3, [r7, #32]
 800770c:	e00b      	b.n	8007726 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	b2da      	uxtb	r2, r3
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	1c59      	adds	r1, r3, #1
 8007716:	6279      	str	r1, [r7, #36]	; 0x24
 8007718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800771c:	b2d2      	uxtb	r2, r2
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	09db      	lsrs	r3, r3, #7
 8007724:	623b      	str	r3, [r7, #32]
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	2b7f      	cmp	r3, #127	; 0x7f
 800772a:	d8f0      	bhi.n	800770e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	1c5a      	adds	r2, r3, #1
 8007730:	627a      	str	r2, [r7, #36]	; 0x24
 8007732:	6a3a      	ldr	r2, [r7, #32]
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	61bb      	str	r3, [r7, #24]
 8007746:	e00b      	b.n	8007760 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	b2da      	uxtb	r2, r3
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	1c59      	adds	r1, r3, #1
 8007750:	61f9      	str	r1, [r7, #28]
 8007752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	09db      	lsrs	r3, r3, #7
 800775e:	61bb      	str	r3, [r7, #24]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b7f      	cmp	r3, #127	; 0x7f
 8007764:	d8f0      	bhi.n	8007748 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	61fa      	str	r2, [r7, #28]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	b2d2      	uxtb	r2, r2
 8007770:	701a      	strb	r2, [r3, #0]
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	617b      	str	r3, [r7, #20]
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	e00b      	b.n	8007798 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1c59      	adds	r1, r3, #1
 8007788:	6179      	str	r1, [r7, #20]
 800778a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	09db      	lsrs	r3, r3, #7
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2b7f      	cmp	r3, #127	; 0x7f
 800779c:	d8f0      	bhi.n	8007780 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	617a      	str	r2, [r7, #20]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80077ae:	2218      	movs	r2, #24
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	68b8      	ldr	r0, [r7, #8]
 80077b4:	f7ff fb48 	bl	8006e48 <_SendPacket>
  RECORD_END();
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80077c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80077c6:	4b04      	ldr	r3, [pc, #16]	; (80077d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	4798      	blx	r3
  }
}
 80077cc:	bf00      	nop
 80077ce:	3730      	adds	r7, #48	; 0x30
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20013284 	.word	0x20013284
 80077d8:	20013254 	.word	0x20013254

080077dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b092      	sub	sp, #72	; 0x48
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80077e4:	f3ef 8311 	mrs	r3, BASEPRI
 80077e8:	f04f 0120 	mov.w	r1, #32
 80077ec:	f381 8811 	msr	BASEPRI, r1
 80077f0:	617b      	str	r3, [r7, #20]
 80077f2:	486a      	ldr	r0, [pc, #424]	; (800799c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80077f4:	f7ff fa38 	bl	8006c68 <_PreparePacket>
 80077f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	4b66      	ldr	r3, [pc, #408]	; (80079a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	643b      	str	r3, [r7, #64]	; 0x40
 800780e:	e00b      	b.n	8007828 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007812:	b2da      	uxtb	r2, r3
 8007814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007816:	1c59      	adds	r1, r3, #1
 8007818:	6479      	str	r1, [r7, #68]	; 0x44
 800781a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007824:	09db      	lsrs	r3, r3, #7
 8007826:	643b      	str	r3, [r7, #64]	; 0x40
 8007828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800782a:	2b7f      	cmp	r3, #127	; 0x7f
 800782c:	d8f0      	bhi.n	8007810 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800782e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	647a      	str	r2, [r7, #68]	; 0x44
 8007834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007836:	b2d2      	uxtb	r2, r2
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800783c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	63bb      	str	r3, [r7, #56]	; 0x38
 8007848:	e00b      	b.n	8007862 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800784a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784c:	b2da      	uxtb	r2, r3
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	1c59      	adds	r1, r3, #1
 8007852:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785e:	09db      	lsrs	r3, r3, #7
 8007860:	63bb      	str	r3, [r7, #56]	; 0x38
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	2b7f      	cmp	r3, #127	; 0x7f
 8007866:	d8f0      	bhi.n	800784a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786a:	1c5a      	adds	r2, r3, #1
 800786c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800786e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	701a      	strb	r2, [r3, #0]
 8007874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007876:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	4619      	mov	r1, r3
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff f9a1 	bl	8006bc8 <_EncodeStr>
 8007886:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8007888:	2209      	movs	r2, #9
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	6938      	ldr	r0, [r7, #16]
 800788e:	f7ff fadb 	bl	8006e48 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b40      	ldr	r3, [pc, #256]	; (80079a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	633b      	str	r3, [r7, #48]	; 0x30
 80078a6:	e00b      	b.n	80078c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ae:	1c59      	adds	r1, r3, #1
 80078b0:	6379      	str	r1, [r7, #52]	; 0x34
 80078b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078bc:	09db      	lsrs	r3, r3, #7
 80078be:	633b      	str	r3, [r7, #48]	; 0x30
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2b7f      	cmp	r3, #127	; 0x7f
 80078c4:	d8f0      	bhi.n	80078a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80078c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	637a      	str	r2, [r7, #52]	; 0x34
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	62bb      	str	r3, [r7, #40]	; 0x28
 80078e0:	e00b      	b.n	80078fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	b2da      	uxtb	r2, r3
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	1c59      	adds	r1, r3, #1
 80078ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80078ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	09db      	lsrs	r3, r3, #7
 80078f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fc:	2b7f      	cmp	r3, #127	; 0x7f
 80078fe:	d8f0      	bhi.n	80078e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	623b      	str	r3, [r7, #32]
 800791a:	e00b      	b.n	8007934 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	b2da      	uxtb	r2, r3
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	1c59      	adds	r1, r3, #1
 8007924:	6279      	str	r1, [r7, #36]	; 0x24
 8007926:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	09db      	lsrs	r3, r3, #7
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	2b7f      	cmp	r3, #127	; 0x7f
 8007938:	d8f0      	bhi.n	800791c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	1c5a      	adds	r2, r3, #1
 800793e:	627a      	str	r2, [r7, #36]	; 0x24
 8007940:	6a3a      	ldr	r2, [r7, #32]
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	61fb      	str	r3, [r7, #28]
 800794e:	2300      	movs	r3, #0
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e00b      	b.n	800796c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	1c59      	adds	r1, r3, #1
 800795c:	61f9      	str	r1, [r7, #28]
 800795e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007962:	b2d2      	uxtb	r2, r2
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	09db      	lsrs	r3, r3, #7
 800796a:	61bb      	str	r3, [r7, #24]
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b7f      	cmp	r3, #127	; 0x7f
 8007970:	d8f0      	bhi.n	8007954 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	61fa      	str	r2, [r7, #28]
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007982:	2215      	movs	r2, #21
 8007984:	68f9      	ldr	r1, [r7, #12]
 8007986:	6938      	ldr	r0, [r7, #16]
 8007988:	f7ff fa5e 	bl	8006e48 <_SendPacket>
  RECORD_END();
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f383 8811 	msr	BASEPRI, r3
}
 8007992:	bf00      	nop
 8007994:	3748      	adds	r7, #72	; 0x48
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20013284 	.word	0x20013284
 80079a0:	20013254 	.word	0x20013254

080079a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80079a8:	4b07      	ldr	r3, [pc, #28]	; (80079c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d008      	beq.n	80079c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80079ba:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	4798      	blx	r3
  }
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20013254 	.word	0x20013254

080079cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80079cc:	b590      	push	{r4, r7, lr}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80079d2:	4b15      	ldr	r3, [pc, #84]	; (8007a28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d01a      	beq.n	8007a10 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80079da:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d015      	beq.n	8007a10 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80079e4:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4798      	blx	r3
 80079ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80079f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80079f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079f6:	f04f 0200 	mov.w	r2, #0
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	000a      	movs	r2, r1
 8007a00:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007a02:	4613      	mov	r3, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4621      	mov	r1, r4
 8007a08:	200d      	movs	r0, #13
 8007a0a:	f7ff fb5d 	bl	80070c8 <SEGGER_SYSVIEW_RecordU32x2>
 8007a0e:	e006      	b.n	8007a1e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4619      	mov	r1, r3
 8007a16:	200c      	movs	r0, #12
 8007a18:	f7ff fb1a 	bl	8007050 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	bf00      	nop
 8007a20:	370c      	adds	r7, #12
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd90      	pop	{r4, r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20013254 	.word	0x20013254
 8007a2c:	e0001004 	.word	0xe0001004

08007a30 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007a36:	f3ef 8311 	mrs	r3, BASEPRI
 8007a3a:	f04f 0120 	mov.w	r1, #32
 8007a3e:	f381 8811 	msr	BASEPRI, r1
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	4819      	ldr	r0, [pc, #100]	; (8007aac <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007a46:	f7ff f90f 	bl	8006c68 <_PreparePacket>
 8007a4a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007a50:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a58:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	613b      	str	r3, [r7, #16]
 8007a62:	e00b      	b.n	8007a7c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	b2da      	uxtb	r2, r3
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	1c59      	adds	r1, r3, #1
 8007a6c:	6179      	str	r1, [r7, #20]
 8007a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007a72:	b2d2      	uxtb	r2, r2
 8007a74:	701a      	strb	r2, [r3, #0]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	09db      	lsrs	r3, r3, #7
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8007a80:	d8f0      	bhi.n	8007a64 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	617a      	str	r2, [r7, #20]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	b2d2      	uxtb	r2, r2
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8007a92:	2202      	movs	r2, #2
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	68b8      	ldr	r0, [r7, #8]
 8007a98:	f7ff f9d6 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f383 8811 	msr	BASEPRI, r3
}
 8007aa2:	bf00      	nop
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20013284 	.word	0x20013284
 8007ab0:	e000ed04 	.word	0xe000ed04

08007ab4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007aba:	f3ef 8311 	mrs	r3, BASEPRI
 8007abe:	f04f 0120 	mov.w	r1, #32
 8007ac2:	f381 8811 	msr	BASEPRI, r1
 8007ac6:	607b      	str	r3, [r7, #4]
 8007ac8:	4807      	ldr	r0, [pc, #28]	; (8007ae8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007aca:	f7ff f8cd 	bl	8006c68 <_PreparePacket>
 8007ace:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007ad0:	2203      	movs	r2, #3
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6838      	ldr	r0, [r7, #0]
 8007ad6:	f7ff f9b7 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f383 8811 	msr	BASEPRI, r3
}
 8007ae0:	bf00      	nop
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20013284 	.word	0x20013284

08007aec <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007af2:	f3ef 8311 	mrs	r3, BASEPRI
 8007af6:	f04f 0120 	mov.w	r1, #32
 8007afa:	f381 8811 	msr	BASEPRI, r1
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	4807      	ldr	r0, [pc, #28]	; (8007b20 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007b02:	f7ff f8b1 	bl	8006c68 <_PreparePacket>
 8007b06:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007b08:	2212      	movs	r2, #18
 8007b0a:	6839      	ldr	r1, [r7, #0]
 8007b0c:	6838      	ldr	r0, [r7, #0]
 8007b0e:	f7ff f99b 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f383 8811 	msr	BASEPRI, r3
}
 8007b18:	bf00      	nop
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20013284 	.word	0x20013284

08007b24 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8007b2e:	f04f 0120 	mov.w	r1, #32
 8007b32:	f381 8811 	msr	BASEPRI, r1
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	4807      	ldr	r0, [pc, #28]	; (8007b58 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007b3a:	f7ff f895 	bl	8006c68 <_PreparePacket>
 8007b3e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007b40:	2211      	movs	r2, #17
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	f7ff f97f 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f383 8811 	msr	BASEPRI, r3
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20013284 	.word	0x20013284

08007b5c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007b64:	f3ef 8311 	mrs	r3, BASEPRI
 8007b68:	f04f 0120 	mov.w	r1, #32
 8007b6c:	f381 8811 	msr	BASEPRI, r1
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	4819      	ldr	r0, [pc, #100]	; (8007bd8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007b74:	f7ff f878 	bl	8006c68 <_PreparePacket>
 8007b78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007b7e:	4b17      	ldr	r3, [pc, #92]	; (8007bdc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	61fb      	str	r3, [r7, #28]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e00b      	b.n	8007baa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	1c59      	adds	r1, r3, #1
 8007b9a:	61f9      	str	r1, [r7, #28]
 8007b9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	701a      	strb	r2, [r3, #0]
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	09db      	lsrs	r3, r3, #7
 8007ba8:	61bb      	str	r3, [r7, #24]
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b7f      	cmp	r3, #127	; 0x7f
 8007bae:	d8f0      	bhi.n	8007b92 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	61fa      	str	r2, [r7, #28]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007bc0:	2208      	movs	r2, #8
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	6938      	ldr	r0, [r7, #16]
 8007bc6:	f7ff f93f 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f383 8811 	msr	BASEPRI, r3
}
 8007bd0:	bf00      	nop
 8007bd2:	3720      	adds	r7, #32
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20013284 	.word	0x20013284
 8007bdc:	20013254 	.word	0x20013254

08007be0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007be8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bec:	f04f 0120 	mov.w	r1, #32
 8007bf0:	f381 8811 	msr	BASEPRI, r1
 8007bf4:	617b      	str	r3, [r7, #20]
 8007bf6:	4819      	ldr	r0, [pc, #100]	; (8007c5c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007bf8:	f7ff f836 	bl	8006c68 <_PreparePacket>
 8007bfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007c02:	4b17      	ldr	r3, [pc, #92]	; (8007c60 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	61fb      	str	r3, [r7, #28]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	e00b      	b.n	8007c2e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	61f9      	str	r1, [r7, #28]
 8007c20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c24:	b2d2      	uxtb	r2, r2
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	09db      	lsrs	r3, r3, #7
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	2b7f      	cmp	r3, #127	; 0x7f
 8007c32:	d8f0      	bhi.n	8007c16 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	61fa      	str	r2, [r7, #28]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	b2d2      	uxtb	r2, r2
 8007c3e:	701a      	strb	r2, [r3, #0]
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007c44:	2204      	movs	r2, #4
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	6938      	ldr	r0, [r7, #16]
 8007c4a:	f7ff f8fd 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f383 8811 	msr	BASEPRI, r3
}
 8007c54:	bf00      	nop
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20013284 	.word	0x20013284
 8007c60:	20013254 	.word	0x20013254

08007c64 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8007c70:	f04f 0120 	mov.w	r1, #32
 8007c74:	f381 8811 	msr	BASEPRI, r1
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	4819      	ldr	r0, [pc, #100]	; (8007ce0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007c7c:	f7fe fff4 	bl	8006c68 <_PreparePacket>
 8007c80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007c86:	4b17      	ldr	r3, [pc, #92]	; (8007ce4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	61bb      	str	r3, [r7, #24]
 8007c98:	e00b      	b.n	8007cb2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	b2da      	uxtb	r2, r3
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	1c59      	adds	r1, r3, #1
 8007ca2:	61f9      	str	r1, [r7, #28]
 8007ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	09db      	lsrs	r3, r3, #7
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8007cb6:	d8f0      	bhi.n	8007c9a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	61fa      	str	r2, [r7, #28]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	b2d2      	uxtb	r2, r2
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007cc8:	2206      	movs	r2, #6
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	6938      	ldr	r0, [r7, #16]
 8007cce:	f7ff f8bb 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f383 8811 	msr	BASEPRI, r3
}
 8007cd8:	bf00      	nop
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20013284 	.word	0x20013284
 8007ce4:	20013254 	.word	0x20013254

08007ce8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08a      	sub	sp, #40	; 0x28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8007cf6:	f04f 0120 	mov.w	r1, #32
 8007cfa:	f381 8811 	msr	BASEPRI, r1
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	4827      	ldr	r0, [pc, #156]	; (8007da0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007d02:	f7fe ffb1 	bl	8006c68 <_PreparePacket>
 8007d06:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007d0c:	4b25      	ldr	r3, [pc, #148]	; (8007da4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	623b      	str	r3, [r7, #32]
 8007d1e:	e00b      	b.n	8007d38 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d26:	1c59      	adds	r1, r3, #1
 8007d28:	6279      	str	r1, [r7, #36]	; 0x24
 8007d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d2e:	b2d2      	uxtb	r2, r2
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	09db      	lsrs	r3, r3, #7
 8007d36:	623b      	str	r3, [r7, #32]
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8007d3c:	d8f0      	bhi.n	8007d20 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	627a      	str	r2, [r7, #36]	; 0x24
 8007d44:	6a3a      	ldr	r2, [r7, #32]
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	61fb      	str	r3, [r7, #28]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	e00b      	b.n	8007d70 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	1c59      	adds	r1, r3, #1
 8007d60:	61f9      	str	r1, [r7, #28]
 8007d62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007d66:	b2d2      	uxtb	r2, r2
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	09db      	lsrs	r3, r3, #7
 8007d6e:	61bb      	str	r3, [r7, #24]
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b7f      	cmp	r3, #127	; 0x7f
 8007d74:	d8f0      	bhi.n	8007d58 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	61fa      	str	r2, [r7, #28]
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007d86:	2207      	movs	r2, #7
 8007d88:	68f9      	ldr	r1, [r7, #12]
 8007d8a:	6938      	ldr	r0, [r7, #16]
 8007d8c:	f7ff f85c 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f383 8811 	msr	BASEPRI, r3
}
 8007d96:	bf00      	nop
 8007d98:	3728      	adds	r7, #40	; 0x28
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20013284 	.word	0x20013284
 8007da4:	20013254 	.word	0x20013254

08007da8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	1ad3      	subs	r3, r2, r3
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	20013254 	.word	0x20013254

08007dc8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08c      	sub	sp, #48	; 0x30
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	4603      	mov	r3, r0
 8007dd0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007dd2:	4b3b      	ldr	r3, [pc, #236]	; (8007ec0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d06d      	beq.n	8007eb6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007dda:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007de0:	2300      	movs	r3, #0
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007de4:	e008      	b.n	8007df8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	3301      	adds	r3, #1
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3f2      	bcc.n	8007de6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007e00:	e000      	b.n	8007e04 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007e02:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d055      	beq.n	8007eb6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007e0e:	f04f 0120 	mov.w	r1, #32
 8007e12:	f381 8811 	msr	BASEPRI, r1
 8007e16:	617b      	str	r3, [r7, #20]
 8007e18:	482a      	ldr	r0, [pc, #168]	; (8007ec4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007e1a:	f7fe ff25 	bl	8006c68 <_PreparePacket>
 8007e1e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
 8007e28:	79fb      	ldrb	r3, [r7, #7]
 8007e2a:	623b      	str	r3, [r7, #32]
 8007e2c:	e00b      	b.n	8007e46 <SEGGER_SYSVIEW_SendModule+0x7e>
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1c59      	adds	r1, r3, #1
 8007e36:	6279      	str	r1, [r7, #36]	; 0x24
 8007e38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	6a3b      	ldr	r3, [r7, #32]
 8007e42:	09db      	lsrs	r3, r3, #7
 8007e44:	623b      	str	r3, [r7, #32]
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	2b7f      	cmp	r3, #127	; 0x7f
 8007e4a:	d8f0      	bhi.n	8007e2e <SEGGER_SYSVIEW_SendModule+0x66>
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	627a      	str	r2, [r7, #36]	; 0x24
 8007e52:	6a3a      	ldr	r2, [r7, #32]
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	61fb      	str	r3, [r7, #28]
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	61bb      	str	r3, [r7, #24]
 8007e66:	e00b      	b.n	8007e80 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	1c59      	adds	r1, r3, #1
 8007e70:	61f9      	str	r1, [r7, #28]
 8007e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e76:	b2d2      	uxtb	r2, r2
 8007e78:	701a      	strb	r2, [r3, #0]
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	09db      	lsrs	r3, r3, #7
 8007e7e:	61bb      	str	r3, [r7, #24]
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b7f      	cmp	r3, #127	; 0x7f
 8007e84:	d8f0      	bhi.n	8007e68 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	61fa      	str	r2, [r7, #28]
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f7fe fe92 	bl	8006bc8 <_EncodeStr>
 8007ea4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007ea6:	2216      	movs	r2, #22
 8007ea8:	68f9      	ldr	r1, [r7, #12]
 8007eaa:	6938      	ldr	r0, [r7, #16]
 8007eac:	f7fe ffcc 	bl	8006e48 <_SendPacket>
      RECORD_END();
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	3730      	adds	r7, #48	; 0x30
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	2001327c 	.word	0x2001327c
 8007ec4:	20013284 	.word	0x20013284

08007ec8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00f      	beq.n	8007ef6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007ed6:	4b0a      	ldr	r3, [pc, #40]	; (8007f00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f2      	bne.n	8007edc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	2001327c 	.word	0x2001327c

08007f04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8007f0e:	f04f 0120 	mov.w	r1, #32
 8007f12:	f381 8811 	msr	BASEPRI, r1
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	4817      	ldr	r0, [pc, #92]	; (8007f78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007f1a:	f7fe fea5 	bl	8006c68 <_PreparePacket>
 8007f1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	4b14      	ldr	r3, [pc, #80]	; (8007f7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	613b      	str	r3, [r7, #16]
 8007f2e:	e00b      	b.n	8007f48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	1c59      	adds	r1, r3, #1
 8007f38:	6179      	str	r1, [r7, #20]
 8007f3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007f3e:	b2d2      	uxtb	r2, r2
 8007f40:	701a      	strb	r2, [r3, #0]
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	09db      	lsrs	r3, r3, #7
 8007f46:	613b      	str	r3, [r7, #16]
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8007f4c:	d8f0      	bhi.n	8007f30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	1c5a      	adds	r2, r3, #1
 8007f52:	617a      	str	r2, [r7, #20]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	b2d2      	uxtb	r2, r2
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007f5e:	221b      	movs	r2, #27
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	68b8      	ldr	r0, [r7, #8]
 8007f64:	f7fe ff70 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f383 8811 	msr	BASEPRI, r3
}
 8007f6e:	bf00      	nop
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20013284 	.word	0x20013284
 8007f7c:	20013280 	.word	0x20013280

08007f80 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08a      	sub	sp, #40	; 0x28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f88:	f3ef 8311 	mrs	r3, BASEPRI
 8007f8c:	f04f 0120 	mov.w	r1, #32
 8007f90:	f381 8811 	msr	BASEPRI, r1
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	4827      	ldr	r0, [pc, #156]	; (8008034 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007f98:	f7fe fe66 	bl	8006c68 <_PreparePacket>
 8007f9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007f9e:	2280      	movs	r2, #128	; 0x80
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	6938      	ldr	r0, [r7, #16]
 8007fa4:	f7fe fe10 	bl	8006bc8 <_EncodeStr>
 8007fa8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	627b      	str	r3, [r7, #36]	; 0x24
 8007fae:	2301      	movs	r3, #1
 8007fb0:	623b      	str	r3, [r7, #32]
 8007fb2:	e00b      	b.n	8007fcc <SEGGER_SYSVIEW_Warn+0x4c>
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	1c59      	adds	r1, r3, #1
 8007fbc:	6279      	str	r1, [r7, #36]	; 0x24
 8007fbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	6a3b      	ldr	r3, [r7, #32]
 8007fc8:	09db      	lsrs	r3, r3, #7
 8007fca:	623b      	str	r3, [r7, #32]
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	2b7f      	cmp	r3, #127	; 0x7f
 8007fd0:	d8f0      	bhi.n	8007fb4 <SEGGER_SYSVIEW_Warn+0x34>
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	1c5a      	adds	r2, r3, #1
 8007fd6:	627a      	str	r2, [r7, #36]	; 0x24
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	b2d2      	uxtb	r2, r2
 8007fdc:	701a      	strb	r2, [r3, #0]
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	61fb      	str	r3, [r7, #28]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	e00b      	b.n	8008004 <SEGGER_SYSVIEW_Warn+0x84>
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	1c59      	adds	r1, r3, #1
 8007ff4:	61f9      	str	r1, [r7, #28]
 8007ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007ffa:	b2d2      	uxtb	r2, r2
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	09db      	lsrs	r3, r3, #7
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	2b7f      	cmp	r3, #127	; 0x7f
 8008008:	d8f0      	bhi.n	8007fec <SEGGER_SYSVIEW_Warn+0x6c>
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	1c5a      	adds	r2, r3, #1
 800800e:	61fa      	str	r2, [r7, #28]
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800801a:	221a      	movs	r2, #26
 800801c:	68f9      	ldr	r1, [r7, #12]
 800801e:	6938      	ldr	r0, [r7, #16]
 8008020:	f7fe ff12 	bl	8006e48 <_SendPacket>
  RECORD_END();
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f383 8811 	msr	BASEPRI, r3
}
 800802a:	bf00      	nop
 800802c:	3728      	adds	r7, #40	; 0x28
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20013284 	.word	0x20013284

08008038 <__libc_init_array>:
 8008038:	b570      	push	{r4, r5, r6, lr}
 800803a:	4d0d      	ldr	r5, [pc, #52]	; (8008070 <__libc_init_array+0x38>)
 800803c:	4c0d      	ldr	r4, [pc, #52]	; (8008074 <__libc_init_array+0x3c>)
 800803e:	1b64      	subs	r4, r4, r5
 8008040:	10a4      	asrs	r4, r4, #2
 8008042:	2600      	movs	r6, #0
 8008044:	42a6      	cmp	r6, r4
 8008046:	d109      	bne.n	800805c <__libc_init_array+0x24>
 8008048:	4d0b      	ldr	r5, [pc, #44]	; (8008078 <__libc_init_array+0x40>)
 800804a:	4c0c      	ldr	r4, [pc, #48]	; (800807c <__libc_init_array+0x44>)
 800804c:	f000 f83c 	bl	80080c8 <_init>
 8008050:	1b64      	subs	r4, r4, r5
 8008052:	10a4      	asrs	r4, r4, #2
 8008054:	2600      	movs	r6, #0
 8008056:	42a6      	cmp	r6, r4
 8008058:	d105      	bne.n	8008066 <__libc_init_array+0x2e>
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008060:	4798      	blx	r3
 8008062:	3601      	adds	r6, #1
 8008064:	e7ee      	b.n	8008044 <__libc_init_array+0xc>
 8008066:	f855 3b04 	ldr.w	r3, [r5], #4
 800806a:	4798      	blx	r3
 800806c:	3601      	adds	r6, #1
 800806e:	e7f2      	b.n	8008056 <__libc_init_array+0x1e>
 8008070:	08008518 	.word	0x08008518
 8008074:	08008518 	.word	0x08008518
 8008078:	08008518 	.word	0x08008518
 800807c:	0800851c 	.word	0x0800851c

08008080 <memcmp>:
 8008080:	b530      	push	{r4, r5, lr}
 8008082:	3901      	subs	r1, #1
 8008084:	2400      	movs	r4, #0
 8008086:	42a2      	cmp	r2, r4
 8008088:	d101      	bne.n	800808e <memcmp+0xe>
 800808a:	2000      	movs	r0, #0
 800808c:	e005      	b.n	800809a <memcmp+0x1a>
 800808e:	5d03      	ldrb	r3, [r0, r4]
 8008090:	3401      	adds	r4, #1
 8008092:	5d0d      	ldrb	r5, [r1, r4]
 8008094:	42ab      	cmp	r3, r5
 8008096:	d0f6      	beq.n	8008086 <memcmp+0x6>
 8008098:	1b58      	subs	r0, r3, r5
 800809a:	bd30      	pop	{r4, r5, pc}

0800809c <memcpy>:
 800809c:	440a      	add	r2, r1
 800809e:	4291      	cmp	r1, r2
 80080a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a4:	d100      	bne.n	80080a8 <memcpy+0xc>
 80080a6:	4770      	bx	lr
 80080a8:	b510      	push	{r4, lr}
 80080aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b2:	4291      	cmp	r1, r2
 80080b4:	d1f9      	bne.n	80080aa <memcpy+0xe>
 80080b6:	bd10      	pop	{r4, pc}

080080b8 <memset>:
 80080b8:	4402      	add	r2, r0
 80080ba:	4603      	mov	r3, r0
 80080bc:	4293      	cmp	r3, r2
 80080be:	d100      	bne.n	80080c2 <memset+0xa>
 80080c0:	4770      	bx	lr
 80080c2:	f803 1b01 	strb.w	r1, [r3], #1
 80080c6:	e7f9      	b.n	80080bc <memset+0x4>

080080c8 <_init>:
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ca:	bf00      	nop
 80080cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ce:	bc08      	pop	{r3}
 80080d0:	469e      	mov	lr, r3
 80080d2:	4770      	bx	lr

080080d4 <_fini>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr
