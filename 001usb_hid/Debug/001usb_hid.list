
001usb_hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dbc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08005f9c  08005f9c  00015f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fa4  08005fa4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08005fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000914  20000164  08006110  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  08006110  00020a78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e5c  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029e4  00000000  00000000  00030ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  000339d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  00034468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226ee  00000000  00000000  00034dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da6d  00000000  00000000  000574be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3510  00000000  00000000  00064f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012843b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029c0  00000000  00000000  00128490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005f2c 	.word	0x08005f2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	08005f2c 	.word	0x08005f2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 f972 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81e 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f886 	bl	80005dc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d0:	f005 f8c8 	bl	8005664 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  buffer[1] = 100;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <main+0x3c>)
 80004d6:	2264      	movs	r2, #100	; 0x64
 80004d8:	705a      	strb	r2, [r3, #1]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET ) {
 80004da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <main+0x40>)
 80004e0:	f000 fca8 	bl	8000e34 <HAL_GPIO_ReadPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d1f7      	bne.n	80004da <main+0x1a>
		USBD_HID_SendReport(&hUsbDeviceFS, buffer, 4);
 80004ea:	2204      	movs	r2, #4
 80004ec:	4903      	ldr	r1, [pc, #12]	; (80004fc <main+0x3c>)
 80004ee:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x44>)
 80004f0:	f003 fef2 	bl	80042d8 <USBD_HID_SendReport>
		HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 f9cb 	bl	8000890 <HAL_Delay>
	if ( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == GPIO_PIN_SET ) {
 80004fa:	e7ee      	b.n	80004da <main+0x1a>
 80004fc:	20000198 	.word	0x20000198
 8000500:	40020800 	.word	0x40020800
 8000504:	200001a0 	.word	0x200001a0

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f005 fd00 	bl	8005f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000578:	2304      	movs	r3, #4
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fdd5 	bl	800213c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 f86a 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 f836 	bl	800262c <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f853 	bl	8000670 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_GPIO_Init+0x8c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_GPIO_Init+0x8c>)
 80005fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a14      	ldr	r2, [pc, #80]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000618:	f043 0301 	orr.w	r3, r3, #1
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <MX_GPIO_Init+0x8c>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_GPIO_Init+0x8c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	4619      	mov	r1, r3
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_GPIO_Init+0x90>)
 800065c:	f000 fa4e 	bl	8000afc <HAL_GPIO_Init>

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40020800 	.word	0x40020800

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_MspInit+0x4c>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f89a 	bl	8000850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000724:	4802      	ldr	r0, [pc, #8]	; (8000730 <OTG_FS_IRQHandler+0x10>)
 8000726:	f000 fced 	bl	8001104 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000670 	.word	0x20000670

08000734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800075e:	490e      	ldr	r1, [pc, #56]	; (8000798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000760:	4a0e      	ldr	r2, [pc, #56]	; (800079c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0b      	ldr	r2, [pc, #44]	; (80007a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000774:	4c0b      	ldr	r4, [pc, #44]	; (80007a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000782:	f7ff ffd7 	bl	8000734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000786:	f005 fba5 	bl	8005ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800078a:	f7ff fe99 	bl	80004c0 <main>
  bx  lr    
 800078e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800079c:	08005fac 	.word	0x08005fac
  ldr r2, =_sbss
 80007a0:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80007a4:	20000a78 	.word	0x20000a78

080007a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC_IRQHandler>
	...

080007ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007b0:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0d      	ldr	r2, [pc, #52]	; (80007ec <HAL_Init+0x40>)
 80007b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <HAL_Init+0x40>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <HAL_Init+0x40>)
 80007c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <HAL_Init+0x40>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a07      	ldr	r2, [pc, #28]	; (80007ec <HAL_Init+0x40>)
 80007ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f000 f94f 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f000 f808 	bl	80007f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007e0:	f7ff ff4c 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023c00 	.word	0x40023c00

080007f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <HAL_InitTick+0x54>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_InitTick+0x58>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000806:	fbb3 f3f1 	udiv	r3, r3, r1
 800080a:	fbb2 f3f3 	udiv	r3, r2, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f967 	bl	8000ae2 <HAL_SYSTICK_Config>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800081a:	2301      	movs	r3, #1
 800081c:	e00e      	b.n	800083c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b0f      	cmp	r3, #15
 8000822:	d80a      	bhi.n	800083a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000824:	2200      	movs	r2, #0
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	f000 f92f 	bl	8000a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <HAL_InitTick+0x5c>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000836:	2300      	movs	r3, #0
 8000838:	e000      	b.n	800083c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000000 	.word	0x20000000
 8000848:	20000008 	.word	0x20000008
 800084c:	20000004 	.word	0x20000004

08000850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_IncTick+0x20>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_IncTick+0x24>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4413      	add	r3, r2
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_IncTick+0x24>)
 8000862:	6013      	str	r3, [r2, #0]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000008 	.word	0x20000008
 8000874:	2000019c 	.word	0x2000019c

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <HAL_GetTick+0x14>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000019c 	.word	0x2000019c

08000890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000898:	f7ff ffee 	bl	8000878 <HAL_GetTick>
 800089c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a8:	d005      	beq.n	80008b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_Delay+0x44>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	461a      	mov	r2, r3
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008b6:	bf00      	nop
 80008b8:	f7ff ffde 	bl	8000878 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d8f7      	bhi.n	80008b8 <HAL_Delay+0x28>
  {
  }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008

080008d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090a:	4a04      	ldr	r2, [pc, #16]	; (800091c <__NVIC_SetPriorityGrouping+0x44>)
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	60d3      	str	r3, [r2, #12]
}
 8000910:	bf00      	nop
 8000912:	3714      	adds	r7, #20
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4907      	ldr	r1, [pc, #28]	; (8000974 <__NVIC_EnableIRQ+0x38>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	; (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	; (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	; 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	; 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a44:	d301      	bcc.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00f      	b.n	8000a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <SysTick_Config+0x40>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	210f      	movs	r1, #15
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f7ff ff8e 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <SysTick_Config+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <SysTick_Config+0x40>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff29 	bl	80008d8 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff3e 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff8e 	bl	80009cc <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff31 	bl	800093c <__NVIC_EnableIRQ>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffa2 	bl	8000a34 <SysTick_Config>
 8000af0:	4603      	mov	r3, r0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	e16b      	b.n	8000df0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b18:	2201      	movs	r2, #1
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b2c:	693a      	ldr	r2, [r7, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f040 815a 	bne.w	8000dea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 0303 	and.w	r3, r3, #3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d005      	beq.n	8000b4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d130      	bne.n	8000bb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69ba      	ldr	r2, [r7, #24]
 8000b7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b84:	2201      	movs	r2, #1
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	69ba      	ldr	r2, [r7, #24]
 8000b90:	4013      	ands	r3, r2
 8000b92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	f003 0201 	and.w	r2, r3, #1
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d017      	beq.n	8000bec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	689a      	ldr	r2, [r3, #8]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d123      	bne.n	8000c40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	08da      	lsrs	r2, r3, #3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3208      	adds	r2, #8
 8000c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	f003 0307 	and.w	r3, r3, #7
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	220f      	movs	r2, #15
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	691a      	ldr	r2, [r3, #16]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	08da      	lsrs	r2, r3, #3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3208      	adds	r2, #8
 8000c3a:	69b9      	ldr	r1, [r7, #24]
 8000c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2203      	movs	r2, #3
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	4013      	ands	r3, r2
 8000c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0203 	and.w	r2, r3, #3
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 80b4 	beq.w	8000dea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b60      	ldr	r3, [pc, #384]	; (8000e08 <HAL_GPIO_Init+0x30c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a5f      	ldr	r2, [pc, #380]	; (8000e08 <HAL_GPIO_Init+0x30c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b5d      	ldr	r3, [pc, #372]	; (8000e08 <HAL_GPIO_Init+0x30c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c9e:	4a5b      	ldr	r2, [pc, #364]	; (8000e0c <HAL_GPIO_Init+0x310>)
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	089b      	lsrs	r3, r3, #2
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0303 	and.w	r3, r3, #3
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	220f      	movs	r2, #15
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a52      	ldr	r2, [pc, #328]	; (8000e10 <HAL_GPIO_Init+0x314>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d02b      	beq.n	8000d22 <HAL_GPIO_Init+0x226>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a51      	ldr	r2, [pc, #324]	; (8000e14 <HAL_GPIO_Init+0x318>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d025      	beq.n	8000d1e <HAL_GPIO_Init+0x222>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a50      	ldr	r2, [pc, #320]	; (8000e18 <HAL_GPIO_Init+0x31c>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d01f      	beq.n	8000d1a <HAL_GPIO_Init+0x21e>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a4f      	ldr	r2, [pc, #316]	; (8000e1c <HAL_GPIO_Init+0x320>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d019      	beq.n	8000d16 <HAL_GPIO_Init+0x21a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a4e      	ldr	r2, [pc, #312]	; (8000e20 <HAL_GPIO_Init+0x324>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d013      	beq.n	8000d12 <HAL_GPIO_Init+0x216>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4d      	ldr	r2, [pc, #308]	; (8000e24 <HAL_GPIO_Init+0x328>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d00d      	beq.n	8000d0e <HAL_GPIO_Init+0x212>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4c      	ldr	r2, [pc, #304]	; (8000e28 <HAL_GPIO_Init+0x32c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d007      	beq.n	8000d0a <HAL_GPIO_Init+0x20e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4b      	ldr	r2, [pc, #300]	; (8000e2c <HAL_GPIO_Init+0x330>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d101      	bne.n	8000d06 <HAL_GPIO_Init+0x20a>
 8000d02:	2307      	movs	r3, #7
 8000d04:	e00e      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d06:	2308      	movs	r3, #8
 8000d08:	e00c      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	e00a      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d0e:	2305      	movs	r3, #5
 8000d10:	e008      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d12:	2304      	movs	r3, #4
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d16:	2303      	movs	r3, #3
 8000d18:	e004      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <HAL_GPIO_Init+0x228>
 8000d22:	2300      	movs	r3, #0
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	f002 0203 	and.w	r2, r2, #3
 8000d2a:	0092      	lsls	r2, r2, #2
 8000d2c:	4093      	lsls	r3, r2
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d34:	4935      	ldr	r1, [pc, #212]	; (8000e0c <HAL_GPIO_Init+0x310>)
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	089b      	lsrs	r3, r3, #2
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d42:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d66:	4a32      	ldr	r2, [pc, #200]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d90:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4013      	ands	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d003      	beq.n	8000dba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dba:	4a1d      	ldr	r2, [pc, #116]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <HAL_GPIO_Init+0x334>)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3301      	adds	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	f67f ae90 	bls.w	8000b18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40020000 	.word	0x40020000
 8000e14:	40020400 	.word	0x40020400
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40021400 	.word	0x40021400
 8000e28:	40021800 	.word	0x40021800
 8000e2c:	40021c00 	.word	0x40021c00
 8000e30:	40013c00 	.word	0x40013c00

08000e34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	887b      	ldrh	r3, [r7, #2]
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e001      	b.n	8000e56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e66:	b08f      	sub	sp, #60	; 0x3c
 8000e68:	af0a      	add	r7, sp, #40	; 0x28
 8000e6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e10f      	b.n	8001096 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d106      	bne.n	8000e96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f004 fd1d 	bl	80058d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2203      	movs	r2, #3
 8000e9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f001 fea2 	bl	8002bfe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	687e      	ldr	r6, [r7, #4]
 8000ec2:	466d      	mov	r5, sp
 8000ec4:	f106 0410 	add.w	r4, r6, #16
 8000ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ed8:	1d33      	adds	r3, r6, #4
 8000eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f001 fd79 	bl	80029d4 <USB_CoreInit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d005      	beq.n	8000ef4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e0d0      	b.n	8001096 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 fe90 	bl	8002c20 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e04a      	b.n	8000f9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	1a9b      	subs	r3, r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	440b      	add	r3, r1
 8000f14:	333d      	adds	r3, #61	; 0x3d
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f1a:	7bfa      	ldrb	r2, [r7, #15]
 8000f1c:	6879      	ldr	r1, [r7, #4]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	440b      	add	r3, r1
 8000f28:	333c      	adds	r3, #60	; 0x3c
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f2e:	7bfa      	ldrb	r2, [r7, #15]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	b298      	uxth	r0, r3
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	440b      	add	r3, r1
 8000f40:	3342      	adds	r3, #66	; 0x42
 8000f42:	4602      	mov	r2, r0
 8000f44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	333f      	adds	r3, #63	; 0x3f
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	3344      	adds	r3, #68	; 0x44
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	1a9b      	subs	r3, r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3348      	adds	r3, #72	; 0x48
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4613      	mov	r3, r2
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	440b      	add	r3, r1
 8000f90:	3350      	adds	r3, #80	; 0x50
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	7bfa      	ldrb	r2, [r7, #15]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d3af      	bcc.n	8000f06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e044      	b.n	8001036 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fac:	7bfa      	ldrb	r2, [r7, #15]
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	1a9b      	subs	r3, r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	440b      	add	r3, r1
 8000fba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000fd8:	7bfa      	ldrb	r2, [r7, #15]
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	3301      	adds	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	429a      	cmp	r2, r3
 800103e:	d3b5      	bcc.n	8000fac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	687e      	ldr	r6, [r7, #4]
 8001048:	466d      	mov	r5, sp
 800104a:	f106 0410 	add.w	r4, r6, #16
 800104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105a:	e885 0003 	stmia.w	r5, {r0, r1}
 800105e:	1d33      	adds	r3, r6, #4
 8001060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001062:	6838      	ldr	r0, [r7, #0]
 8001064:	f001 fe06 	bl	8002c74 <USB_DevInit>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e00d      	b.n	8001096 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f002 fe4e 	bl	8003d30 <USB_DevDisconnect>

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800109e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_PCD_Start+0x1c>
 80010b6:	2302      	movs	r3, #2
 80010b8:	e020      	b.n	80010fc <HAL_PCD_Start+0x5e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d109      	bne.n	80010de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d005      	beq.n	80010de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fd7a 	bl	8002bdc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fdfe 	bl	8003cee <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b08d      	sub	sp, #52	; 0x34
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f002 febc 	bl	8003e98 <USB_GetMode>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 839d 	bne.w	8001862 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fe20 	bl	8003d72 <USB_ReadInterrupts>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 8393 	beq.w	8001860 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fe17 	bl	8003d72 <USB_ReadInterrupts>
 8001144:	4603      	mov	r3, r0
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b02      	cmp	r3, #2
 800114c:	d107      	bne.n	800115e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	695a      	ldr	r2, [r3, #20]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f002 0202 	and.w	r2, r2, #2
 800115c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f002 fe05 	bl	8003d72 <USB_ReadInterrupts>
 8001168:	4603      	mov	r3, r0
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b10      	cmp	r3, #16
 8001170:	d161      	bne.n	8001236 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0210 	bic.w	r2, r2, #16
 8001180:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	6a1b      	ldr	r3, [r3, #32]
 8001186:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f003 020f 	and.w	r2, r3, #15
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	3304      	adds	r3, #4
 80011a0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	0c5b      	lsrs	r3, r3, #17
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d124      	bne.n	80011f8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d035      	beq.n	8001226 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	461a      	mov	r2, r3
 80011cc:	6a38      	ldr	r0, [r7, #32]
 80011ce:	f002 fc6b 	bl	8003aa8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011de:	441a      	add	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011f0:	441a      	add	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	e016      	b.n	8001226 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	0c5b      	lsrs	r3, r3, #17
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	2b06      	cmp	r3, #6
 8001202:	d110      	bne.n	8001226 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800120a:	2208      	movs	r2, #8
 800120c:	4619      	mov	r1, r3
 800120e:	6a38      	ldr	r0, [r7, #32]
 8001210:	f002 fc4a 	bl	8003aa8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001220:	441a      	add	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0210 	orr.w	r2, r2, #16
 8001234:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fd99 	bl	8003d72 <USB_ReadInterrupts>
 8001240:	4603      	mov	r3, r0
 8001242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800124a:	d16e      	bne.n	800132a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fd9f 	bl	8003d98 <USB_ReadDevAllOutEpInterrupt>
 800125a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800125c:	e062      	b.n	8001324 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800125e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fdc4 	bl	8003e00 <USB_ReadDevOutEPInterrupt>
 8001278:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00c      	beq.n	800129e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	015a      	lsls	r2, r3, #5
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4413      	add	r3, r2
 800128c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001290:	461a      	mov	r2, r3
 8001292:	2301      	movs	r3, #1
 8001294:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 fd99 	bl	8001dd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00c      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	015a      	lsls	r2, r3, #5
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	4413      	add	r3, r2
 80012b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b4:	461a      	mov	r2, r3
 80012b6:	2308      	movs	r3, #8
 80012b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fe93 	bl	8001fe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	015a      	lsls	r2, r3, #5
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d8:	461a      	mov	r2, r3
 80012da:	2310      	movs	r3, #16
 80012dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	015a      	lsls	r2, r3, #5
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f4:	461a      	mov	r2, r3
 80012f6:	2320      	movs	r3, #32
 80012f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d009      	beq.n	8001318 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	015a      	lsls	r2, r3, #5
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	4413      	add	r3, r2
 800130c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001310:	461a      	mov	r2, r3
 8001312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001316:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3301      	adds	r3, #1
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800131e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001326:	2b00      	cmp	r3, #0
 8001328:	d199      	bne.n	800125e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f002 fd1f 	bl	8003d72 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800133e:	f040 80c0 	bne.w	80014c2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f002 fd40 	bl	8003dcc <USB_ReadDevAllInEpInterrupt>
 800134c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001352:	e0b2      	b.n	80014ba <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	f000 80a7 	beq.w	80014ae <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fd66 	bl	8003e3c <USB_ReadDevInEPInterrupt>
 8001370:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d057      	beq.n	800142c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	2201      	movs	r2, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	69f9      	ldr	r1, [r7, #28]
 8001398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800139c:	4013      	ands	r3, r2
 800139e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	015a      	lsls	r2, r3, #5
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	4413      	add	r3, r2
 80013a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ac:	461a      	mov	r2, r3
 80013ae:	2301      	movs	r3, #1
 80013b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d132      	bne.n	8001420 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013be:	4613      	mov	r3, r2
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	1a9b      	subs	r3, r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	440b      	add	r3, r1
 80013c8:	3348      	adds	r3, #72	; 0x48
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013d0:	4613      	mov	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	1a9b      	subs	r3, r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4403      	add	r3, r0
 80013da:	3344      	adds	r3, #68	; 0x44
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4419      	add	r1, r3
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e4:	4613      	mov	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	1a9b      	subs	r3, r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4403      	add	r3, r0
 80013ee:	3348      	adds	r3, #72	; 0x48
 80013f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d113      	bne.n	8001420 <HAL_PCD_IRQHandler+0x31c>
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	3350      	adds	r3, #80	; 0x50
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6818      	ldr	r0, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001418:	461a      	mov	r2, r3
 800141a:	2101      	movs	r1, #1
 800141c:	f002 fd6e 	bl	8003efc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f004 fad3 	bl	80059d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	015a      	lsls	r2, r3, #5
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001442:	461a      	mov	r2, r3
 8001444:	2308      	movs	r3, #8
 8001446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	015a      	lsls	r2, r3, #5
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4413      	add	r3, r2
 800145a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800145e:	461a      	mov	r2, r3
 8001460:	2310      	movs	r3, #16
 8001462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147a:	461a      	mov	r2, r3
 800147c:	2340      	movs	r3, #64	; 0x40
 800147e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001496:	461a      	mov	r2, r3
 8001498:	2302      	movs	r3, #2
 800149a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fc03 	bl	8001cb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	3301      	adds	r3, #1
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b6:	085b      	lsrs	r3, r3, #1
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f47f af49 	bne.w	8001354 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 fc53 	bl	8003d72 <USB_ReadInterrupts>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014d6:	d122      	bne.n	800151e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014e6:	f023 0301 	bic.w	r3, r3, #1
 80014ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80014fe:	2100      	movs	r1, #0
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 fe0f 	bl	8002124 <HAL_PCDEx_LPM_Callback>
 8001506:	e002      	b.n	800150e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f004 fad9 	bl	8005ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	695a      	ldr	r2, [r3, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800151c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f002 fc25 	bl	8003d72 <USB_ReadInterrupts>
 8001528:	4603      	mov	r3, r0
 800152a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001532:	d112      	bne.n	800155a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f004 fa95 	bl	8005a74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001558:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f002 fc07 	bl	8003d72 <USB_ReadInterrupts>
 8001564:	4603      	mov	r3, r0
 8001566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800156e:	f040 80c7 	bne.w	8001700 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2110      	movs	r1, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fcd5 	bl	8002f3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001596:	e056      	b.n	8001646 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a4:	461a      	mov	r2, r3
 80015a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ae:	015a      	lsls	r2, r3, #5
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	4413      	add	r3, r2
 80015b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015bc:	0151      	lsls	r1, r2, #5
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	440a      	add	r2, r1
 80015c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ca:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015dc:	0151      	lsls	r1, r2, #5
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	440a      	add	r2, r1
 80015e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ee:	015a      	lsls	r2, r3, #5
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f8:	461a      	mov	r2, r3
 80015fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001610:	0151      	lsls	r1, r2, #5
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	440a      	add	r2, r1
 8001616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800161a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800161e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	015a      	lsls	r2, r3, #5
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	4413      	add	r3, r2
 8001628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001630:	0151      	lsls	r1, r2, #5
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	440a      	add	r2, r1
 8001636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800163a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800163e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	3301      	adds	r3, #1
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164c:	429a      	cmp	r2, r3
 800164e:	d3a3      	bcc.n	8001598 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001662:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	2b00      	cmp	r3, #0
 800166a:	d016      	beq.n	800169a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167c:	f043 030b 	orr.w	r3, r3, #11
 8001680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001692:	f043 030b 	orr.w	r3, r3, #11
 8001696:	6453      	str	r3, [r2, #68]	; 0x44
 8001698:	e015      	b.n	80016c6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	69fa      	ldr	r2, [r7, #28]
 80016a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	69fa      	ldr	r2, [r7, #28]
 80016bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c0:	f043 030b 	orr.w	r3, r3, #11
 80016c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ea:	461a      	mov	r2, r3
 80016ec:	f002 fc06 	bl	8003efc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695a      	ldr	r2, [r3, #20]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f002 fb34 	bl	8003d72 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001714:	d124      	bne.n	8001760 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f002 fbca 	bl	8003eb4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fc6a 	bl	8002ffe <USB_GetDevSpeed>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681c      	ldr	r4, [r3, #0]
 8001736:	f001 f941 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 800173a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001740:	b2db      	uxtb	r3, r3
 8001742:	461a      	mov	r2, r3
 8001744:	4620      	mov	r0, r4
 8001746:	f001 f9a7 	bl	8002a98 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f004 f969 	bl	8005a22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	695a      	ldr	r2, [r3, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800175e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f002 fb04 	bl	8003d72 <USB_ReadInterrupts>
 800176a:	4603      	mov	r3, r0
 800176c:	f003 0308 	and.w	r3, r3, #8
 8001770:	2b08      	cmp	r3, #8
 8001772:	d10a      	bne.n	800178a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f004 f946 	bl	8005a06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f002 0208 	and.w	r2, r2, #8
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f002 faef 	bl	8003d72 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800179e:	d10f      	bne.n	80017c0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f004 f9a8 	bl	8005b00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695a      	ldr	r2, [r3, #20]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f002 fad4 	bl	8003d72 <USB_ReadInterrupts>
 80017ca:	4603      	mov	r3, r0
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017d4:	d10f      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f004 f97b 	bl	8005adc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fab9 	bl	8003d72 <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180a:	d10a      	bne.n	8001822 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f004 f989 	bl	8005b24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001820:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f002 faa3 	bl	8003d72 <USB_ReadInterrupts>
 800182c:	4603      	mov	r3, r0
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b04      	cmp	r3, #4
 8001834:	d115      	bne.n	8001862 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f004 f979 	bl	8005b40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	e000      	b.n	8001862 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001860:	bf00      	nop
    }
  }
}
 8001862:	3734      	adds	r7, #52	; 0x34
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_PCD_SetAddress+0x1a>
 800187e:	2302      	movs	r3, #2
 8001880:	e013      	b.n	80018aa <HAL_PCD_SetAddress+0x42>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	78fa      	ldrb	r2, [r7, #3]
 8001898:	4611      	mov	r1, r2
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fa01 	bl	8003ca2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	461a      	mov	r2, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	70fb      	strb	r3, [r7, #3]
 80018c4:	460b      	mov	r3, r1
 80018c6:	803b      	strh	r3, [r7, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da0f      	bge.n	80018f8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	f003 020f 	and.w	r2, r3, #15
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	3338      	adds	r3, #56	; 0x38
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	4413      	add	r3, r2
 80018ec:	3304      	adds	r3, #4
 80018ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	705a      	strb	r2, [r3, #1]
 80018f6:	e00f      	b.n	8001918 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 020f 	and.w	r2, r3, #15
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	4413      	add	r3, r2
 800190e:	3304      	adds	r3, #4
 8001910:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001918:	78fb      	ldrb	r3, [r7, #3]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	b2da      	uxtb	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001924:	883a      	ldrh	r2, [r7, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	78ba      	ldrb	r2, [r7, #2]
 800192e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	785b      	ldrb	r3, [r3, #1]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001942:	78bb      	ldrb	r3, [r7, #2]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d102      	bne.n	800194e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001954:	2b01      	cmp	r3, #1
 8001956:	d101      	bne.n	800195c <HAL_PCD_EP_Open+0xaa>
 8001958:	2302      	movs	r3, #2
 800195a:	e00e      	b.n	800197a <HAL_PCD_EP_Open+0xc8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	4618      	mov	r0, r3
 800196c:	f001 fb6c 	bl	8003048 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001978:	7afb      	ldrb	r3, [r7, #11]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800198e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001992:	2b00      	cmp	r3, #0
 8001994:	da0f      	bge.n	80019b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 020f 	and.w	r2, r3, #15
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	3338      	adds	r3, #56	; 0x38
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2201      	movs	r2, #1
 80019b2:	705a      	strb	r2, [r3, #1]
 80019b4:	e00f      	b.n	80019d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 020f 	and.w	r2, r3, #15
 80019bc:	4613      	mov	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	1a9b      	subs	r3, r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d101      	bne.n	80019f0 <HAL_PCD_EP_Close+0x6e>
 80019ec:	2302      	movs	r3, #2
 80019ee:	e00e      	b.n	8001a0e <HAL_PCD_EP_Close+0x8c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f001 fbaa 	bl	8003158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60f8      	str	r0, [r7, #12]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	460b      	mov	r3, r1
 8001a24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	f003 020f 	and.w	r2, r3, #15
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	1a9b      	subs	r3, r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2200      	movs	r2, #0
 8001a56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d102      	bne.n	8001a72 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	6979      	ldr	r1, [r7, #20]
 8001a8a:	f001 fe85 	bl	8003798 <USB_EP0StartXfer>
 8001a8e:	e008      	b.n	8001aa2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6979      	ldr	r1, [r7, #20]
 8001a9e:	f001 fc37 	bl	8003310 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	f003 020f 	and.w	r2, r3, #15
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	3338      	adds	r3, #56	; 0x38
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d102      	bne.n	8001b06 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	6979      	ldr	r1, [r7, #20]
 8001b1e:	f001 fe3b 	bl	8003798 <USB_EP0StartXfer>
 8001b22:	e008      	b.n	8001b36 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	6979      	ldr	r1, [r7, #20]
 8001b32:	f001 fbed 	bl	8003310 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	f003 020f 	and.w	r2, r3, #15
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d901      	bls.n	8001b5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e050      	b.n	8001c00 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da0f      	bge.n	8001b86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 020f 	and.w	r2, r3, #15
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	3338      	adds	r3, #56	; 0x38
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	3304      	adds	r3, #4
 8001b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2201      	movs	r2, #1
 8001b82:	705a      	strb	r2, [r3, #1]
 8001b84:	e00d      	b.n	8001ba2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b86:	78fa      	ldrb	r2, [r7, #3]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_PCD_EP_SetStall+0x82>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e01e      	b.n	8001c00 <HAL_PCD_EP_SetStall+0xc0>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68f9      	ldr	r1, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 ff92 	bl	8003afa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10a      	bne.n	8001bf6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	b2d9      	uxtb	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f002 f983 	bl	8003efc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	f003 020f 	and.w	r2, r3, #15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d901      	bls.n	8001c26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e042      	b.n	8001cac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da0f      	bge.n	8001c4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	3338      	adds	r3, #56	; 0x38
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
 8001c4c:	e00f      	b.n	8001c6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 020f 	and.w	r2, r3, #15
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	4413      	add	r3, r2
 8001c64:	3304      	adds	r3, #4
 8001c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_PCD_EP_ClrStall+0x86>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e00e      	b.n	8001cac <HAL_PCD_EP_ClrStall+0xa4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68f9      	ldr	r1, [r7, #12]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 ff9a 	bl	8003bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	3338      	adds	r3, #56	; 0x38
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	699a      	ldr	r2, [r3, #24]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d901      	bls.n	8001cec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e06c      	b.n	8001dc6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	69fa      	ldr	r2, [r7, #28]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d902      	bls.n	8001d08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d10:	e02b      	b.n	8001d6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d902      	bls.n	8001d2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3303      	adds	r3, #3
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6978      	ldr	r0, [r7, #20]
 8001d4e:	f001 fe76 	bl	8003a3e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	441a      	add	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	441a      	add	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d809      	bhi.n	8001d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d203      	bcs.n	8001d94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1be      	bne.n	8001d12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d811      	bhi.n	8001dc4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	2201      	movs	r2, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001db4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	6939      	ldr	r1, [r7, #16]
 8001dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3720      	adds	r7, #32
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	333c      	adds	r3, #60	; 0x3c
 8001de8:	3304      	adds	r3, #4
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	015a      	lsls	r2, r3, #5
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4413      	add	r3, r2
 8001df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 80a0 	bne.w	8001f48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d015      	beq.n	8001e3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	f240 80dd 	bls.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80d7 	beq.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e34:	461a      	mov	r2, r3
 8001e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e3a:	6093      	str	r3, [r2, #8]
 8001e3c:	e0cb      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e54:	461a      	mov	r2, r3
 8001e56:	2320      	movs	r3, #32
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0bc      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80b7 	bne.w	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d90f      	bls.n	8001e90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	e0a2      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4613      	mov	r3, r2
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ea2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	0159      	lsls	r1, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	440b      	add	r3, r1
 8001eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001eb6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4419      	add	r1, r3
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	1a9b      	subs	r3, r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4403      	add	r3, r0
 8001f04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d114      	bne.n	8001f3a <PCD_EP_OutXfrComplete_int+0x16a>
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6818      	ldr	r0, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f32:	461a      	mov	r2, r3
 8001f34:	2101      	movs	r1, #1
 8001f36:	f001 ffe1 	bl	8003efc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f003 fd2b 	bl	800599c <HAL_PCD_DataOutStageCallback>
 8001f46:	e046      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a26      	ldr	r2, [pc, #152]	; (8001fe4 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d124      	bne.n	8001f9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00a      	beq.n	8001f70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f6c:	6093      	str	r3, [r2, #8]
 8001f6e:	e032      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f86:	461a      	mov	r2, r3
 8001f88:	2320      	movs	r3, #32
 8001f8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f003 fd02 	bl	800599c <HAL_PCD_DataOutStageCallback>
 8001f98:	e01d      	b.n	8001fd6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d114      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d108      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6818      	ldr	r0, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	f001 ff99 	bl	8003efc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f003 fce3 	bl	800599c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	4f54300a 	.word	0x4f54300a
 8001fe4:	4f54310a 	.word	0x4f54310a

08001fe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	333c      	adds	r3, #60	; 0x3c
 8002000:	3304      	adds	r3, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4a15      	ldr	r2, [pc, #84]	; (8002070 <PCD_EP_OutSetupPacket_int+0x88>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d90e      	bls.n	800203c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d009      	beq.n	800203c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800203a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f003 fc9b 	bl	8005978 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <PCD_EP_OutSetupPacket_int+0x88>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d90c      	bls.n	8002064 <PCD_EP_OutSetupPacket_int+0x7c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d108      	bne.n	8002064 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800205c:	461a      	mov	r2, r3
 800205e:	2101      	movs	r1, #1
 8002060:	f001 ff4c 	bl	8003efc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	4f54300a 	.word	0x4f54300a

08002074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002092:	883b      	ldrh	r3, [r7, #0]
 8002094:	0419      	lsls	r1, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	430a      	orrs	r2, r1
 800209e:	629a      	str	r2, [r3, #40]	; 0x28
 80020a0:	e028      	b.n	80020f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4413      	add	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020b0:	2300      	movs	r3, #0
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e00d      	b.n	80020d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3340      	adds	r3, #64	; 0x40
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4413      	add	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3ec      	bcc.n	80020b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020dc:	883b      	ldrh	r3, [r7, #0]
 80020de:	0418      	lsls	r0, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6819      	ldr	r1, [r3, #0]
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	4302      	orrs	r2, r0
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e264      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d075      	beq.n	8002246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215a:	4ba3      	ldr	r3, [pc, #652]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b04      	cmp	r3, #4
 8002164:	d00c      	beq.n	8002180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002166:	4ba0      	ldr	r3, [pc, #640]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	2b08      	cmp	r3, #8
 8002170:	d112      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002172:	4b9d      	ldr	r3, [pc, #628]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800217e:	d10b      	bne.n	8002198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b99      	ldr	r3, [pc, #612]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d05b      	beq.n	8002244 <HAL_RCC_OscConfig+0x108>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d157      	bne.n	8002244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e23f      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a0:	d106      	bne.n	80021b0 <HAL_RCC_OscConfig+0x74>
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a90      	ldr	r2, [pc, #576]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x98>
 80021ba:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a8a      	ldr	r2, [pc, #552]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b88      	ldr	r3, [pc, #544]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a87      	ldr	r2, [pc, #540]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xb0>
 80021d4:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a83      	ldr	r2, [pc, #524]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b81      	ldr	r3, [pc, #516]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a80      	ldr	r2, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fb40 	bl	8000878 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fc:	f7fe fb3c 	bl	8000878 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e204      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xc0>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fb2c 	bl	8000878 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe fb28 	bl	8000878 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e1f0      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b6c      	ldr	r3, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0xe8>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d063      	beq.n	800231a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002252:	4b65      	ldr	r3, [pc, #404]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1c4      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4952      	ldr	r1, [pc, #328]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e03a      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d020      	beq.n	80022ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b4f      	ldr	r3, [pc, #316]	; (80023ec <HAL_RCC_OscConfig+0x2b0>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7fe fae1 	bl	8000878 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ba:	f7fe fadd 	bl	8000878 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e1a5      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4940      	ldr	r1, [pc, #256]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]
 80022ec:	e015      	b.n	800231a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_OscConfig+0x2b0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fac0 	bl	8000878 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fc:	f7fe fabc 	bl	8000878 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e184      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	4b36      	ldr	r3, [pc, #216]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d030      	beq.n	8002388 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x2b4>)
 8002330:	2201      	movs	r2, #1
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe faa0 	bl	8000878 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fa9c 	bl	8000878 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e164      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x200>
 800235a:	e015      	b.n	8002388 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_OscConfig+0x2b4>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fa89 	bl	8000878 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236a:	f7fe fa85 	bl	8000878 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e14d      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f0      	bne.n	800236a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a0 	beq.w	80024d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10f      	bne.n	80023c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_OscConfig+0x2b8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d121      	bne.n	8002416 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_OscConfig+0x2b8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_RCC_OscConfig+0x2b8>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7fe fa4b 	bl	8000878 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e011      	b.n	800240a <HAL_RCC_OscConfig+0x2ce>
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	42470000 	.word	0x42470000
 80023f0:	42470e80 	.word	0x42470e80
 80023f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f8:	f7fe fa3e 	bl	8000878 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e106      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800240a:	4b85      	ldr	r3, [pc, #532]	; (8002620 <HAL_RCC_OscConfig+0x4e4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d106      	bne.n	800242c <HAL_RCC_OscConfig+0x2f0>
 800241e:	4b81      	ldr	r3, [pc, #516]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a80      	ldr	r2, [pc, #512]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	e01c      	b.n	8002466 <HAL_RCC_OscConfig+0x32a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2b05      	cmp	r3, #5
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x312>
 8002434:	4b7b      	ldr	r3, [pc, #492]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002438:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6713      	str	r3, [r2, #112]	; 0x70
 8002440:	4b78      	ldr	r3, [pc, #480]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002444:	4a77      	ldr	r2, [pc, #476]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	6713      	str	r3, [r2, #112]	; 0x70
 800244c:	e00b      	b.n	8002466 <HAL_RCC_OscConfig+0x32a>
 800244e:	4b75      	ldr	r3, [pc, #468]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	4a74      	ldr	r2, [pc, #464]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	6713      	str	r3, [r2, #112]	; 0x70
 800245a:	4b72      	ldr	r3, [pc, #456]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245e:	4a71      	ldr	r2, [pc, #452]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002460:	f023 0304 	bic.w	r3, r3, #4
 8002464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d015      	beq.n	800249a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fa03 	bl	8000878 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002476:	f7fe f9ff 	bl	8000878 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	f241 3288 	movw	r2, #5000	; 0x1388
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0c5      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	4b65      	ldr	r3, [pc, #404]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0ee      	beq.n	8002476 <HAL_RCC_OscConfig+0x33a>
 8002498:	e014      	b.n	80024c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249a:	f7fe f9ed 	bl	8000878 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe f9e9 	bl	8000878 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0af      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	4b5a      	ldr	r3, [pc, #360]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ee      	bne.n	80024a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d105      	bne.n	80024d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ca:	4b56      	ldr	r3, [pc, #344]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a55      	ldr	r2, [pc, #340]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 809b 	beq.w	8002616 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024e0:	4b50      	ldr	r3, [pc, #320]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 030c 	and.w	r3, r3, #12
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d05c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d141      	bne.n	8002578 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x4ec>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7fe f9bd 	bl	8000878 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe f9b9 	bl	8000878 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e081      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002514:	4b43      	ldr	r3, [pc, #268]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f0      	bne.n	8002502 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69da      	ldr	r2, [r3, #28]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	019b      	lsls	r3, r3, #6
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	3b01      	subs	r3, #1
 800253a:	041b      	lsls	r3, r3, #16
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	061b      	lsls	r3, r3, #24
 8002544:	4937      	ldr	r1, [pc, #220]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 8002546:	4313      	orrs	r3, r2
 8002548:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCC_OscConfig+0x4ec>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe f992 	bl	8000878 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe f98e 	bl	8000878 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e056      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x41c>
 8002576:	e04e      	b.n	8002616 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x4ec>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257e:	f7fe f97b 	bl	8000878 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002586:	f7fe f977 	bl	8000878 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e03f      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002598:	4b22      	ldr	r3, [pc, #136]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x44a>
 80025a4:	e037      	b.n	8002616 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e032      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b2:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d028      	beq.n	8002612 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d11a      	bne.n	8002612 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e2:	4013      	ands	r3, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d111      	bne.n	8002612 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d107      	bne.n	8002612 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40007000 	.word	0x40007000
 8002624:	40023800 	.word	0x40023800
 8002628:	42470060 	.word	0x42470060

0800262c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0cc      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b68      	ldr	r3, [pc, #416]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d90c      	bls.n	8002668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b65      	ldr	r3, [pc, #404]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b8      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800268a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	494d      	ldr	r1, [pc, #308]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d044      	beq.n	800274c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d119      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d003      	beq.n	80026ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ea:	4b3f      	ldr	r3, [pc, #252]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e067      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270a:	4b37      	ldr	r3, [pc, #220]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f023 0203 	bic.w	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	4313      	orrs	r3, r2
 800271a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800271c:	f7fe f8ac 	bl	8000878 <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe f8a8 	bl	8000878 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e04f      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 020c 	and.w	r2, r3, #12
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	429a      	cmp	r2, r3
 800274a:	d1eb      	bne.n	8002724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d20c      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b22      	ldr	r3, [pc, #136]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e032      	b.n	80027da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	490e      	ldr	r1, [pc, #56]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027b2:	f000 f821 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	490a      	ldr	r1, [pc, #40]	; (80027ec <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe f80c 	bl	80007f0 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40023c00 	.word	0x40023c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08005f8c 	.word	0x08005f8c
 80027f0:	20000000 	.word	0x20000000
 80027f4:	20000004 	.word	0x20000004

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	2300      	movs	r3, #0
 800280a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002810:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d00d      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x40>
 800281c:	2b08      	cmp	r3, #8
 800281e:	f200 80bd 	bhi.w	800299c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x34>
 8002826:	2b04      	cmp	r3, #4
 8002828:	d003      	beq.n	8002832 <HAL_RCC_GetSysClockFreq+0x3a>
 800282a:	e0b7      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b61      	ldr	r3, [pc, #388]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800282e:	60bb      	str	r3, [r7, #8]
       break;
 8002830:	e0b7      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002832:	4b61      	ldr	r3, [pc, #388]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002834:	60bb      	str	r3, [r7, #8]
      break;
 8002836:	e0b4      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002838:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002840:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002842:	4b5b      	ldr	r3, [pc, #364]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04d      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	099b      	lsrs	r3, r3, #6
 8002854:	461a      	mov	r2, r3
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800285e:	f04f 0100 	mov.w	r1, #0
 8002862:	ea02 0800 	and.w	r8, r2, r0
 8002866:	ea03 0901 	and.w	r9, r3, r1
 800286a:	4640      	mov	r0, r8
 800286c:	4649      	mov	r1, r9
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	014b      	lsls	r3, r1, #5
 8002878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800287c:	0142      	lsls	r2, r0, #5
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	ebb0 0008 	subs.w	r0, r0, r8
 8002886:	eb61 0109 	sbc.w	r1, r1, r9
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	018b      	lsls	r3, r1, #6
 8002894:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002898:	0182      	lsls	r2, r0, #6
 800289a:	1a12      	subs	r2, r2, r0
 800289c:	eb63 0301 	sbc.w	r3, r3, r1
 80028a0:	f04f 0000 	mov.w	r0, #0
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	00d9      	lsls	r1, r3, #3
 80028aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80028ae:	00d0      	lsls	r0, r2, #3
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	eb12 0208 	adds.w	r2, r2, r8
 80028b8:	eb43 0309 	adc.w	r3, r3, r9
 80028bc:	f04f 0000 	mov.w	r0, #0
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	0259      	lsls	r1, r3, #9
 80028c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028ca:	0250      	lsls	r0, r2, #9
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	f7fd fc74 	bl	80001c8 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4613      	mov	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e04a      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ea:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	099b      	lsrs	r3, r3, #6
 80028f0:	461a      	mov	r2, r3
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	ea02 0400 	and.w	r4, r2, r0
 8002902:	ea03 0501 	and.w	r5, r3, r1
 8002906:	4620      	mov	r0, r4
 8002908:	4629      	mov	r1, r5
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	f04f 0300 	mov.w	r3, #0
 8002912:	014b      	lsls	r3, r1, #5
 8002914:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002918:	0142      	lsls	r2, r0, #5
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	1b00      	subs	r0, r0, r4
 8002920:	eb61 0105 	sbc.w	r1, r1, r5
 8002924:	f04f 0200 	mov.w	r2, #0
 8002928:	f04f 0300 	mov.w	r3, #0
 800292c:	018b      	lsls	r3, r1, #6
 800292e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002932:	0182      	lsls	r2, r0, #6
 8002934:	1a12      	subs	r2, r2, r0
 8002936:	eb63 0301 	sbc.w	r3, r3, r1
 800293a:	f04f 0000 	mov.w	r0, #0
 800293e:	f04f 0100 	mov.w	r1, #0
 8002942:	00d9      	lsls	r1, r3, #3
 8002944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002948:	00d0      	lsls	r0, r2, #3
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	1912      	adds	r2, r2, r4
 8002950:	eb45 0303 	adc.w	r3, r5, r3
 8002954:	f04f 0000 	mov.w	r0, #0
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	0299      	lsls	r1, r3, #10
 800295e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002962:	0290      	lsls	r0, r2, #10
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4610      	mov	r0, r2
 800296a:	4619      	mov	r1, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	f7fd fc28 	bl	80001c8 <__aeabi_uldivmod>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4613      	mov	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	0c1b      	lsrs	r3, r3, #16
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	3301      	adds	r3, #1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	60bb      	str	r3, [r7, #8]
      break;
 800299a:	e002      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800299e:	60bb      	str	r3, [r7, #8]
      break;
 80029a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029a2:	68bb      	ldr	r3, [r7, #8]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	007a1200 	.word	0x007a1200

080029bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000

080029d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80029d4:	b084      	sub	sp, #16
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b084      	sub	sp, #16
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	f107 001c 	add.w	r0, r7, #28
 80029e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d122      	bne.n	8002a32 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f001 fac6 	bl	8003fb8 <USB_CoreReset>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e01a      	b.n	8002a68 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f001 faba 	bl	8003fb8 <USB_CoreReset>
 8002a44:	4603      	mov	r3, r0
 8002a46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	639a      	str	r2, [r3, #56]	; 0x38
 8002a5a:	e005      	b.n	8002a68 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d10b      	bne.n	8002a86 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f043 0206 	orr.w	r2, r3, #6
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a92:	b004      	add	sp, #16
 8002a94:	4770      	bx	lr
	...

08002a98 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d165      	bne.n	8002b78 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4a41      	ldr	r2, [pc, #260]	; (8002bb4 <USB_SetTurnaroundTime+0x11c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d906      	bls.n	8002ac2 <USB_SetTurnaroundTime+0x2a>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <USB_SetTurnaroundTime+0x120>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d202      	bcs.n	8002ac2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002abc:	230f      	movs	r3, #15
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	e062      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	4a3c      	ldr	r2, [pc, #240]	; (8002bb8 <USB_SetTurnaroundTime+0x120>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d306      	bcc.n	8002ad8 <USB_SetTurnaroundTime+0x40>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4a3b      	ldr	r2, [pc, #236]	; (8002bbc <USB_SetTurnaroundTime+0x124>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d202      	bcs.n	8002ad8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002ad2:	230e      	movs	r3, #14
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e057      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4a38      	ldr	r2, [pc, #224]	; (8002bbc <USB_SetTurnaroundTime+0x124>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d306      	bcc.n	8002aee <USB_SetTurnaroundTime+0x56>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4a37      	ldr	r2, [pc, #220]	; (8002bc0 <USB_SetTurnaroundTime+0x128>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d202      	bcs.n	8002aee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ae8:	230d      	movs	r3, #13
 8002aea:	617b      	str	r3, [r7, #20]
 8002aec:	e04c      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4a33      	ldr	r2, [pc, #204]	; (8002bc0 <USB_SetTurnaroundTime+0x128>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d306      	bcc.n	8002b04 <USB_SetTurnaroundTime+0x6c>
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <USB_SetTurnaroundTime+0x12c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d802      	bhi.n	8002b04 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002afe:	230c      	movs	r3, #12
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e041      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4a2f      	ldr	r2, [pc, #188]	; (8002bc4 <USB_SetTurnaroundTime+0x12c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d906      	bls.n	8002b1a <USB_SetTurnaroundTime+0x82>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4a2e      	ldr	r2, [pc, #184]	; (8002bc8 <USB_SetTurnaroundTime+0x130>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d802      	bhi.n	8002b1a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002b14:	230b      	movs	r3, #11
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e036      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <USB_SetTurnaroundTime+0x130>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d906      	bls.n	8002b30 <USB_SetTurnaroundTime+0x98>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <USB_SetTurnaroundTime+0x134>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d802      	bhi.n	8002b30 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002b2a:	230a      	movs	r3, #10
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e02b      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <USB_SetTurnaroundTime+0x134>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d906      	bls.n	8002b46 <USB_SetTurnaroundTime+0xae>
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4a25      	ldr	r2, [pc, #148]	; (8002bd0 <USB_SetTurnaroundTime+0x138>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d202      	bcs.n	8002b46 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002b40:	2309      	movs	r3, #9
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e020      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <USB_SetTurnaroundTime+0x138>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d306      	bcc.n	8002b5c <USB_SetTurnaroundTime+0xc4>
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <USB_SetTurnaroundTime+0x13c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d802      	bhi.n	8002b5c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002b56:	2308      	movs	r3, #8
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e015      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <USB_SetTurnaroundTime+0x13c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d906      	bls.n	8002b72 <USB_SetTurnaroundTime+0xda>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <USB_SetTurnaroundTime+0x140>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d202      	bcs.n	8002b72 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002b6c:	2307      	movs	r3, #7
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e00a      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002b72:	2306      	movs	r3, #6
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e007      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002b7e:	2309      	movs	r3, #9
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e001      	b.n	8002b88 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002b84:	2309      	movs	r3, #9
 8002b86:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	00d8acbf 	.word	0x00d8acbf
 8002bb8:	00e4e1c0 	.word	0x00e4e1c0
 8002bbc:	00f42400 	.word	0x00f42400
 8002bc0:	01067380 	.word	0x01067380
 8002bc4:	011a499f 	.word	0x011a499f
 8002bc8:	01312cff 	.word	0x01312cff
 8002bcc:	014ca43f 	.word	0x014ca43f
 8002bd0:	016e3600 	.word	0x016e3600
 8002bd4:	01a6ab1f 	.word	0x01a6ab1f
 8002bd8:	01e84800 	.word	0x01e84800

08002bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d106      	bne.n	8002c4c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	e00b      	b.n	8002c64 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002c4c:	78fb      	ldrb	r3, [r7, #3]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d106      	bne.n	8002c60 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	e001      	b.n	8002c64 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e003      	b.n	8002c6c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002c64:	2032      	movs	r0, #50	; 0x32
 8002c66:	f7fd fe13 	bl	8000890 <HAL_Delay>

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c74:	b084      	sub	sp, #16
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b086      	sub	sp, #24
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002c82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e009      	b.n	8002ca8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	3340      	adds	r3, #64	; 0x40
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0e      	cmp	r3, #14
 8002cac:	d9f2      	bls.n	8002c94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11c      	bne.n	8002cee <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f043 0302 	orr.w	r3, r3, #2
 8002cc6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
 8002cec:	e00b      	b.n	8002d06 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2300      	movs	r3, #0
 8002d10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d18:	4619      	mov	r1, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d20:	461a      	mov	r2, r3
 8002d22:	680b      	ldr	r3, [r1, #0]
 8002d24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d10c      	bne.n	8002d46 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d104      	bne.n	8002d3c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002d32:	2100      	movs	r1, #0
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f949 	bl	8002fcc <USB_SetDevSpeed>
 8002d3a:	e008      	b.n	8002d4e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f944 	bl	8002fcc <USB_SetDevSpeed>
 8002d44:	e003      	b.n	8002d4e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002d46:	2103      	movs	r1, #3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f93f 	bl	8002fcc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d4e:	2110      	movs	r1, #16
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8f3 	bl	8002f3c <USB_FlushTxFifo>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f911 	bl	8002f88 <USB_FlushRxFifo>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d76:	461a      	mov	r2, r3
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d82:	461a      	mov	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2300      	movs	r3, #0
 8002d92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e043      	b.n	8002e22 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002db0:	d118      	bne.n	8002de4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10a      	bne.n	8002dce <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	e013      	b.n	8002df6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e008      	b.n	8002df6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002df0:	461a      	mov	r2, r3
 8002df2:	2300      	movs	r3, #0
 8002df4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e02:	461a      	mov	r2, r3
 8002e04:	2300      	movs	r3, #0
 8002e06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e14:	461a      	mov	r2, r3
 8002e16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d3b7      	bcc.n	8002d9a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e043      	b.n	8002eb8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e46:	d118      	bne.n	8002e7a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10a      	bne.n	8002e64 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e013      	b.n	8002e8c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e70:	461a      	mov	r2, r3
 8002e72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e008      	b.n	8002e8c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e86:	461a      	mov	r2, r3
 8002e88:	2300      	movs	r3, #0
 8002e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	015a      	lsls	r2, r3, #5
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4413      	add	r3, r2
 8002ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d3b7      	bcc.n	8002e30 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ed2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002ee0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f043 0210 	orr.w	r2, r3, #16
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <USB_DevInit+0x2c4>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d005      	beq.n	8002f12 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f043 0208 	orr.w	r2, r3, #8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d107      	bne.n	8002f28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f34:	b004      	add	sp, #16
 8002f36:	4770      	bx	lr
 8002f38:	803c3800 	.word	0x803c3800

08002f3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	019b      	lsls	r3, r3, #6
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <USB_FlushTxFifo+0x48>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e006      	b.n	8002f76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	d0f0      	beq.n	8002f56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	00030d40 	.word	0x00030d40

08002f88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2210      	movs	r2, #16
 8002f98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <USB_FlushRxFifo+0x40>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e006      	b.n	8002fba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f003 0310 	and.w	r3, r3, #16
 8002fb4:	2b10      	cmp	r3, #16
 8002fb6:	d0f0      	beq.n	8002f9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	00030d40 	.word	0x00030d40

08002fcc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	68f9      	ldr	r1, [r7, #12]
 8002fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0306 	and.w	r3, r3, #6
 8003016:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
 8003022:	e00a      	b.n	800303a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d002      	beq.n	8003030 <USB_GetDevSpeed+0x32>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b06      	cmp	r3, #6
 800302e:	d102      	bne.n	8003036 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003030:	2302      	movs	r3, #2
 8003032:	75fb      	strb	r3, [r7, #23]
 8003034:	e001      	b.n	800303a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003036:	230f      	movs	r3, #15
 8003038:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d13a      	bne.n	80030da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	68f9      	ldr	r1, [r7, #12]
 800307e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003082:	4313      	orrs	r3, r2
 8003084:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d155      	bne.n	8003148 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	059b      	lsls	r3, r3, #22
 80030be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80030c0:	4313      	orrs	r3, r2
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	0151      	lsls	r1, r2, #5
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	440a      	add	r2, r1
 80030ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e036      	b.n	8003148 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f303 	lsl.w	r3, r1, r3
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d11a      	bne.n	8003148 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	78db      	ldrb	r3, [r3, #3]
 800312c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800312e:	430b      	orrs	r3, r1
 8003130:	4313      	orrs	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	0151      	lsls	r1, r2, #5
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	440a      	add	r2, r1
 800313a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800313e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	785b      	ldrb	r3, [r3, #1]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d161      	bne.n	8003238 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800318a:	d11f      	bne.n	80031cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	0151      	lsls	r1, r2, #5
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	440a      	add	r2, r1
 80031a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	68f9      	ldr	r1, [r7, #12]
 80031e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031ec:	4013      	ands	r3, r2
 80031ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	2101      	movs	r1, #1
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	b29b      	uxth	r3, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	68f9      	ldr	r1, [r7, #12]
 800320c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003210:	4013      	ands	r3, r2
 8003212:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	0159      	lsls	r1, r3, #5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	440b      	add	r3, r1
 800322a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322e:	4619      	mov	r1, r3
 8003230:	4b35      	ldr	r3, [pc, #212]	; (8003308 <USB_DeactivateEndpoint+0x1b0>)
 8003232:	4013      	ands	r3, r2
 8003234:	600b      	str	r3, [r1, #0]
 8003236:	e060      	b.n	80032fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800324a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800324e:	d11f      	bne.n	8003290 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	440a      	add	r2, r1
 8003266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800326a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800326e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	0151      	lsls	r1, r2, #5
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	440a      	add	r2, r1
 8003286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800328a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800328e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	43db      	mvns	r3, r3
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032b0:	4013      	ands	r3, r2
 80032b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ba:	69da      	ldr	r2, [r3, #28]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2101      	movs	r1, #1
 80032c6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ca:	041b      	lsls	r3, r3, #16
 80032cc:	43db      	mvns	r3, r3
 80032ce:	68f9      	ldr	r1, [r7, #12]
 80032d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032d4:	4013      	ands	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	0159      	lsls	r1, r3, #5
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f2:	4619      	mov	r1, r3
 80032f4:	4b05      	ldr	r3, [pc, #20]	; (800330c <USB_DeactivateEndpoint+0x1b4>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	ec337800 	.word	0xec337800
 800330c:	eff37800 	.word	0xeff37800

08003310 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	2b01      	cmp	r3, #1
 800332e:	f040 815c 	bne.w	80035ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d132      	bne.n	80033a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	0151      	lsls	r1, r2, #5
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	440a      	add	r2, r1
 8003350:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003354:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003358:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800335c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	440a      	add	r2, r1
 8003374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800337c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	0151      	lsls	r1, r2, #5
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	440a      	add	r2, r1
 8003394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003398:	0cdb      	lsrs	r3, r3, #19
 800339a:	04db      	lsls	r3, r3, #19
 800339c:	6113      	str	r3, [r2, #16]
 800339e:	e074      	b.n	800348a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	0151      	lsls	r1, r2, #5
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	440a      	add	r2, r1
 80033b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ba:	0cdb      	lsrs	r3, r3, #19
 80033bc:	04db      	lsls	r3, r3, #19
 80033be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	0151      	lsls	r1, r2, #5
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	440a      	add	r2, r1
 80033d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80033de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80033e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	015a      	lsls	r2, r3, #5
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	4413      	add	r3, r2
 80033ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6959      	ldr	r1, [r3, #20]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	440b      	add	r3, r1
 80033fc:	1e59      	subs	r1, r3, #1
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	fbb1 f3f3 	udiv	r3, r1, r3
 8003406:	04d9      	lsls	r1, r3, #19
 8003408:	4b9d      	ldr	r3, [pc, #628]	; (8003680 <USB_EPStartXfer+0x370>)
 800340a:	400b      	ands	r3, r1
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	0148      	lsls	r0, r1, #5
 8003410:	69f9      	ldr	r1, [r7, #28]
 8003412:	4401      	add	r1, r0
 8003414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003418:	4313      	orrs	r3, r2
 800341a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	0148      	lsls	r0, r1, #5
 8003436:	69f9      	ldr	r1, [r7, #28]
 8003438:	4401      	add	r1, r0
 800343a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800343e:	4313      	orrs	r3, r2
 8003440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	78db      	ldrb	r3, [r3, #3]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d11f      	bne.n	800348a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	0151      	lsls	r1, r2, #5
 800345c:	69fa      	ldr	r2, [r7, #28]
 800345e:	440a      	add	r2, r1
 8003460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	0151      	lsls	r1, r2, #5
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	440a      	add	r2, r1
 8003480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d14b      	bne.n	8003528 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d009      	beq.n	80034ac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	461a      	mov	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d128      	bne.n	8003506 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d110      	bne.n	80034e6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	0151      	lsls	r1, r2, #5
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	440a      	add	r2, r1
 80034da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e00f      	b.n	8003506 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	0151      	lsls	r1, r2, #5
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	440a      	add	r2, r1
 80034fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	0151      	lsls	r1, r2, #5
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	440a      	add	r2, r1
 800351c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	e12f      	b.n	8003788 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	440a      	add	r2, r1
 800353e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	78db      	ldrb	r3, [r3, #3]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d015      	beq.n	800357c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8117 	beq.w	8003788 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	69f9      	ldr	r1, [r7, #28]
 8003572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003576:	4313      	orrs	r3, r2
 8003578:	634b      	str	r3, [r1, #52]	; 0x34
 800357a:	e105      	b.n	8003788 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003588:	2b00      	cmp	r3, #0
 800358a:	d110      	bne.n	80035ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	0151      	lsls	r1, r2, #5
 800359e:	69fa      	ldr	r2, [r7, #28]
 80035a0:	440a      	add	r2, r1
 80035a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	e00f      	b.n	80035ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	68d9      	ldr	r1, [r3, #12]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	781a      	ldrb	r2, [r3, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	b298      	uxth	r0, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4603      	mov	r3, r0
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fa2b 	bl	8003a3e <USB_WritePacket>
 80035e8:	e0ce      	b.n	8003788 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	0151      	lsls	r1, r2, #5
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	440a      	add	r2, r1
 8003600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003604:	0cdb      	lsrs	r3, r3, #19
 8003606:	04db      	lsls	r3, r3, #19
 8003608:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	0151      	lsls	r1, r2, #5
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	440a      	add	r2, r1
 8003620:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800362c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d126      	bne.n	8003684 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	4413      	add	r3, r2
 800363e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	0148      	lsls	r0, r1, #5
 8003650:	69f9      	ldr	r1, [r7, #28]
 8003652:	4401      	add	r1, r0
 8003654:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800367a:	6113      	str	r3, [r2, #16]
 800367c:	e036      	b.n	80036ec <USB_EPStartXfer+0x3dc>
 800367e:	bf00      	nop
 8003680:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4413      	add	r3, r2
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	8afb      	ldrh	r3, [r7, #22]
 80036aa:	04d9      	lsls	r1, r3, #19
 80036ac:	4b39      	ldr	r3, [pc, #228]	; (8003794 <USB_EPStartXfer+0x484>)
 80036ae:	400b      	ands	r3, r1
 80036b0:	69b9      	ldr	r1, [r7, #24]
 80036b2:	0148      	lsls	r0, r1, #5
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	4401      	add	r1, r0
 80036b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	8af9      	ldrh	r1, [r7, #22]
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036dc:	69b9      	ldr	r1, [r7, #24]
 80036de:	0148      	lsls	r0, r1, #5
 80036e0:	69f9      	ldr	r1, [r7, #28]
 80036e2:	4401      	add	r1, r0
 80036e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036e8:	4313      	orrs	r3, r2
 80036ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10d      	bne.n	800370e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	68d9      	ldr	r1, [r3, #12]
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800370a:	460a      	mov	r2, r1
 800370c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	78db      	ldrb	r3, [r3, #3]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d128      	bne.n	8003768 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d110      	bne.n	8003748 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	e00f      	b.n	8003768 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	0151      	lsls	r1, r2, #5
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	440a      	add	r2, r1
 800377e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	1ff80000 	.word	0x1ff80000

08003798 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 80cd 	bne.w	8003954 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d132      	bne.n	8003828 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	0151      	lsls	r1, r2, #5
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	440a      	add	r2, r1
 80037d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003800:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	440a      	add	r2, r1
 800381c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003820:	0cdb      	lsrs	r3, r3, #19
 8003822:	04db      	lsls	r3, r3, #19
 8003824:	6113      	str	r3, [r2, #16]
 8003826:	e04e      	b.n	80038c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	0151      	lsls	r1, r2, #5
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	440a      	add	r2, r1
 800383e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003842:	0cdb      	lsrs	r3, r3, #19
 8003844:	04db      	lsls	r3, r3, #19
 8003846:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003862:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003866:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800386a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	d903      	bls.n	8003880 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	4413      	add	r3, r2
 8003888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	440a      	add	r2, r1
 8003896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800389a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800389e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	6939      	ldr	r1, [r7, #16]
 80038b8:	0148      	lsls	r0, r1, #5
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	4401      	add	r1, r0
 80038be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038c2:	4313      	orrs	r3, r2
 80038c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d11e      	bne.n	800390a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	0151      	lsls	r1, r2, #5
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	440a      	add	r2, r1
 80038fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003902:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	e092      	b.n	8003a30 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	0151      	lsls	r1, r2, #5
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	440a      	add	r2, r1
 8003920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003924:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003928:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d07e      	beq.n	8003a30 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f303 	lsl.w	r3, r1, r3
 8003948:	6979      	ldr	r1, [r7, #20]
 800394a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800394e:	4313      	orrs	r3, r2
 8003950:	634b      	str	r3, [r1, #52]	; 0x34
 8003952:	e06d      	b.n	8003a30 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	0151      	lsls	r1, r2, #5
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	440a      	add	r2, r1
 800396a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800396e:	0cdb      	lsrs	r3, r3, #19
 8003970:	04db      	lsls	r3, r3, #19
 8003972:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	0151      	lsls	r1, r2, #5
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	440a      	add	r2, r1
 800398a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800398e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003992:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003996:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	0151      	lsls	r1, r2, #5
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	440a      	add	r2, r1
 80039be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	691a      	ldr	r2, [r3, #16]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039de:	6939      	ldr	r1, [r7, #16]
 80039e0:	0148      	lsls	r0, r1, #5
 80039e2:	6979      	ldr	r1, [r7, #20]
 80039e4:	4401      	add	r1, r0
 80039e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10d      	bne.n	8003a10 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68d9      	ldr	r1, [r3, #12]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	0151      	lsls	r1, r2, #5
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	440a      	add	r2, r1
 8003a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b089      	sub	sp, #36	; 0x24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d11a      	bne.n	8003a9a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a64:	88bb      	ldrh	r3, [r7, #4]
 8003a66:	3303      	adds	r3, #3
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e00f      	b.n	8003a92 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	031a      	lsls	r2, r3, #12
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	461a      	mov	r2, r3
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	3304      	adds	r3, #4
 8003a8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3eb      	bcc.n	8003a72 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3724      	adds	r7, #36	; 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	; 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	3303      	adds	r3, #3
 8003ac2:	089b      	lsrs	r3, r3, #2
 8003ac4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e00b      	b.n	8003ae4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	3304      	adds	r3, #4
 8003adc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3ef      	bcc.n	8003acc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003aec:	69fb      	ldr	r3, [r7, #28]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3724      	adds	r7, #36	; 0x24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	785b      	ldrb	r3, [r3, #1]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d12c      	bne.n	8003b70 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	db12      	blt.n	8003b4e <USB_EPSetStall+0x54>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00f      	beq.n	8003b4e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	0151      	lsls	r1, r2, #5
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	440a      	add	r2, r1
 8003b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b4c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	015a      	lsls	r2, r3, #5
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	0151      	lsls	r1, r2, #5
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	440a      	add	r2, r1
 8003b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e02b      	b.n	8003bc8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db12      	blt.n	8003ba8 <USB_EPSetStall+0xae>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00f      	beq.n	8003ba8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	0151      	lsls	r1, r2, #5
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	440a      	add	r2, r1
 8003b9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ba2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ba6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	0151      	lsls	r1, r2, #5
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	440a      	add	r2, r1
 8003bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b085      	sub	sp, #20
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d128      	bne.n	8003c44 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	78db      	ldrb	r3, [r3, #3]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d003      	beq.n	8003c22 <USB_EPClearStall+0x4c>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	78db      	ldrb	r3, [r3, #3]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d138      	bne.n	8003c94 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e027      	b.n	8003c94 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	78db      	ldrb	r3, [r3, #3]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d003      	beq.n	8003c74 <USB_EPClearStall+0x9e>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	78db      	ldrb	r3, [r3, #3]
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d10f      	bne.n	8003c94 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c92:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003cc4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d08:	f023 0303 	bic.w	r3, r3, #3
 8003d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1c:	f023 0302 	bic.w	r3, r3, #2
 8003d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5e:	f043 0302 	orr.w	r3, r3, #2
 8003d62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4013      	ands	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	0c1b      	lsrs	r3, r3, #16
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	b29b      	uxth	r3, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	01db      	lsls	r3, r3, #7
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003e76:	78fb      	ldrb	r3, [r7, #3]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	371c      	adds	r7, #28
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ece:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	460b      	mov	r3, r1
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	333c      	adds	r3, #60	; 0x3c
 8003f12:	3304      	adds	r3, #4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4a26      	ldr	r2, [pc, #152]	; (8003fb4 <USB_EP0_OutStart+0xb8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d90a      	bls.n	8003f36 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f30:	d101      	bne.n	8003f36 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e037      	b.n	8003fa6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f64:	f043 0318 	orr.w	r3, r3, #24
 8003f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f78:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003f7c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003f7e:	7afb      	ldrb	r3, [r7, #11]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10f      	bne.n	8003fa4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f9e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003fa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	4f54300a 	.word	0x4f54300a

08003fb8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <USB_CoreReset+0x64>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e01b      	b.n	800400e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	daf2      	bge.n	8003fc4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a09      	ldr	r2, [pc, #36]	; (800401c <USB_CoreReset+0x64>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e006      	b.n	800400e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d0f0      	beq.n	8003fee <USB_CoreReset+0x36>

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	00030d40 	.word	0x00030d40

08004020 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	460b      	mov	r3, r1
 800402a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800402c:	2010      	movs	r0, #16
 800402e:	f001 ff0d 	bl	8005e4c <USBD_static_malloc>
 8004032:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <USBD_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004042:	2302      	movs	r3, #2
 8004044:	e01b      	b.n	800407e <USBD_HID_Init+0x5e>
  }

  pdev->pClassData = (void *)hhid;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7c1b      	ldrb	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <USBD_HID_Init+0x3e>
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2207      	movs	r2, #7
 800405a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800405c:	e002      	b.n	8004064 <USBD_HID_Init+0x44>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = HID_FS_BINTERVAL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	220a      	movs	r2, #10
 8004062:	875a      	strh	r2, [r3, #58]	; 0x3a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004064:	2304      	movs	r3, #4
 8004066:	2203      	movs	r2, #3
 8004068:	2181      	movs	r1, #129	; 0x81
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 fddd 	bl	8005c2a <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	871a      	strh	r2, [r3, #56]	; 0x38

  hhid->state = HID_IDLE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	460b      	mov	r3, r1
 8004090:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8004092:	2181      	movs	r1, #129	; 0x81
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 fdee 	bl	8005c76 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d009      	beq.n	80040c4 <USBD_HID_DeInit+0x3e>
  {
    (void)USBD_free(pdev->pClassData);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040b6:	4618      	mov	r0, r3
 80040b8:	f001 fed6 	bl	8005e68 <USBD_static_free>
    pdev->pClassData = NULL;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040e0:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <USBD_HID_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0e8      	b.n	80042c6 <USBD_HID_Setup+0x1f6>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d046      	beq.n	800418e <USBD_HID_Setup+0xbe>
 8004100:	2b20      	cmp	r3, #32
 8004102:	f040 80d8 	bne.w	80042b6 <USBD_HID_Setup+0x1e6>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	3b02      	subs	r3, #2
 800410c:	2b09      	cmp	r3, #9
 800410e:	d836      	bhi.n	800417e <USBD_HID_Setup+0xae>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <USBD_HID_Setup+0x48>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800416f 	.word	0x0800416f
 800411c:	0800414f 	.word	0x0800414f
 8004120:	0800417f 	.word	0x0800417f
 8004124:	0800417f 	.word	0x0800417f
 8004128:	0800417f 	.word	0x0800417f
 800412c:	0800417f 	.word	0x0800417f
 8004130:	0800417f 	.word	0x0800417f
 8004134:	0800417f 	.word	0x0800417f
 8004138:	0800415d 	.word	0x0800415d
 800413c:	08004141 	.word	0x08004141
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	885b      	ldrh	r3, [r3, #2]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]
          break;
 800414c:	e01e      	b.n	800418c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f001 fa22 	bl	800559e <USBD_CtlSendData>
          break;
 800415a:	e017      	b.n	800418c <USBD_HID_Setup+0xbc>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	885b      	ldrh	r3, [r3, #2]
 8004160:	0a1b      	lsrs	r3, r3, #8
 8004162:	b29b      	uxth	r3, r3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
          break;
 800416c:	e00e      	b.n	800418c <USBD_HID_Setup+0xbc>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	3304      	adds	r3, #4
 8004172:	2201      	movs	r2, #1
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f001 fa11 	bl	800559e <USBD_CtlSendData>
          break;
 800417c:	e006      	b.n	800418c <USBD_HID_Setup+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f001 f99b 	bl	80054bc <USBD_CtlError>
          ret = USBD_FAIL;
 8004186:	2303      	movs	r3, #3
 8004188:	75fb      	strb	r3, [r7, #23]
          break;
 800418a:	bf00      	nop
      }
      break;
 800418c:	e09a      	b.n	80042c4 <USBD_HID_Setup+0x1f4>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	2b0b      	cmp	r3, #11
 8004194:	f200 8086 	bhi.w	80042a4 <USBD_HID_Setup+0x1d4>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <USBD_HID_Setup+0xd0>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041d1 	.word	0x080041d1
 80041a4:	080042b3 	.word	0x080042b3
 80041a8:	080042a5 	.word	0x080042a5
 80041ac:	080042a5 	.word	0x080042a5
 80041b0:	080042a5 	.word	0x080042a5
 80041b4:	080042a5 	.word	0x080042a5
 80041b8:	080041fb 	.word	0x080041fb
 80041bc:	080042a5 	.word	0x080042a5
 80041c0:	080042a5 	.word	0x080042a5
 80041c4:	080042a5 	.word	0x080042a5
 80041c8:	08004253 	.word	0x08004253
 80041cc:	0800427d 	.word	0x0800427d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d107      	bne.n	80041ec <USBD_HID_Setup+0x11c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80041dc:	f107 030a 	add.w	r3, r7, #10
 80041e0:	2202      	movs	r2, #2
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 f9da 	bl	800559e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80041ea:	e063      	b.n	80042b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 80041ec:	6839      	ldr	r1, [r7, #0]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f001 f964 	bl	80054bc <USBD_CtlError>
            ret = USBD_FAIL;
 80041f4:	2303      	movs	r3, #3
 80041f6:	75fb      	strb	r3, [r7, #23]
          break;
 80041f8:	e05c      	b.n	80042b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	885b      	ldrh	r3, [r3, #2]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b22      	cmp	r3, #34	; 0x22
 8004204:	d108      	bne.n	8004218 <USBD_HID_Setup+0x148>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	88db      	ldrh	r3, [r3, #6]
 800420a:	2b4a      	cmp	r3, #74	; 0x4a
 800420c:	bf28      	it	cs
 800420e:	234a      	movcs	r3, #74	; 0x4a
 8004210:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <USBD_HID_Setup+0x200>)
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	e015      	b.n	8004244 <USBD_HID_Setup+0x174>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	885b      	ldrh	r3, [r3, #2]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d108      	bne.n	8004236 <USBD_HID_Setup+0x166>
          {
            pbuf = USBD_HID_Desc;
 8004224:	4b2b      	ldr	r3, [pc, #172]	; (80042d4 <USBD_HID_Setup+0x204>)
 8004226:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	88db      	ldrh	r3, [r3, #6]
 800422c:	2b09      	cmp	r3, #9
 800422e:	bf28      	it	cs
 8004230:	2309      	movcs	r3, #9
 8004232:	82bb      	strh	r3, [r7, #20]
 8004234:	e006      	b.n	8004244 <USBD_HID_Setup+0x174>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f001 f93f 	bl	80054bc <USBD_CtlError>
            ret = USBD_FAIL;
 800423e:	2303      	movs	r3, #3
 8004240:	75fb      	strb	r3, [r7, #23]
            break;
 8004242:	e037      	b.n	80042b4 <USBD_HID_Setup+0x1e4>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8004244:	8abb      	ldrh	r3, [r7, #20]
 8004246:	461a      	mov	r2, r3
 8004248:	6939      	ldr	r1, [r7, #16]
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f001 f9a7 	bl	800559e <USBD_CtlSendData>
          break;
 8004250:	e030      	b.n	80042b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <USBD_HID_Setup+0x19e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3308      	adds	r3, #8
 8004262:	2201      	movs	r2, #1
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f001 f999 	bl	800559e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800426c:	e022      	b.n	80042b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 800426e:	6839      	ldr	r1, [r7, #0]
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f001 f923 	bl	80054bc <USBD_CtlError>
            ret = USBD_FAIL;
 8004276:	2303      	movs	r3, #3
 8004278:	75fb      	strb	r3, [r7, #23]
          break;
 800427a:	e01b      	b.n	80042b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b03      	cmp	r3, #3
 8004286:	d106      	bne.n	8004296 <USBD_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	885b      	ldrh	r3, [r3, #2]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004294:	e00e      	b.n	80042b4 <USBD_HID_Setup+0x1e4>
            USBD_CtlError(pdev, req);
 8004296:	6839      	ldr	r1, [r7, #0]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f001 f90f 	bl	80054bc <USBD_CtlError>
            ret = USBD_FAIL;
 800429e:	2303      	movs	r3, #3
 80042a0:	75fb      	strb	r3, [r7, #23]
          break;
 80042a2:	e007      	b.n	80042b4 <USBD_HID_Setup+0x1e4>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80042a4:	6839      	ldr	r1, [r7, #0]
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f001 f908 	bl	80054bc <USBD_CtlError>
          ret = USBD_FAIL;
 80042ac:	2303      	movs	r3, #3
 80042ae:	75fb      	strb	r3, [r7, #23]
          break;
 80042b0:	e000      	b.n	80042b4 <USBD_HID_Setup+0x1e4>
          break;
 80042b2:	bf00      	nop
      }
      break;
 80042b4:	e006      	b.n	80042c4 <USBD_HID_Setup+0x1f4>

    default:
      USBD_CtlError(pdev, req);
 80042b6:	6839      	ldr	r1, [r7, #0]
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f001 f8ff 	bl	80054bc <USBD_CtlError>
      ret = USBD_FAIL;
 80042be:	2303      	movs	r3, #3
 80042c0:	75fb      	strb	r3, [r7, #23]
      break;
 80042c2:	bf00      	nop
  }

  return (uint8_t)ret;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200000c8 	.word	0x200000c8
 80042d4:	200000b0 	.word	0x200000b0

080042d8 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042ec:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <USBD_HID_SendReport+0x20>
  {
    return (uint8_t)USBD_FAIL;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e013      	b.n	8004320 <USBD_HID_SendReport+0x48>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b03      	cmp	r3, #3
 8004302:	d10c      	bne.n	800431e <USBD_HID_SendReport+0x46>
  {
    if (hhid->state == HID_IDLE)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	7b1b      	ldrb	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d108      	bne.n	800431e <USBD_HID_SendReport+0x46>
    {
      hhid->state = HID_BUSY;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2201      	movs	r2, #1
 8004310:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HID_EPIN_ADDR, report, len);
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	2181      	movs	r1, #129	; 0x81
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f001 fd54 	bl	8005dc6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgFSDesc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2222      	movs	r2, #34	; 0x22
 8004334:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgFSDesc;
 8004336:	4b03      	ldr	r3, [pc, #12]	; (8004344 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	20000044 	.word	0x20000044

08004348 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_CfgHSDesc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2222      	movs	r2, #34	; 0x22
 8004354:	801a      	strh	r2, [r3, #0]

  return USBD_HID_CfgHSDesc;
 8004356:	4b03      	ldr	r3, [pc, #12]	; (8004364 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	20000068 	.word	0x20000068

08004368 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_OtherSpeedCfgDesc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2222      	movs	r2, #34	; 0x22
 8004374:	801a      	strh	r2, [r3, #0]

  return USBD_HID_OtherSpeedCfgDesc;
 8004376:	4b03      	ldr	r3, [pc, #12]	; (8004384 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	2000008c 	.word	0x2000008c

08004388 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800439a:	2200      	movs	r2, #0
 800439c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	220a      	movs	r2, #10
 80043b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80043ba:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	200000bc 	.word	0x200000bc

080043cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e01f      	b.n	8004424 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	79fa      	ldrb	r2, [r7, #7]
 8004416:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f001 fb9f 	bl	8005b5c <USBD_LL_Init>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004440:	2303      	movs	r3, #3
 8004442:	e016      	b.n	8004472 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00b      	beq.n	8004470 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	f107 020e 	add.w	r2, r7, #14
 8004464:	4610      	mov	r0, r2
 8004466:	4798      	blx	r3
 8004468:	4602      	mov	r2, r0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b082      	sub	sp, #8
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f001 fbb6 	bl	8005bf4 <USBD_LL_Start>
 8004488:	4603      	mov	r3, r0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80044b4:	2303      	movs	r3, #3
 80044b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	4611      	mov	r1, r2
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	4798      	blx	r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	4611      	mov	r1, r2
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
  }

  return USBD_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004520:	6839      	ldr	r1, [r7, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 ff90 	bl	8005448 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2b02      	cmp	r3, #2
 800454a:	d01a      	beq.n	8004582 <USBD_LL_SetupStage+0x72>
 800454c:	2b02      	cmp	r3, #2
 800454e:	d822      	bhi.n	8004596 <USBD_LL_SetupStage+0x86>
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <USBD_LL_SetupStage+0x4a>
 8004554:	2b01      	cmp	r3, #1
 8004556:	d00a      	beq.n	800456e <USBD_LL_SetupStage+0x5e>
 8004558:	e01d      	b.n	8004596 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004560:	4619      	mov	r1, r3
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa62 	bl	8004a2c <USBD_StdDevReq>
 8004568:	4603      	mov	r3, r0
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	e020      	b.n	80045b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fac6 	bl	8004b08 <USBD_StdItfReq>
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
      break;
 8004580:	e016      	b.n	80045b0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fb05 	bl	8004b9a <USBD_StdEPReq>
 8004590:	4603      	mov	r3, r0
 8004592:	73fb      	strb	r3, [r7, #15]
      break;
 8004594:	e00c      	b.n	80045b0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800459c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f001 fb85 	bl	8005cb4 <USBD_LL_StallEP>
 80045aa:	4603      	mov	r3, r0
 80045ac:	73fb      	strb	r3, [r7, #15]
      break;
 80045ae:	bf00      	nop
  }

  return ret;
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b086      	sub	sp, #24
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	460b      	mov	r3, r1
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d138      	bne.n	8004640 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80045d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045dc:	2b03      	cmp	r3, #3
 80045de:	d14a      	bne.n	8004676 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d913      	bls.n	8004614 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	1ad2      	subs	r2, r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	4293      	cmp	r3, r2
 8004604:	bf28      	it	cs
 8004606:	4613      	movcs	r3, r2
 8004608:	461a      	mov	r2, r3
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fff2 	bl	80055f6 <USBD_CtlContinueRx>
 8004612:	e030      	b.n	8004676 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b03      	cmp	r3, #3
 800461e:	d10b      	bne.n	8004638 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 ffed 	bl	8005618 <USBD_CtlSendStatus>
 800463e:	e01a      	b.n	8004676 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b03      	cmp	r3, #3
 800464a:	d114      	bne.n	8004676 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00e      	beq.n	8004676 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	7afa      	ldrb	r2, [r7, #11]
 8004662:	4611      	mov	r1, r2
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	4798      	blx	r3
 8004668:	4603      	mov	r3, r0
 800466a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004672:	7dfb      	ldrb	r3, [r7, #23]
 8004674:	e000      	b.n	8004678 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	460b      	mov	r3, r1
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800468e:	7afb      	ldrb	r3, [r7, #11]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d16b      	bne.n	800476c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3314      	adds	r3, #20
 8004698:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d156      	bne.n	8004752 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d914      	bls.n	80046da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 ff84 	bl	80055d4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80046cc:	2300      	movs	r3, #0
 80046ce:	2200      	movs	r2, #0
 80046d0:	2100      	movs	r1, #0
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f001 fb98 	bl	8005e08 <USBD_LL_PrepareReceive>
 80046d8:	e03b      	b.n	8004752 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	68da      	ldr	r2, [r3, #12]
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d11c      	bne.n	8004720 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d316      	bcc.n	8004720 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d20f      	bcs.n	8004720 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 ff65 	bl	80055d4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004712:	2300      	movs	r3, #0
 8004714:	2200      	movs	r2, #0
 8004716:	2100      	movs	r1, #0
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f001 fb75 	bl	8005e08 <USBD_LL_PrepareReceive>
 800471e:	e018      	b.n	8004752 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b03      	cmp	r3, #3
 800472a:	d10b      	bne.n	8004744 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004744:	2180      	movs	r1, #128	; 0x80
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f001 fab4 	bl	8005cb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 ff76 	bl	800563e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004758:	2b01      	cmp	r3, #1
 800475a:	d122      	bne.n	80047a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f7ff fe98 	bl	8004492 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800476a:	e01a      	b.n	80047a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b03      	cmp	r3, #3
 8004776:	d114      	bne.n	80047a2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00e      	beq.n	80047a2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	7afa      	ldrb	r2, [r7, #11]
 800478e:	4611      	mov	r1, r2
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	4798      	blx	r3
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004798:	7dfb      	ldrb	r3, [r7, #23]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	e000      	b.n	80047a4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80047dc:	2303      	movs	r3, #3
 80047de:	e02f      	b.n	8004840 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00f      	beq.n	800480a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d009      	beq.n	800480a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6852      	ldr	r2, [r2, #4]
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	4611      	mov	r1, r2
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800480a:	2340      	movs	r3, #64	; 0x40
 800480c:	2200      	movs	r2, #0
 800480e:	2100      	movs	r1, #0
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f001 fa0a 	bl	8005c2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004826:	2340      	movs	r3, #64	; 0x40
 8004828:	2200      	movs	r2, #0
 800482a:	2180      	movs	r1, #128	; 0x80
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f001 f9fc 	bl	8005c2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2204      	movs	r2, #4
 8004882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d106      	bne.n	80048b6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e012      	b.n	8004900 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d10b      	bne.n	80048fe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800491e:	2303      	movs	r3, #3
 8004920:	e014      	b.n	800494c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b03      	cmp	r3, #3
 800492c:	d10d      	bne.n	800494a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	4611      	mov	r1, r2
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800496a:	2303      	movs	r3, #3
 800496c:	e014      	b.n	8004998 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b03      	cmp	r3, #3
 8004978:	d10d      	bne.n	8004996 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	4611      	mov	r1, r2
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d009      	beq.n	80049e4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6852      	ldr	r2, [r2, #4]
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	4611      	mov	r1, r2
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
  }

  return USBD_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b087      	sub	sp, #28
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	3301      	adds	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004a0c:	8a3b      	ldrh	r3, [r7, #16]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	b21a      	sxth	r2, r3
 8004a12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d005      	beq.n	8004a52 <USBD_StdDevReq+0x26>
 8004a46:	2b40      	cmp	r3, #64	; 0x40
 8004a48:	d853      	bhi.n	8004af2 <USBD_StdDevReq+0xc6>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <USBD_StdDevReq+0x3a>
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d14f      	bne.n	8004af2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	6839      	ldr	r1, [r7, #0]
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e04a      	b.n	8004afc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	785b      	ldrb	r3, [r3, #1]
 8004a6a:	2b09      	cmp	r3, #9
 8004a6c:	d83b      	bhi.n	8004ae6 <USBD_StdDevReq+0xba>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <USBD_StdDevReq+0x48>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004ac9 	.word	0x08004ac9
 8004a78:	08004add 	.word	0x08004add
 8004a7c:	08004ae7 	.word	0x08004ae7
 8004a80:	08004ad3 	.word	0x08004ad3
 8004a84:	08004ae7 	.word	0x08004ae7
 8004a88:	08004aa7 	.word	0x08004aa7
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004ae7 	.word	0x08004ae7
 8004a94:	08004abf 	.word	0x08004abf
 8004a98:	08004ab1 	.word	0x08004ab1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004a9c:	6839      	ldr	r1, [r7, #0]
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f9de 	bl	8004e60 <USBD_GetDescriptor>
          break;
 8004aa4:	e024      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb43 	bl	8005134 <USBD_SetAddress>
          break;
 8004aae:	e01f      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb82 	bl	80051bc <USBD_SetConfig>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
          break;
 8004abc:	e018      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004abe:	6839      	ldr	r1, [r7, #0]
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fc21 	bl	8005308 <USBD_GetConfig>
          break;
 8004ac6:	e013      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 fc52 	bl	8005374 <USBD_GetStatus>
          break;
 8004ad0:	e00e      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 fc81 	bl	80053dc <USBD_SetFeature>
          break;
 8004ada:	e009      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fc90 	bl	8005404 <USBD_ClrFeature>
          break;
 8004ae4:	e004      	b.n	8004af0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fce7 	bl	80054bc <USBD_CtlError>
          break;
 8004aee:	bf00      	nop
      }
      break;
 8004af0:	e004      	b.n	8004afc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8004af2:	6839      	ldr	r1, [r7, #0]
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fce1 	bl	80054bc <USBD_CtlError>
      break;
 8004afa:	bf00      	nop
  }

  return ret;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d005      	beq.n	8004b2e <USBD_StdItfReq+0x26>
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d82f      	bhi.n	8004b86 <USBD_StdItfReq+0x7e>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <USBD_StdItfReq+0x26>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d12b      	bne.n	8004b86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d81d      	bhi.n	8004b78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	889b      	ldrh	r3, [r3, #4]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d813      	bhi.n	8004b6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	6839      	ldr	r1, [r7, #0]
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	88db      	ldrh	r3, [r3, #6]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d110      	bne.n	8004b82 <USBD_StdItfReq+0x7a>
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fd56 	bl	8005618 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004b6c:	e009      	b.n	8004b82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 fca3 	bl	80054bc <USBD_CtlError>
          break;
 8004b76:	e004      	b.n	8004b82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 fc9e 	bl	80054bc <USBD_CtlError>
          break;
 8004b80:	e000      	b.n	8004b84 <USBD_StdItfReq+0x7c>
          break;
 8004b82:	bf00      	nop
      }
      break;
 8004b84:	e004      	b.n	8004b90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fc97 	bl	80054bc <USBD_CtlError>
      break;
 8004b8e:	bf00      	nop
  }

  return ret;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	889b      	ldrh	r3, [r3, #4]
 8004bac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bb6:	2b40      	cmp	r3, #64	; 0x40
 8004bb8:	d007      	beq.n	8004bca <USBD_StdEPReq+0x30>
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	f200 8145 	bhi.w	8004e4a <USBD_StdEPReq+0x2b0>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00c      	beq.n	8004bde <USBD_StdEPReq+0x44>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	f040 8140 	bne.w	8004e4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
      break;
 8004bdc:	e13a      	b.n	8004e54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d007      	beq.n	8004bf6 <USBD_StdEPReq+0x5c>
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	f300 8129 	bgt.w	8004e3e <USBD_StdEPReq+0x2a4>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d07f      	beq.n	8004cf0 <USBD_StdEPReq+0x156>
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d03c      	beq.n	8004c6e <USBD_StdEPReq+0xd4>
 8004bf4:	e123      	b.n	8004e3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d002      	beq.n	8004c08 <USBD_StdEPReq+0x6e>
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d016      	beq.n	8004c34 <USBD_StdEPReq+0x9a>
 8004c06:	e02c      	b.n	8004c62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <USBD_StdEPReq+0x90>
 8004c0e:	7bbb      	ldrb	r3, [r7, #14]
 8004c10:	2b80      	cmp	r3, #128	; 0x80
 8004c12:	d00a      	beq.n	8004c2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c14:	7bbb      	ldrb	r3, [r7, #14]
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 f84b 	bl	8005cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c1e:	2180      	movs	r1, #128	; 0x80
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 f847 	bl	8005cb4 <USBD_LL_StallEP>
 8004c26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004c28:	e020      	b.n	8004c6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fc45 	bl	80054bc <USBD_CtlError>
              break;
 8004c32:	e01b      	b.n	8004c6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	885b      	ldrh	r3, [r3, #2]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10e      	bne.n	8004c5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004c3c:	7bbb      	ldrb	r3, [r7, #14]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00b      	beq.n	8004c5a <USBD_StdEPReq+0xc0>
 8004c42:	7bbb      	ldrb	r3, [r7, #14]
 8004c44:	2b80      	cmp	r3, #128	; 0x80
 8004c46:	d008      	beq.n	8004c5a <USBD_StdEPReq+0xc0>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	88db      	ldrh	r3, [r3, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d104      	bne.n	8004c5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c50:	7bbb      	ldrb	r3, [r7, #14]
 8004c52:	4619      	mov	r1, r3
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f001 f82d 	bl	8005cb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fcdc 	bl	8005618 <USBD_CtlSendStatus>

              break;
 8004c60:	e004      	b.n	8004c6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8004c62:	6839      	ldr	r1, [r7, #0]
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fc29 	bl	80054bc <USBD_CtlError>
              break;
 8004c6a:	bf00      	nop
          }
          break;
 8004c6c:	e0ec      	b.n	8004e48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d002      	beq.n	8004c80 <USBD_StdEPReq+0xe6>
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d016      	beq.n	8004cac <USBD_StdEPReq+0x112>
 8004c7e:	e030      	b.n	8004ce2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004c80:	7bbb      	ldrb	r3, [r7, #14]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00d      	beq.n	8004ca2 <USBD_StdEPReq+0x108>
 8004c86:	7bbb      	ldrb	r3, [r7, #14]
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d00a      	beq.n	8004ca2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f001 f80f 	bl	8005cb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8004c96:	2180      	movs	r1, #128	; 0x80
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f001 f80b 	bl	8005cb4 <USBD_LL_StallEP>
 8004c9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004ca0:	e025      	b.n	8004cee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8004ca2:	6839      	ldr	r1, [r7, #0]
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fc09 	bl	80054bc <USBD_CtlError>
              break;
 8004caa:	e020      	b.n	8004cee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	885b      	ldrh	r3, [r3, #2]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11b      	bne.n	8004cec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d004      	beq.n	8004cc8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004cbe:	7bbb      	ldrb	r3, [r7, #14]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f815 	bl	8005cf2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fca5 	bl	8005618 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
 8004cdc:	4603      	mov	r3, r0
 8004cde:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8004ce0:	e004      	b.n	8004cec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8004ce2:	6839      	ldr	r1, [r7, #0]
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fbe9 	bl	80054bc <USBD_CtlError>
              break;
 8004cea:	e000      	b.n	8004cee <USBD_StdEPReq+0x154>
              break;
 8004cec:	bf00      	nop
          }
          break;
 8004cee:	e0ab      	b.n	8004e48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d002      	beq.n	8004d02 <USBD_StdEPReq+0x168>
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d032      	beq.n	8004d66 <USBD_StdEPReq+0x1cc>
 8004d00:	e097      	b.n	8004e32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d02:	7bbb      	ldrb	r3, [r7, #14]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <USBD_StdEPReq+0x17e>
 8004d08:	7bbb      	ldrb	r3, [r7, #14]
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d004      	beq.n	8004d18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8004d0e:	6839      	ldr	r1, [r7, #0]
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fbd3 	bl	80054bc <USBD_CtlError>
                break;
 8004d16:	e091      	b.n	8004e3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da0b      	bge.n	8004d38 <USBD_StdEPReq+0x19e>
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	3310      	adds	r3, #16
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	3304      	adds	r3, #4
 8004d36:	e00b      	b.n	8004d50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004d38:	7bbb      	ldrb	r3, [r7, #14]
 8004d3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3304      	adds	r3, #4
 8004d50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fc1d 	bl	800559e <USBD_CtlSendData>
              break;
 8004d64:	e06a      	b.n	8004e3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004d66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da11      	bge.n	8004d92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004d6e:	7bbb      	ldrb	r3, [r7, #14]
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d117      	bne.n	8004db8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004d88:	6839      	ldr	r1, [r7, #0]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fb96 	bl	80054bc <USBD_CtlError>
                  break;
 8004d90:	e054      	b.n	8004e3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004d92:	7bbb      	ldrb	r3, [r7, #14]
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d104      	bne.n	8004db8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fb83 	bl	80054bc <USBD_CtlError>
                  break;
 8004db6:	e041      	b.n	8004e3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	da0b      	bge.n	8004dd8 <USBD_StdEPReq+0x23e>
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
 8004dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3310      	adds	r3, #16
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	e00b      	b.n	8004df0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004dd8:	7bbb      	ldrb	r3, [r7, #14]
 8004dda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	3304      	adds	r3, #4
 8004df0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004df2:	7bbb      	ldrb	r3, [r7, #14]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <USBD_StdEPReq+0x264>
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	2b80      	cmp	r3, #128	; 0x80
 8004dfc:	d103      	bne.n	8004e06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e00e      	b.n	8004e24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004e06:	7bbb      	ldrb	r3, [r7, #14]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 ff90 	bl	8005d30 <USBD_LL_IsStallEP>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d003      	beq.n	8004e1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	e002      	b.n	8004e24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2202      	movs	r2, #2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fbb7 	bl	800559e <USBD_CtlSendData>
              break;
 8004e30:	e004      	b.n	8004e3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8004e32:	6839      	ldr	r1, [r7, #0]
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fb41 	bl	80054bc <USBD_CtlError>
              break;
 8004e3a:	bf00      	nop
          }
          break;
 8004e3c:	e004      	b.n	8004e48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb3b 	bl	80054bc <USBD_CtlError>
          break;
 8004e46:	bf00      	nop
      }
      break;
 8004e48:	e004      	b.n	8004e54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8004e4a:	6839      	ldr	r1, [r7, #0]
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fb35 	bl	80054bc <USBD_CtlError>
      break;
 8004e52:	bf00      	nop
  }

  return ret;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	885b      	ldrh	r3, [r3, #2]
 8004e7a:	0a1b      	lsrs	r3, r3, #8
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	f200 8128 	bhi.w	80050d6 <USBD_GetDescriptor+0x276>
 8004e86:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <USBD_GetDescriptor+0x2c>)
 8004e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8c:	08004ea9 	.word	0x08004ea9
 8004e90:	08004ec1 	.word	0x08004ec1
 8004e94:	08004f01 	.word	0x08004f01
 8004e98:	080050d7 	.word	0x080050d7
 8004e9c:	080050d7 	.word	0x080050d7
 8004ea0:	08005077 	.word	0x08005077
 8004ea4:	080050a3 	.word	0x080050a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	7c12      	ldrb	r2, [r2, #16]
 8004eb4:	f107 0108 	add.w	r1, r7, #8
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4798      	blx	r3
 8004ebc:	60f8      	str	r0, [r7, #12]
      break;
 8004ebe:	e112      	b.n	80050e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7c1b      	ldrb	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10d      	bne.n	8004ee4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	f107 0208 	add.w	r2, r7, #8
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
 8004ed8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	2202      	movs	r2, #2
 8004ee0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004ee2:	e100      	b.n	80050e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	f107 0208 	add.w	r2, r7, #8
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	4798      	blx	r3
 8004ef4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	2202      	movs	r2, #2
 8004efc:	701a      	strb	r2, [r3, #0]
      break;
 8004efe:	e0f2      	b.n	80050e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	885b      	ldrh	r3, [r3, #2]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	f200 80ac 	bhi.w	8005064 <USBD_GetDescriptor+0x204>
 8004f0c:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <USBD_GetDescriptor+0xb4>)
 8004f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f12:	bf00      	nop
 8004f14:	08004f2d 	.word	0x08004f2d
 8004f18:	08004f61 	.word	0x08004f61
 8004f1c:	08004f95 	.word	0x08004f95
 8004f20:	08004fc9 	.word	0x08004fc9
 8004f24:	08004ffd 	.word	0x08004ffd
 8004f28:	08005031 	.word	0x08005031
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	7c12      	ldrb	r2, [r2, #16]
 8004f44:	f107 0108 	add.w	r1, r7, #8
 8004f48:	4610      	mov	r0, r2
 8004f4a:	4798      	blx	r3
 8004f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f4e:	e091      	b.n	8005074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fab2 	bl	80054bc <USBD_CtlError>
            err++;
 8004f58:	7afb      	ldrb	r3, [r7, #11]
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8004f5e:	e089      	b.n	8005074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00b      	beq.n	8004f84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	7c12      	ldrb	r2, [r2, #16]
 8004f78:	f107 0108 	add.w	r1, r7, #8
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4798      	blx	r3
 8004f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004f82:	e077      	b.n	8005074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004f84:	6839      	ldr	r1, [r7, #0]
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa98 	bl	80054bc <USBD_CtlError>
            err++;
 8004f8c:	7afb      	ldrb	r3, [r7, #11]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	72fb      	strb	r3, [r7, #11]
          break;
 8004f92:	e06f      	b.n	8005074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	7c12      	ldrb	r2, [r2, #16]
 8004fac:	f107 0108 	add.w	r1, r7, #8
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4798      	blx	r3
 8004fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004fb6:	e05d      	b.n	8005074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 fa7e 	bl	80054bc <USBD_CtlError>
            err++;
 8004fc0:	7afb      	ldrb	r3, [r7, #11]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8004fc6:	e055      	b.n	8005074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	7c12      	ldrb	r2, [r2, #16]
 8004fe0:	f107 0108 	add.w	r1, r7, #8
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004fea:	e043      	b.n	8005074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fa64 	bl	80054bc <USBD_CtlError>
            err++;
 8004ff4:	7afb      	ldrb	r3, [r7, #11]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8004ffa:	e03b      	b.n	8005074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800500e:	695b      	ldr	r3, [r3, #20]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	7c12      	ldrb	r2, [r2, #16]
 8005014:	f107 0108 	add.w	r1, r7, #8
 8005018:	4610      	mov	r0, r2
 800501a:	4798      	blx	r3
 800501c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800501e:	e029      	b.n	8005074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa4a 	bl	80054bc <USBD_CtlError>
            err++;
 8005028:	7afb      	ldrb	r3, [r7, #11]
 800502a:	3301      	adds	r3, #1
 800502c:	72fb      	strb	r3, [r7, #11]
          break;
 800502e:	e021      	b.n	8005074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	7c12      	ldrb	r2, [r2, #16]
 8005048:	f107 0108 	add.w	r1, r7, #8
 800504c:	4610      	mov	r0, r2
 800504e:	4798      	blx	r3
 8005050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005052:	e00f      	b.n	8005074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005054:	6839      	ldr	r1, [r7, #0]
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 fa30 	bl	80054bc <USBD_CtlError>
            err++;
 800505c:	7afb      	ldrb	r3, [r7, #11]
 800505e:	3301      	adds	r3, #1
 8005060:	72fb      	strb	r3, [r7, #11]
          break;
 8005062:	e007      	b.n	8005074 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa28 	bl	80054bc <USBD_CtlError>
          err++;
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	3301      	adds	r3, #1
 8005070:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005072:	bf00      	nop
      }
      break;
 8005074:	e037      	b.n	80050e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7c1b      	ldrb	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005086:	f107 0208 	add.w	r2, r7, #8
 800508a:	4610      	mov	r0, r2
 800508c:	4798      	blx	r3
 800508e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005090:	e029      	b.n	80050e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa11 	bl	80054bc <USBD_CtlError>
        err++;
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	3301      	adds	r3, #1
 800509e:	72fb      	strb	r3, [r7, #11]
      break;
 80050a0:	e021      	b.n	80050e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7c1b      	ldrb	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10d      	bne.n	80050c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	f107 0208 	add.w	r2, r7, #8
 80050b6:	4610      	mov	r0, r2
 80050b8:	4798      	blx	r3
 80050ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	3301      	adds	r3, #1
 80050c0:	2207      	movs	r2, #7
 80050c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80050c4:	e00f      	b.n	80050e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80050c6:	6839      	ldr	r1, [r7, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f9f7 	bl	80054bc <USBD_CtlError>
        err++;
 80050ce:	7afb      	ldrb	r3, [r7, #11]
 80050d0:	3301      	adds	r3, #1
 80050d2:	72fb      	strb	r3, [r7, #11]
      break;
 80050d4:	e007      	b.n	80050e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9ef 	bl	80054bc <USBD_CtlError>
      err++;
 80050de:	7afb      	ldrb	r3, [r7, #11]
 80050e0:	3301      	adds	r3, #1
 80050e2:	72fb      	strb	r3, [r7, #11]
      break;
 80050e4:	bf00      	nop
  }

  if (err != 0U)
 80050e6:	7afb      	ldrb	r3, [r7, #11]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11e      	bne.n	800512a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	88db      	ldrh	r3, [r3, #6]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d016      	beq.n	8005122 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80050f4:	893b      	ldrh	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00e      	beq.n	8005118 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	88da      	ldrh	r2, [r3, #6]
 80050fe:	893b      	ldrh	r3, [r7, #8]
 8005100:	4293      	cmp	r3, r2
 8005102:	bf28      	it	cs
 8005104:	4613      	movcs	r3, r2
 8005106:	b29b      	uxth	r3, r3
 8005108:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800510a:	893b      	ldrh	r3, [r7, #8]
 800510c:	461a      	mov	r2, r3
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa44 	bl	800559e <USBD_CtlSendData>
 8005116:	e009      	b.n	800512c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f9ce 	bl	80054bc <USBD_CtlError>
 8005120:	e004      	b.n	800512c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fa78 	bl	8005618 <USBD_CtlSendStatus>
 8005128:	e000      	b.n	800512c <USBD_GetDescriptor+0x2cc>
    return;
 800512a:	bf00      	nop
  }
}
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop

08005134 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	889b      	ldrh	r3, [r3, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d131      	bne.n	80051aa <USBD_SetAddress+0x76>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	88db      	ldrh	r3, [r3, #6]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d12d      	bne.n	80051aa <USBD_SetAddress+0x76>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	885b      	ldrh	r3, [r3, #2]
 8005152:	2b7f      	cmp	r3, #127	; 0x7f
 8005154:	d829      	bhi.n	80051aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	885b      	ldrh	r3, [r3, #2]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d104      	bne.n	8005178 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f9a3 	bl	80054bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005176:	e01d      	b.n	80051b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	4619      	mov	r1, r3
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fdff 	bl	8005d88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fa44 	bl	8005618 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005190:	7bfb      	ldrb	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d004      	beq.n	80051a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800519e:	e009      	b.n	80051b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051a8:	e004      	b.n	80051b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f985 	bl	80054bc <USBD_CtlError>
  }
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	885b      	ldrh	r3, [r3, #2]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	4b4c      	ldr	r3, [pc, #304]	; (8005304 <USBD_SetConfig+0x148>)
 80051d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80051d4:	4b4b      	ldr	r3, [pc, #300]	; (8005304 <USBD_SetConfig+0x148>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d905      	bls.n	80051e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f96c 	bl	80054bc <USBD_CtlError>
    return USBD_FAIL;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e088      	b.n	80052fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d002      	beq.n	80051fa <USBD_SetConfig+0x3e>
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d025      	beq.n	8005244 <USBD_SetConfig+0x88>
 80051f8:	e071      	b.n	80052de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80051fa:	4b42      	ldr	r3, [pc, #264]	; (8005304 <USBD_SetConfig+0x148>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d01c      	beq.n	800523c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005202:	4b40      	ldr	r3, [pc, #256]	; (8005304 <USBD_SetConfig+0x148>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800520c:	4b3d      	ldr	r3, [pc, #244]	; (8005304 <USBD_SetConfig+0x148>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff f948 	bl	80044a8 <USBD_SetClassConfig>
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f949 	bl	80054bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800522a:	e065      	b.n	80052f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9f3 	bl	8005618 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2203      	movs	r2, #3
 8005236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800523a:	e05d      	b.n	80052f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f9eb 	bl	8005618 <USBD_CtlSendStatus>
      break;
 8005242:	e059      	b.n	80052f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005244:	4b2f      	ldr	r3, [pc, #188]	; (8005304 <USBD_SetConfig+0x148>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d112      	bne.n	8005272 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <USBD_SetConfig+0x148>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <USBD_SetConfig+0x148>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	4619      	mov	r1, r3
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff f93b 	bl	80044e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f9d4 	bl	8005618 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005270:	e042      	b.n	80052f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <USBD_SetConfig+0x148>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d02a      	beq.n	80052d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	4619      	mov	r1, r3
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff f929 	bl	80044e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800528e:	4b1d      	ldr	r3, [pc, #116]	; (8005304 <USBD_SetConfig+0x148>)
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005298:	4b1a      	ldr	r3, [pc, #104]	; (8005304 <USBD_SetConfig+0x148>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff f902 	bl	80044a8 <USBD_SetClassConfig>
 80052a4:	4603      	mov	r3, r0
 80052a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f903 	bl	80054bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4619      	mov	r1, r3
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff f90e 	bl	80044e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2202      	movs	r2, #2
 80052c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80052cc:	e014      	b.n	80052f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9a2 	bl	8005618 <USBD_CtlSendStatus>
      break;
 80052d4:	e010      	b.n	80052f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f99e 	bl	8005618 <USBD_CtlSendStatus>
      break;
 80052dc:	e00c      	b.n	80052f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80052de:	6839      	ldr	r1, [r7, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 f8eb 	bl	80054bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <USBD_SetConfig+0x148>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff f8f7 	bl	80044e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80052f2:	2303      	movs	r3, #3
 80052f4:	73fb      	strb	r3, [r7, #15]
      break;
 80052f6:	bf00      	nop
  }

  return ret;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000180 	.word	0x20000180

08005308 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	88db      	ldrh	r3, [r3, #6]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d004      	beq.n	8005324 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8cd 	bl	80054bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005322:	e023      	b.n	800536c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	dc02      	bgt.n	8005336 <USBD_GetConfig+0x2e>
 8005330:	2b00      	cmp	r3, #0
 8005332:	dc03      	bgt.n	800533c <USBD_GetConfig+0x34>
 8005334:	e015      	b.n	8005362 <USBD_GetConfig+0x5a>
 8005336:	2b03      	cmp	r3, #3
 8005338:	d00b      	beq.n	8005352 <USBD_GetConfig+0x4a>
 800533a:	e012      	b.n	8005362 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	3308      	adds	r3, #8
 8005346:	2201      	movs	r2, #1
 8005348:	4619      	mov	r1, r3
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f927 	bl	800559e <USBD_CtlSendData>
        break;
 8005350:	e00c      	b.n	800536c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	2201      	movs	r2, #1
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f91f 	bl	800559e <USBD_CtlSendData>
        break;
 8005360:	e004      	b.n	800536c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f8a9 	bl	80054bc <USBD_CtlError>
        break;
 800536a:	bf00      	nop
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005384:	b2db      	uxtb	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	2b02      	cmp	r3, #2
 800538a:	d81e      	bhi.n	80053ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	88db      	ldrh	r3, [r3, #6]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d004      	beq.n	800539e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005394:	6839      	ldr	r1, [r7, #0]
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f890 	bl	80054bc <USBD_CtlError>
        break;
 800539c:	e01a      	b.n	80053d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d005      	beq.n	80053ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f043 0202 	orr.w	r2, r3, #2
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	330c      	adds	r3, #12
 80053be:	2202      	movs	r2, #2
 80053c0:	4619      	mov	r1, r3
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8eb 	bl	800559e <USBD_CtlSendData>
      break;
 80053c8:	e004      	b.n	80053d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f875 	bl	80054bc <USBD_CtlError>
      break;
 80053d2:	bf00      	nop
  }
}
 80053d4:	bf00      	nop
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	885b      	ldrh	r3, [r3, #2]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d106      	bne.n	80053fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f90e 	bl	8005618 <USBD_CtlSendStatus>
  }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005414:	b2db      	uxtb	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	2b02      	cmp	r3, #2
 800541a:	d80b      	bhi.n	8005434 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	885b      	ldrh	r3, [r3, #2]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d10c      	bne.n	800543e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f8f3 	bl	8005618 <USBD_CtlSendStatus>
      }
      break;
 8005432:	e004      	b.n	800543e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f840 	bl	80054bc <USBD_CtlError>
      break;
 800543c:	e000      	b.n	8005440 <USBD_ClrFeature+0x3c>
      break;
 800543e:	bf00      	nop
  }
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff fabb 	bl	80049ee <SWAPBYTE>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f7ff faae 	bl	80049ee <SWAPBYTE>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7ff faa1 	bl	80049ee <SWAPBYTE>
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	80da      	strh	r2, [r3, #6]
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fbf3 	bl	8005cb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80054ce:	2100      	movs	r1, #0
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fbef 	bl	8005cb4 <USBD_LL_StallEP>
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b086      	sub	sp, #24
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d036      	beq.n	8005562 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80054f8:	6938      	ldr	r0, [r7, #16]
 80054fa:	f000 f836 	bl	800556a <USBD_GetLen>
 80054fe:	4603      	mov	r3, r0
 8005500:	3301      	adds	r3, #1
 8005502:	b29b      	uxth	r3, r3
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	701a      	strb	r2, [r3, #0]
  idx++;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	3301      	adds	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	4413      	add	r3, r2
 8005524:	2203      	movs	r2, #3
 8005526:	701a      	strb	r2, [r3, #0]
  idx++;
 8005528:	7dfb      	ldrb	r3, [r7, #23]
 800552a:	3301      	adds	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800552e:	e013      	b.n	8005558 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4413      	add	r3, r2
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	3301      	adds	r3, #1
 8005540:	613b      	str	r3, [r7, #16]
    idx++;
 8005542:	7dfb      	ldrb	r3, [r7, #23]
 8005544:	3301      	adds	r3, #1
 8005546:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005548:	7dfb      	ldrb	r3, [r7, #23]
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	4413      	add	r3, r2
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
    idx++;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	3301      	adds	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1e7      	bne.n	8005530 <USBD_GetString+0x52>
 8005560:	e000      	b.n	8005564 <USBD_GetString+0x86>
    return;
 8005562:	bf00      	nop
  }
}
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800556a:	b480      	push	{r7}
 800556c:	b085      	sub	sp, #20
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800557a:	e005      	b.n	8005588 <USBD_GetLen+0x1e>
  {
    len++;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	3301      	adds	r3, #1
 8005580:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3301      	adds	r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f5      	bne.n	800557c <USBD_GetLen+0x12>
  }

  return len;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	60f8      	str	r0, [r7, #12]
 80055a6:	60b9      	str	r1, [r7, #8]
 80055a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	2100      	movs	r1, #0
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fbfe 	bl	8005dc6 <USBD_LL_Transmit>

  return USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	2100      	movs	r1, #0
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fbed 	bl	8005dc6 <USBD_LL_Transmit>

  return USBD_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b084      	sub	sp, #16
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	2100      	movs	r1, #0
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 fbfd 	bl	8005e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2204      	movs	r2, #4
 8005624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005628:	2300      	movs	r3, #0
 800562a:	2200      	movs	r2, #0
 800562c:	2100      	movs	r1, #0
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fbc9 	bl	8005dc6 <USBD_LL_Transmit>

  return USBD_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2205      	movs	r2, #5
 800564a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800564e:	2300      	movs	r3, #0
 8005650:	2200      	movs	r2, #0
 8005652:	2100      	movs	r1, #0
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fbd7 	bl	8005e08 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005668:	2200      	movs	r2, #0
 800566a:	490e      	ldr	r1, [pc, #56]	; (80056a4 <MX_USB_DEVICE_Init+0x40>)
 800566c:	480e      	ldr	r0, [pc, #56]	; (80056a8 <MX_USB_DEVICE_Init+0x44>)
 800566e:	f7fe fead 	bl	80043cc <USBD_Init>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005678:	f7fa fffa 	bl	8000670 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800567c:	490b      	ldr	r1, [pc, #44]	; (80056ac <MX_USB_DEVICE_Init+0x48>)
 800567e:	480a      	ldr	r0, [pc, #40]	; (80056a8 <MX_USB_DEVICE_Init+0x44>)
 8005680:	f7fe fed4 	bl	800442c <USBD_RegisterClass>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800568a:	f7fa fff1 	bl	8000670 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800568e:	4806      	ldr	r0, [pc, #24]	; (80056a8 <MX_USB_DEVICE_Init+0x44>)
 8005690:	f7fe fef3 	bl	800447a <USBD_Start>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800569a:	f7fa ffe9 	bl	8000670 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800569e:	bf00      	nop
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000114 	.word	0x20000114
 80056a8:	200001a0 	.word	0x200001a0
 80056ac:	2000000c 	.word	0x2000000c

080056b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	6039      	str	r1, [r7, #0]
 80056ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	2212      	movs	r2, #18
 80056c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80056c2:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000130 	.word	0x20000130

080056d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	6039      	str	r1, [r7, #0]
 80056de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	2204      	movs	r2, #4
 80056e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80056e6:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20000144 	.word	0x20000144

080056f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	4603      	mov	r3, r0
 8005700:	6039      	str	r1, [r7, #0]
 8005702:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d105      	bne.n	8005716 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	4907      	ldr	r1, [pc, #28]	; (800572c <USBD_FS_ProductStrDescriptor+0x34>)
 800570e:	4808      	ldr	r0, [pc, #32]	; (8005730 <USBD_FS_ProductStrDescriptor+0x38>)
 8005710:	f7ff fee5 	bl	80054de <USBD_GetString>
 8005714:	e004      	b.n	8005720 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	4904      	ldr	r1, [pc, #16]	; (800572c <USBD_FS_ProductStrDescriptor+0x34>)
 800571a:	4805      	ldr	r0, [pc, #20]	; (8005730 <USBD_FS_ProductStrDescriptor+0x38>)
 800571c:	f7ff fedf 	bl	80054de <USBD_GetString>
  }
  return USBD_StrDesc;
 8005720:	4b02      	ldr	r3, [pc, #8]	; (800572c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	20000470 	.word	0x20000470
 8005730:	08005f44 	.word	0x08005f44

08005734 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	6039      	str	r1, [r7, #0]
 800573e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	4904      	ldr	r1, [pc, #16]	; (8005754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005744:	4804      	ldr	r0, [pc, #16]	; (8005758 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005746:	f7ff feca 	bl	80054de <USBD_GetString>
  return USBD_StrDesc;
 800574a:	4b02      	ldr	r3, [pc, #8]	; (8005754 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000470 	.word	0x20000470
 8005758:	08005f5c 	.word	0x08005f5c

0800575c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	4603      	mov	r3, r0
 8005764:	6039      	str	r1, [r7, #0]
 8005766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	221a      	movs	r2, #26
 800576c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800576e:	f000 f843 	bl	80057f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005772:	4b02      	ldr	r3, [pc, #8]	; (800577c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20000148 	.word	0x20000148

08005780 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	6039      	str	r1, [r7, #0]
 800578a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d105      	bne.n	800579e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	4907      	ldr	r1, [pc, #28]	; (80057b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005796:	4808      	ldr	r0, [pc, #32]	; (80057b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005798:	f7ff fea1 	bl	80054de <USBD_GetString>
 800579c:	e004      	b.n	80057a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	4904      	ldr	r1, [pc, #16]	; (80057b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80057a2:	4805      	ldr	r0, [pc, #20]	; (80057b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80057a4:	f7ff fe9b 	bl	80054de <USBD_GetString>
  }
  return USBD_StrDesc;
 80057a8:	4b02      	ldr	r3, [pc, #8]	; (80057b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000470 	.word	0x20000470
 80057b8:	08005f70 	.word	0x08005f70

080057bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	6039      	str	r1, [r7, #0]
 80057c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d105      	bne.n	80057da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	4907      	ldr	r1, [pc, #28]	; (80057f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80057d2:	4808      	ldr	r0, [pc, #32]	; (80057f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80057d4:	f7ff fe83 	bl	80054de <USBD_GetString>
 80057d8:	e004      	b.n	80057e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4904      	ldr	r1, [pc, #16]	; (80057f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80057de:	4805      	ldr	r0, [pc, #20]	; (80057f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80057e0:	f7ff fe7d 	bl	80054de <USBD_GetString>
  }
  return USBD_StrDesc;
 80057e4:	4b02      	ldr	r3, [pc, #8]	; (80057f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000470 	.word	0x20000470
 80057f4:	08005f7c 	.word	0x08005f7c

080057f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80057fe:	4b0f      	ldr	r3, [pc, #60]	; (800583c <Get_SerialNum+0x44>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005804:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <Get_SerialNum+0x48>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800580a:	4b0e      	ldr	r3, [pc, #56]	; (8005844 <Get_SerialNum+0x4c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4413      	add	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800581e:	2208      	movs	r2, #8
 8005820:	4909      	ldr	r1, [pc, #36]	; (8005848 <Get_SerialNum+0x50>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f814 	bl	8005850 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005828:	2204      	movs	r2, #4
 800582a:	4908      	ldr	r1, [pc, #32]	; (800584c <Get_SerialNum+0x54>)
 800582c:	68b8      	ldr	r0, [r7, #8]
 800582e:	f000 f80f 	bl	8005850 <IntToUnicode>
  }
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	1fff7a10 	.word	0x1fff7a10
 8005840:	1fff7a14 	.word	0x1fff7a14
 8005844:	1fff7a18 	.word	0x1fff7a18
 8005848:	2000014a 	.word	0x2000014a
 800584c:	2000015a 	.word	0x2000015a

08005850 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005862:	2300      	movs	r3, #0
 8005864:	75fb      	strb	r3, [r7, #23]
 8005866:	e027      	b.n	80058b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	0f1b      	lsrs	r3, r3, #28
 800586c:	2b09      	cmp	r3, #9
 800586e:	d80b      	bhi.n	8005888 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	0f1b      	lsrs	r3, r3, #28
 8005874:	b2da      	uxtb	r2, r3
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4619      	mov	r1, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	440b      	add	r3, r1
 8005880:	3230      	adds	r2, #48	; 0x30
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	e00a      	b.n	800589e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	0f1b      	lsrs	r3, r3, #28
 800588c:	b2da      	uxtb	r2, r3
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	4619      	mov	r1, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	440b      	add	r3, r1
 8005898:	3237      	adds	r2, #55	; 0x37
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	3301      	adds	r3, #1
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	4413      	add	r3, r2
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80058b2:	7dfb      	ldrb	r3, [r7, #23]
 80058b4:	3301      	adds	r3, #1
 80058b6:	75fb      	strb	r3, [r7, #23]
 80058b8:	7dfa      	ldrb	r2, [r7, #23]
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d3d3      	bcc.n	8005868 <IntToUnicode+0x18>
  }
}
 80058c0:	bf00      	nop
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
 80058e2:	609a      	str	r2, [r3, #8]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058f0:	d13a      	bne.n	8005968 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 80058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	6313      	str	r3, [r2, #48]	; 0x30
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	613b      	str	r3, [r7, #16]
 800590c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800590e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005914:	2302      	movs	r3, #2
 8005916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800591c:	2303      	movs	r3, #3
 800591e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005920:	230a      	movs	r3, #10
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005924:	f107 0314 	add.w	r3, r7, #20
 8005928:	4619      	mov	r1, r3
 800592a:	4812      	ldr	r0, [pc, #72]	; (8005974 <HAL_PCD_MspInit+0xa4>)
 800592c:	f7fb f8e6 	bl	8000afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 8005932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005934:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 8005936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593a:	6353      	str	r3, [r2, #52]	; 0x34
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	4b0b      	ldr	r3, [pc, #44]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 8005946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800594a:	6453      	str	r3, [r2, #68]	; 0x44
 800594c:	4b08      	ldr	r3, [pc, #32]	; (8005970 <HAL_PCD_MspInit+0xa0>)
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	2043      	movs	r0, #67	; 0x43
 800595e:	f7fb f896 	bl	8000a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005962:	2043      	movs	r0, #67	; 0x43
 8005964:	f7fb f8af 	bl	8000ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005968:	bf00      	nop
 800596a:	3728      	adds	r7, #40	; 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40023800 	.word	0x40023800
 8005974:	40020000 	.word	0x40020000

08005978 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f7fe fdbe 	bl	8004510 <USBD_LL_SetupStage>
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80059ae:	78fa      	ldrb	r2, [r7, #3]
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	4619      	mov	r1, r3
 80059c6:	f7fe fdf8 	bl	80045ba <USBD_LL_DataOutStage>
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	3348      	adds	r3, #72	; 0x48
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	4619      	mov	r1, r3
 80059fa:	f7fe fe41 	bl	8004680 <USBD_LL_DataInStage>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe ff55 	bl	80048c4 <USBD_LL_SOF>
}
 8005a1a:	bf00      	nop
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005a36:	2300      	movs	r3, #0
 8005a38:	73fb      	strb	r3, [r7, #15]
 8005a3a:	e008      	b.n	8005a4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d102      	bne.n	8005a4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e001      	b.n	8005a4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005a4a:	f7fa fe11 	bl	8000670 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a54:	7bfa      	ldrb	r2, [r7, #15]
 8005a56:	4611      	mov	r1, r2
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fef5 	bl	8004848 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fea1 	bl	80047ac <USBD_LL_Reset>
}
 8005a6a:	bf00      	nop
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
	...

08005a74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fef0 	bl	8004868 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6812      	ldr	r2, [r2, #0]
 8005a96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005aa8:	4b04      	ldr	r3, [pc, #16]	; (8005abc <HAL_PCD_SuspendCallback+0x48>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	4a03      	ldr	r2, [pc, #12]	; (8005abc <HAL_PCD_SuspendCallback+0x48>)
 8005aae:	f043 0306 	orr.w	r3, r3, #6
 8005ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	e000ed00 	.word	0xe000ed00

08005ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe fee0 	bl	8004894 <USBD_LL_Resume>
}
 8005ad4:	bf00      	nop
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe ff2e 	bl	8004954 <USBD_LL_IsoOUTIncomplete>
}
 8005af8:	bf00      	nop
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fef6 	bl	8004908 <USBD_LL_IsoINIncomplete>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe ff34 	bl	80049a0 <USBD_LL_DevConnected>
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7fe ff31 	bl	80049b6 <USBD_LL_DevDisconnected>
}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d13c      	bne.n	8005be6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005b6c:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b78:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005b7c:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005b84:	4b1a      	ldr	r3, [pc, #104]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b86:	2204      	movs	r2, #4
 8005b88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005b8a:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b90:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005b96:	4b16      	ldr	r3, [pc, #88]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b98:	2202      	movs	r2, #2
 8005b9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005b9c:	4b14      	ldr	r3, [pc, #80]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005ba2:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005ba8:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005bae:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005bba:	480d      	ldr	r0, [pc, #52]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005bbc:	f7fb f952 	bl	8000e64 <HAL_PCD_Init>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005bc6:	f7fa fd53 	bl	8000670 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005bce:	f7fc fa98 	bl	8002102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005bd2:	2240      	movs	r2, #64	; 0x40
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4806      	ldr	r0, [pc, #24]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005bd8:	f7fc fa4c 	bl	8002074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005bdc:	2280      	movs	r2, #128	; 0x80
 8005bde:	2101      	movs	r1, #1
 8005be0:	4803      	ldr	r0, [pc, #12]	; (8005bf0 <USBD_LL_Init+0x94>)
 8005be2:	f7fc fa47 	bl	8002074 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20000670 	.word	0x20000670

08005bf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fb fa47 	bl	800109e <HAL_PCD_Start>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f930 	bl	8005e7c <USBD_Get_USB_Status>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	4608      	mov	r0, r1
 8005c34:	4611      	mov	r1, r2
 8005c36:	461a      	mov	r2, r3
 8005c38:	4603      	mov	r3, r0
 8005c3a:	70fb      	strb	r3, [r7, #3]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70bb      	strb	r3, [r7, #2]
 8005c40:	4613      	mov	r3, r2
 8005c42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005c52:	78bb      	ldrb	r3, [r7, #2]
 8005c54:	883a      	ldrh	r2, [r7, #0]
 8005c56:	78f9      	ldrb	r1, [r7, #3]
 8005c58:	f7fb fe2b 	bl	80018b2 <HAL_PCD_EP_Open>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f90a 	bl	8005e7c <USBD_Get_USB_Status>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	460b      	mov	r3, r1
 8005c80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fb fe74 	bl	8001982 <HAL_PCD_EP_Close>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f8eb 	bl	8005e7c <USBD_Get_USB_Status>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cce:	78fa      	ldrb	r2, [r7, #3]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fb ff34 	bl	8001b40 <HAL_PCD_EP_SetStall>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f8cc 	bl	8005e7c <USBD_Get_USB_Status>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b084      	sub	sp, #16
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d0c:	78fa      	ldrb	r2, [r7, #3]
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fb ff79 	bl	8001c08 <HAL_PCD_EP_ClrStall>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 f8ad 	bl	8005e7c <USBD_Get_USB_Status>
 8005d22:	4603      	mov	r3, r0
 8005d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8005d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	da0b      	bge.n	8005d64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	00db      	lsls	r3, r3, #3
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	440b      	add	r3, r1
 8005d5e:	333e      	adds	r3, #62	; 0x3e
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	e00b      	b.n	8005d7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005da2:	78fa      	ldrb	r2, [r7, #3]
 8005da4:	4611      	mov	r1, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fb fd5e 	bl	8001868 <HAL_PCD_SetAddress>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005db0:	7bfb      	ldrb	r3, [r7, #15]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 f862 	bl	8005e7c <USBD_Get_USB_Status>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b086      	sub	sp, #24
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	603b      	str	r3, [r7, #0]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005de4:	7af9      	ldrb	r1, [r7, #11]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	f7fb fe5f 	bl	8001aac <HAL_PCD_EP_Transmit>
 8005dee:	4603      	mov	r3, r0
 8005df0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 f841 	bl	8005e7c <USBD_Get_USB_Status>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005dfe:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	460b      	mov	r3, r1
 8005e16:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005e26:	7af9      	ldrb	r1, [r7, #11]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	f7fb fdf3 	bl	8001a16 <HAL_PCD_EP_Receive>
 8005e30:	4603      	mov	r3, r0
 8005e32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f820 	bl	8005e7c <USBD_Get_USB_Status>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8005e40:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <USBD_static_malloc+0x18>)
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	20000184 	.word	0x20000184

08005e68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e86:	2300      	movs	r3, #0
 8005e88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d817      	bhi.n	8005ec0 <USBD_Get_USB_Status+0x44>
 8005e90:	a201      	add	r2, pc, #4	; (adr r2, 8005e98 <USBD_Get_USB_Status+0x1c>)
 8005e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e96:	bf00      	nop
 8005e98:	08005ea9 	.word	0x08005ea9
 8005e9c:	08005eaf 	.word	0x08005eaf
 8005ea0:	08005eb5 	.word	0x08005eb5
 8005ea4:	08005ebb 	.word	0x08005ebb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8005eac:	e00b      	b.n	8005ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	73fb      	strb	r3, [r7, #15]
    break;
 8005eb2:	e008      	b.n	8005ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
    break;
 8005eb8:	e005      	b.n	8005ec6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	73fb      	strb	r3, [r7, #15]
    break;
 8005ebe:	e002      	b.n	8005ec6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ec4:	bf00      	nop
  }
  return usb_status;
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <__libc_init_array>:
 8005ed4:	b570      	push	{r4, r5, r6, lr}
 8005ed6:	4d0d      	ldr	r5, [pc, #52]	; (8005f0c <__libc_init_array+0x38>)
 8005ed8:	4c0d      	ldr	r4, [pc, #52]	; (8005f10 <__libc_init_array+0x3c>)
 8005eda:	1b64      	subs	r4, r4, r5
 8005edc:	10a4      	asrs	r4, r4, #2
 8005ede:	2600      	movs	r6, #0
 8005ee0:	42a6      	cmp	r6, r4
 8005ee2:	d109      	bne.n	8005ef8 <__libc_init_array+0x24>
 8005ee4:	4d0b      	ldr	r5, [pc, #44]	; (8005f14 <__libc_init_array+0x40>)
 8005ee6:	4c0c      	ldr	r4, [pc, #48]	; (8005f18 <__libc_init_array+0x44>)
 8005ee8:	f000 f820 	bl	8005f2c <_init>
 8005eec:	1b64      	subs	r4, r4, r5
 8005eee:	10a4      	asrs	r4, r4, #2
 8005ef0:	2600      	movs	r6, #0
 8005ef2:	42a6      	cmp	r6, r4
 8005ef4:	d105      	bne.n	8005f02 <__libc_init_array+0x2e>
 8005ef6:	bd70      	pop	{r4, r5, r6, pc}
 8005ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efc:	4798      	blx	r3
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7ee      	b.n	8005ee0 <__libc_init_array+0xc>
 8005f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f06:	4798      	blx	r3
 8005f08:	3601      	adds	r6, #1
 8005f0a:	e7f2      	b.n	8005ef2 <__libc_init_array+0x1e>
 8005f0c:	08005fa4 	.word	0x08005fa4
 8005f10:	08005fa4 	.word	0x08005fa4
 8005f14:	08005fa4 	.word	0x08005fa4
 8005f18:	08005fa8 	.word	0x08005fa8

08005f1c <memset>:
 8005f1c:	4402      	add	r2, r0
 8005f1e:	4603      	mov	r3, r0
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d100      	bne.n	8005f26 <memset+0xa>
 8005f24:	4770      	bx	lr
 8005f26:	f803 1b01 	strb.w	r1, [r3], #1
 8005f2a:	e7f9      	b.n	8005f20 <memset+0x4>

08005f2c <_init>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr

08005f38 <_fini>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	bf00      	nop
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr
