
003LED_blocked.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb8  08004eb8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004eb8  08004eb8  00014eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec0  08004ec0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec0  08004ec0  00014ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec4  08004ec4  00014ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013448  20000014  08004edc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001345c  08004edc  0002345c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e94  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f47  00000000  00000000  00037ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003ae20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003c0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a2e  00000000  00000000  0003d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014830  00000000  00000000  00060cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7eb0  00000000  00000000  000754f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f48  00000000  00000000  0014d3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d8c 	.word	0x08004d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08004d8c 	.word	0x08004d8c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200133b4 	.word	0x200133b4

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fa9f 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f867 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8ed 	bl	8000758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800057e:	f000 f8c1 	bl	8000704 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <main+0xb8>)
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4925      	ldr	r1, [pc, #148]	; (8000628 <main+0xbc>)
 8000592:	4826      	ldr	r0, [pc, #152]	; (800062c <main+0xc0>)
 8000594:	f002 f848 	bl	8002628 <xTaskCreate>
 8000598:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d00a      	beq.n	80005b6 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005a4:	f383 8811 	msr	BASEPRI, r3
 80005a8:	f3bf 8f6f 	isb	sy
 80005ac:	f3bf 8f4f 	dsb	sy
 80005b0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b2:	bf00      	nop
 80005b4:	e7fe      	b.n	80005b4 <main+0x48>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80005b6:	f107 0308 	add.w	r3, r7, #8
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <main+0xc4>)
 80005c2:	22c8      	movs	r2, #200	; 0xc8
 80005c4:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xc8>)
 80005c6:	481c      	ldr	r0, [pc, #112]	; (8000638 <main+0xcc>)
 80005c8:	f002 f82e 	bl	8002628 <xTaskCreate>
 80005cc:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005ce:	69fb      	ldr	r3, [r7, #28]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d00a      	beq.n	80005ea <main+0x7e>
        __asm volatile
 80005d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d8:	f383 8811 	msr	BASEPRI, r3
 80005dc:	f3bf 8f6f 	isb	sy
 80005e0:	f3bf 8f4f 	dsb	sy
 80005e4:	617b      	str	r3, [r7, #20]
    }
 80005e6:	bf00      	nop
 80005e8:	e7fe      	b.n	80005e8 <main+0x7c>

  status = xTaskCreate(task3_handler, "Task-3", 200, "Hello world from Task-3", 2, &task3_handle);
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <main+0xd0>)
 80005f4:	22c8      	movs	r2, #200	; 0xc8
 80005f6:	4912      	ldr	r1, [pc, #72]	; (8000640 <main+0xd4>)
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <main+0xd8>)
 80005fa:	f002 f815 	bl	8002628 <xTaskCreate>
 80005fe:	61f8      	str	r0, [r7, #28]
   configASSERT(status == pdPASS);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d00a      	beq.n	800061c <main+0xb0>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	613b      	str	r3, [r7, #16]
    }
 8000618:	bf00      	nop
 800061a:	e7fe      	b.n	800061a <main+0xae>

  vTaskStartScheduler();
 800061c:	f002 f9a0 	bl	8002960 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0xb4>
 8000622:	bf00      	nop
 8000624:	08004da4 	.word	0x08004da4
 8000628:	08004dbc 	.word	0x08004dbc
 800062c:	080007a9 	.word	0x080007a9
 8000630:	08004dc4 	.word	0x08004dc4
 8000634:	08004ddc 	.word	0x08004ddc
 8000638:	080007cd 	.word	0x080007cd
 800063c:	08004de4 	.word	0x08004de4
 8000640:	08004dfc 	.word	0x08004dfc
 8000644:	080007f1 	.word	0x080007f1

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fb90 	bl	8004d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xb4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xb4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xb4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <SystemClock_Config+0xb8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <SystemClock_Config+0xb8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <SystemClock_Config+0xb8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fcbb 	bl	8001034 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c4:	f000 f8b8 	bl	8000838 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 ff1e 	bl	8001524 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ee:	f000 f8a3 	bl	8000838 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART1_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART1_UART_Init+0x4c>)
 800073c:	f001 fbce 	bl	8001edc <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f877 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20013324 	.word	0x20013324
 8000754:	40011000 	.word	0x40011000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_GPIO_Init+0x4c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MX_GPIO_Init+0x4c>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <MX_GPIO_Init+0x4c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_GPIO_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a08      	ldr	r2, [pc, #32]	; (80007a4 <MX_GPIO_Init+0x4c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_GPIO_Init+0x4c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	while (1) {
		debugPrint(&huart1, "Task1\r\n");
 80007b0:	4904      	ldr	r1, [pc, #16]	; (80007c4 <task1_handler+0x1c>)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <task1_handler+0x20>)
 80007b4:	f000 f940 	bl	8000a38 <debugPrint>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80007b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007bc:	f002 f898 	bl	80028f0 <vTaskDelay>
		debugPrint(&huart1, "Task1\r\n");
 80007c0:	e7f6      	b.n	80007b0 <task1_handler+0x8>
 80007c2:	bf00      	nop
 80007c4:	08004e04 	.word	0x08004e04
 80007c8:	20013324 	.word	0x20013324

080007cc <task2_handler>:
	}
}

static void task2_handler(void* parameters) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	while (1) {
		debugPrint(&huart1, "Task2\r\n");
 80007d4:	4904      	ldr	r1, [pc, #16]	; (80007e8 <task2_handler+0x1c>)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <task2_handler+0x20>)
 80007d8:	f000 f92e 	bl	8000a38 <debugPrint>
		vTaskDelay(pdMS_TO_TICKS(800));
 80007dc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80007e0:	f002 f886 	bl	80028f0 <vTaskDelay>
		debugPrint(&huart1, "Task2\r\n");
 80007e4:	e7f6      	b.n	80007d4 <task2_handler+0x8>
 80007e6:	bf00      	nop
 80007e8:	08004e0c 	.word	0x08004e0c
 80007ec:	20013324 	.word	0x20013324

080007f0 <task3_handler>:
	}
}

static void task3_handler(void* parameters) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	while (1) {
		debugPrint(&huart1, "Task3\r\n");
 80007f8:	4904      	ldr	r1, [pc, #16]	; (800080c <task3_handler+0x1c>)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <task3_handler+0x20>)
 80007fc:	f000 f91c 	bl	8000a38 <debugPrint>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000800:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000804:	f002 f874 	bl	80028f0 <vTaskDelay>
		debugPrint(&huart1, "Task3\r\n");
 8000808:	e7f6      	b.n	80007f8 <task3_handler+0x8>
 800080a:	bf00      	nop
 800080c:	08004e14 	.word	0x08004e14
 8000810:	20013324 	.word	0x20013324

08000814 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d101      	bne.n	800082a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000826:	f000 f967 	bl	8000af8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40001000 	.word	0x40001000

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	e7fe      	b.n	8000840 <Error_Handler+0x8>
	...

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000882:	f002 fcf9 	bl	8003278 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a19      	ldr	r2, [pc, #100]	; (8000918 <HAL_UART_MspInit+0x84>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d12c      	bne.n	8000910 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <HAL_UART_MspInit+0x88>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a17      	ldr	r2, [pc, #92]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UART_MspInit+0x88>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_UART_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <HAL_UART_MspInit+0x88>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_UART_MspInit+0x88>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000900:	2307      	movs	r3, #7
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <HAL_UART_MspInit+0x8c>)
 800090c:	f000 f9f6 	bl	8000cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40011000 	.word	0x40011000
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f000 f9b5 	bl	8000ca8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800093e:	2036      	movs	r0, #54	; 0x36
 8000940:	f000 f9ce 	bl	8000ce0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <HAL_InitTick+0xa0>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_InitTick+0xa0>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <HAL_InitTick+0xa0>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f003 0310 	and.w	r3, r3, #16
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000960:	f107 0210 	add.w	r2, r7, #16
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 ffd6 	bl	800191c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000970:	f000 ffac 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8000974:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000978:	4a13      	ldr	r2, [pc, #76]	; (80009c8 <HAL_InitTick+0xa4>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	0c9b      	lsrs	r3, r3, #18
 8000980:	3b01      	subs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_InitTick+0xa8>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <HAL_InitTick+0xac>)
 8000988:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_InitTick+0xa8>)
 800098c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000990:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_InitTick+0xa8>)
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_InitTick+0xa8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <HAL_InitTick+0xa8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <HAL_InitTick+0xa8>)
 80009a6:	f000 ffeb 	bl	8001980 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d104      	bne.n	80009ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009b0:	4806      	ldr	r0, [pc, #24]	; (80009cc <HAL_InitTick+0xa8>)
 80009b2:	f001 f83f 	bl	8001a34 <HAL_TIM_Base_Start_IT>
 80009b6:	4603      	mov	r3, r0
 80009b8:	e000      	b.n	80009bc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
}
 80009bc:	4618      	mov	r0, r3
 80009be:	3730      	adds	r7, #48	; 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	20013368 	.word	0x20013368
 80009d0:	40001000 	.word	0x40001000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a04:	4802      	ldr	r0, [pc, #8]	; (8000a10 <TIM6_DAC_IRQHandler+0x10>)
 8000a06:	f001 f885 	bl	8001b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20013368 	.word	0x20013368

08000a14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <debugPrint>:
 *  Created on: May 22, 2021
 *      Author: minia
 */

#include "uart_task.h"
void debugPrint(UART_HandleTypeDef *huart, char _out[]) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000a42:	6838      	ldr	r0, [r7, #0]
 8000a44:	f7ff fc0e 	bl	8000264 <strlen>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f001 fa90 	bl	8001f76 <HAL_UART_Transmit>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a0b      	ldr	r2, [pc, #44]	; (8000aa8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a7c:	4c0b      	ldr	r4, [pc, #44]	; (8000aac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a8a:	f7ff ffc3 	bl	8000a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f004 f935 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a92:	f7ff fd6b 	bl	800056c <main>
  bx  lr    
 8000a96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000aa4:	08004ec8 	.word	0x08004ec8
  ldr r2, =_sbss
 8000aa8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000aac:	2001345c 	.word	0x2001345c

08000ab0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <HAL_Init+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <HAL_Init+0x40>)
 8000abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <HAL_Init+0x40>)
 8000aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <HAL_Init+0x40>)
 8000ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f8d8 	bl	8000c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f7ff ff1e 	bl	8000924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff feac 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023c00 	.word	0x40023c00

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	200133b0 	.word	0x200133b0

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200133b0 	.word	0x200133b0

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff ff4c 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cba:	f7ff ff61 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	68b9      	ldr	r1, [r7, #8]
 8000cc4:	6978      	ldr	r0, [r7, #20]
 8000cc6:	f7ff ffb1 	bl	8000c2c <NVIC_EncodePriority>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff80 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000cd8:	bf00      	nop
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff54 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	e16b      	b.n	8000ff0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 815a 	bne.w	8000fea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d005      	beq.n	8000d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d130      	bne.n	8000db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	689b      	ldr	r3, [r3, #8]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f003 0201 	and.w	r2, r3, #1
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	fa02 f303 	lsl.w	r3, r2, r3
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	d017      	beq.n	8000dec <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d123      	bne.n	8000e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	220f      	movs	r2, #15
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	691a      	ldr	r2, [r3, #16]
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	08da      	lsrs	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3208      	adds	r2, #8
 8000e3a:	69b9      	ldr	r1, [r7, #24]
 8000e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0203 	and.w	r2, r3, #3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	f000 80b4 	beq.w	8000fea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b60      	ldr	r3, [pc, #384]	; (8001008 <HAL_GPIO_Init+0x30c>)
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	4a5f      	ldr	r2, [pc, #380]	; (8001008 <HAL_GPIO_Init+0x30c>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6453      	str	r3, [r2, #68]	; 0x44
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <HAL_GPIO_Init+0x30c>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e9e:	4a5b      	ldr	r2, [pc, #364]	; (800100c <HAL_GPIO_Init+0x310>)
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_GPIO_Init+0x314>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d02b      	beq.n	8000f22 <HAL_GPIO_Init+0x226>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a51      	ldr	r2, [pc, #324]	; (8001014 <HAL_GPIO_Init+0x318>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d025      	beq.n	8000f1e <HAL_GPIO_Init+0x222>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a50      	ldr	r2, [pc, #320]	; (8001018 <HAL_GPIO_Init+0x31c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01f      	beq.n	8000f1a <HAL_GPIO_Init+0x21e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4f      	ldr	r2, [pc, #316]	; (800101c <HAL_GPIO_Init+0x320>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x21a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4e      	ldr	r2, [pc, #312]	; (8001020 <HAL_GPIO_Init+0x324>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x216>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4d      	ldr	r2, [pc, #308]	; (8001024 <HAL_GPIO_Init+0x328>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x212>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4c      	ldr	r2, [pc, #304]	; (8001028 <HAL_GPIO_Init+0x32c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x20e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_GPIO_Init+0x330>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x20a>
 8000f02:	2307      	movs	r3, #7
 8000f04:	e00e      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f06:	2308      	movs	r3, #8
 8000f08:	e00c      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	e00a      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f0e:	2305      	movs	r3, #5
 8000f10:	e008      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f16:	2303      	movs	r3, #3
 8000f18:	e004      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e002      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e000      	b.n	8000f24 <HAL_GPIO_Init+0x228>
 8000f22:	2300      	movs	r3, #0
 8000f24:	69fa      	ldr	r2, [r7, #28]
 8000f26:	f002 0203 	and.w	r2, r2, #3
 8000f2a:	0092      	lsls	r2, r2, #2
 8000f2c:	4093      	lsls	r3, r2
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f34:	4935      	ldr	r1, [pc, #212]	; (800100c <HAL_GPIO_Init+0x310>)
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f42:	4b3b      	ldr	r3, [pc, #236]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f66:	4a32      	ldr	r2, [pc, #200]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f6c:	4b30      	ldr	r3, [pc, #192]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f90:	4a27      	ldr	r2, [pc, #156]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a1d      	ldr	r2, [pc, #116]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a12      	ldr	r2, [pc, #72]	; (8001030 <HAL_GPIO_Init+0x334>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b0f      	cmp	r3, #15
 8000ff4:	f67f ae90 	bls.w	8000d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	3724      	adds	r7, #36	; 0x24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40013800 	.word	0x40013800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40021000 	.word	0x40021000
 8001024:	40021400 	.word	0x40021400
 8001028:	40021800 	.word	0x40021800
 800102c:	40021c00 	.word	0x40021c00
 8001030:	40013c00 	.word	0x40013c00

08001034 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e264      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d075      	beq.n	800113e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001052:	4ba3      	ldr	r3, [pc, #652]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b04      	cmp	r3, #4
 800105c:	d00c      	beq.n	8001078 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800105e:	4ba0      	ldr	r3, [pc, #640]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001066:	2b08      	cmp	r3, #8
 8001068:	d112      	bne.n	8001090 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800106a:	4b9d      	ldr	r3, [pc, #628]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001076:	d10b      	bne.n	8001090 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001078:	4b99      	ldr	r3, [pc, #612]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d05b      	beq.n	800113c <HAL_RCC_OscConfig+0x108>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d157      	bne.n	800113c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e23f      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d106      	bne.n	80010a8 <HAL_RCC_OscConfig+0x74>
 800109a:	4b91      	ldr	r3, [pc, #580]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a90      	ldr	r2, [pc, #576]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xb0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x98>
 80010b2:	4b8b      	ldr	r3, [pc, #556]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a8a      	ldr	r2, [pc, #552]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b88      	ldr	r3, [pc, #544]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a87      	ldr	r2, [pc, #540]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xb0>
 80010cc:	4b84      	ldr	r3, [pc, #528]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a83      	ldr	r2, [pc, #524]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b81      	ldr	r3, [pc, #516]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a80      	ldr	r2, [pc, #512]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fd18 	bl	8000b20 <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fd14 	bl	8000b20 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e204      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xc0>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fd04 	bl	8000b20 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fd00 	bl	8000b20 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1f0      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	4b6c      	ldr	r3, [pc, #432]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0xe8>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d063      	beq.n	8001212 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800114a:	4b65      	ldr	r3, [pc, #404]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001156:	4b62      	ldr	r3, [pc, #392]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800115e:	2b08      	cmp	r3, #8
 8001160:	d11c      	bne.n	800119c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001162:	4b5f      	ldr	r3, [pc, #380]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d116      	bne.n	800119c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	4b5c      	ldr	r3, [pc, #368]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_RCC_OscConfig+0x152>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d001      	beq.n	8001186 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e1c4      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4952      	ldr	r1, [pc, #328]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	e03a      	b.n	8001212 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a4:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <HAL_RCC_OscConfig+0x2b0>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fcb9 	bl	8000b20 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fcb5 	bl	8000b20 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1a5      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4940      	ldr	r1, [pc, #256]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b3f      	ldr	r3, [pc, #252]	; (80012e4 <HAL_RCC_OscConfig+0x2b0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc98 	bl	8000b20 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc94 	bl	8000b20 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e184      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d030      	beq.n	8001280 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d016      	beq.n	8001254 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b30      	ldr	r3, [pc, #192]	; (80012e8 <HAL_RCC_OscConfig+0x2b4>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800122c:	f7ff fc78 	bl	8000b20 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fc74 	bl	8000b20 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e164      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x200>
 8001252:	e015      	b.n	8001280 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_RCC_OscConfig+0x2b4>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fc61 	bl	8000b20 <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001262:	f7ff fc5d 	bl	8000b20 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e14d      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f0      	bne.n	8001262 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 80a0 	beq.w	80013ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a0e      	ldr	r2, [pc, #56]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_RCC_OscConfig+0x2ac>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_OscConfig+0x2b8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d121      	bne.n	800130e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_RCC_OscConfig+0x2b8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_RCC_OscConfig+0x2b8>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d6:	f7ff fc23 	bl	8000b20 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012dc:	e011      	b.n	8001302 <HAL_RCC_OscConfig+0x2ce>
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	42470000 	.word	0x42470000
 80012e8:	42470e80 	.word	0x42470e80
 80012ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f0:	f7ff fc16 	bl	8000b20 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e106      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b85      	ldr	r3, [pc, #532]	; (8001518 <HAL_RCC_OscConfig+0x4e4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d106      	bne.n	8001324 <HAL_RCC_OscConfig+0x2f0>
 8001316:	4b81      	ldr	r3, [pc, #516]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a80      	ldr	r2, [pc, #512]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
 8001322:	e01c      	b.n	800135e <HAL_RCC_OscConfig+0x32a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x312>
 800132c:	4b7b      	ldr	r3, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a7a      	ldr	r2, [pc, #488]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
 8001338:	4b78      	ldr	r3, [pc, #480]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a77      	ldr	r2, [pc, #476]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x32a>
 8001346:	4b75      	ldr	r3, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a74      	ldr	r2, [pc, #464]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	4b72      	ldr	r3, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a71      	ldr	r2, [pc, #452]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d015      	beq.n	8001392 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fbdb 	bl	8000b20 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fbd7 	bl	8000b20 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0c5      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	4b65      	ldr	r3, [pc, #404]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ee      	beq.n	800136e <HAL_RCC_OscConfig+0x33a>
 8001390:	e014      	b.n	80013bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001392:	f7ff fbc5 	bl	8000b20 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fbc1 	bl	8000b20 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0af      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	4b5a      	ldr	r3, [pc, #360]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ee      	bne.n	800139a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b56      	ldr	r3, [pc, #344]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a55      	ldr	r2, [pc, #340]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 809b 	beq.w	800150e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013d8:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d05c      	beq.n	800149e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d141      	bne.n	8001470 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b4c      	ldr	r3, [pc, #304]	; (8001520 <HAL_RCC_OscConfig+0x4ec>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb95 	bl	8000b20 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fb91 	bl	8000b20 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e081      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69da      	ldr	r2, [r3, #28]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	019b      	lsls	r3, r3, #6
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	3b01      	subs	r3, #1
 8001432:	041b      	lsls	r3, r3, #16
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	061b      	lsls	r3, r3, #24
 800143c:	4937      	ldr	r1, [pc, #220]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001442:	4b37      	ldr	r3, [pc, #220]	; (8001520 <HAL_RCC_OscConfig+0x4ec>)
 8001444:	2201      	movs	r2, #1
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fb6a 	bl	8000b20 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001450:	f7ff fb66 	bl	8000b20 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e056      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x41c>
 800146e:	e04e      	b.n	800150e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_RCC_OscConfig+0x4ec>)
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb53 	bl	8000b20 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb4f 	bl	8000b20 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e03f      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_OscConfig+0x44a>
 800149c:	e037      	b.n	800150e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e032      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_RCC_OscConfig+0x4e8>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d028      	beq.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d121      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d11a      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014e0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d111      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	085b      	lsrs	r3, r3, #1
 80014f2:	3b01      	subs	r3, #1
 80014f4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d107      	bne.n	800150a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40007000 	.word	0x40007000
 800151c:	40023800 	.word	0x40023800
 8001520:	42470060 	.word	0x42470060

08001524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0cc      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d90c      	bls.n	8001560 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b65      	ldr	r3, [pc, #404]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b63      	ldr	r3, [pc, #396]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0b8      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d020      	beq.n	80015ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001578:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	4a58      	ldr	r2, [pc, #352]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001582:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001590:	4b53      	ldr	r3, [pc, #332]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	4a52      	ldr	r2, [pc, #328]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800159a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	494d      	ldr	r1, [pc, #308]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d044      	beq.n	8001644 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d119      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e07f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d003      	beq.n	80015e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d107      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d109      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e067      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f023 0203 	bic.w	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4934      	ldr	r1, [pc, #208]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	4313      	orrs	r3, r2
 8001612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001614:	f7ff fa84 	bl	8000b20 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800161a:	e00a      	b.n	8001632 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161c:	f7ff fa80 	bl	8000b20 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e04f      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 020c 	and.w	r2, r3, #12
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	429a      	cmp	r2, r3
 8001642:	d1eb      	bne.n	800161c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0307 	and.w	r3, r3, #7
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d20c      	bcs.n	800166c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e032      	b.n	80016d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4916      	ldr	r1, [pc, #88]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d009      	beq.n	80016aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	490e      	ldr	r1, [pc, #56]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016aa:	f000 f821 	bl	80016f0 <HAL_RCC_GetSysClockFreq>
 80016ae:	4602      	mov	r2, r0
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	091b      	lsrs	r3, r3, #4
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	490a      	ldr	r1, [pc, #40]	; (80016e4 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	5ccb      	ldrb	r3, [r1, r3]
 80016be:	fa22 f303 	lsr.w	r3, r2, r3
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1c4>)
 80016c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_RCC_ClockConfig+0x1c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff f92a 	bl	8000924 <HAL_InitTick>

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00
 80016e0:	40023800 	.word	0x40023800
 80016e4:	08004e94 	.word	0x08004e94
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	2300      	movs	r3, #0
 8001702:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001708:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 030c 	and.w	r3, r3, #12
 8001710:	2b08      	cmp	r3, #8
 8001712:	d00d      	beq.n	8001730 <HAL_RCC_GetSysClockFreq+0x40>
 8001714:	2b08      	cmp	r3, #8
 8001716:	f200 80bd 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x1a4>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x34>
 800171e:	2b04      	cmp	r3, #4
 8001720:	d003      	beq.n	800172a <HAL_RCC_GetSysClockFreq+0x3a>
 8001722:	e0b7      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001724:	4b61      	ldr	r3, [pc, #388]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001726:	60bb      	str	r3, [r7, #8]
       break;
 8001728:	e0b7      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172a:	4b61      	ldr	r3, [pc, #388]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800172c:	60bb      	str	r3, [r7, #8]
      break;
 800172e:	e0b4      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001730:	4b5d      	ldr	r3, [pc, #372]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001738:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04d      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001746:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	099b      	lsrs	r3, r3, #6
 800174c:	461a      	mov	r2, r3
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	ea02 0800 	and.w	r8, r2, r0
 800175e:	ea03 0901 	and.w	r9, r3, r1
 8001762:	4640      	mov	r0, r8
 8001764:	4649      	mov	r1, r9
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	014b      	lsls	r3, r1, #5
 8001770:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001774:	0142      	lsls	r2, r0, #5
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	ebb0 0008 	subs.w	r0, r0, r8
 800177e:	eb61 0109 	sbc.w	r1, r1, r9
 8001782:	f04f 0200 	mov.w	r2, #0
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	018b      	lsls	r3, r1, #6
 800178c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001790:	0182      	lsls	r2, r0, #6
 8001792:	1a12      	subs	r2, r2, r0
 8001794:	eb63 0301 	sbc.w	r3, r3, r1
 8001798:	f04f 0000 	mov.w	r0, #0
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	00d9      	lsls	r1, r3, #3
 80017a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017a6:	00d0      	lsls	r0, r2, #3
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	eb12 0208 	adds.w	r2, r2, r8
 80017b0:	eb43 0309 	adc.w	r3, r3, r9
 80017b4:	f04f 0000 	mov.w	r0, #0
 80017b8:	f04f 0100 	mov.w	r1, #0
 80017bc:	0259      	lsls	r1, r3, #9
 80017be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017c2:	0250      	lsls	r0, r2, #9
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	f7fe fd4e 	bl	8000274 <__aeabi_uldivmod>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4613      	mov	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e04a      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	099b      	lsrs	r3, r3, #6
 80017e8:	461a      	mov	r2, r3
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017f2:	f04f 0100 	mov.w	r1, #0
 80017f6:	ea02 0400 	and.w	r4, r2, r0
 80017fa:	ea03 0501 	and.w	r5, r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	014b      	lsls	r3, r1, #5
 800180c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001810:	0142      	lsls	r2, r0, #5
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	1b00      	subs	r0, r0, r4
 8001818:	eb61 0105 	sbc.w	r1, r1, r5
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	018b      	lsls	r3, r1, #6
 8001826:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800182a:	0182      	lsls	r2, r0, #6
 800182c:	1a12      	subs	r2, r2, r0
 800182e:	eb63 0301 	sbc.w	r3, r3, r1
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	00d9      	lsls	r1, r3, #3
 800183c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001840:	00d0      	lsls	r0, r2, #3
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	1912      	adds	r2, r2, r4
 8001848:	eb45 0303 	adc.w	r3, r5, r3
 800184c:	f04f 0000 	mov.w	r0, #0
 8001850:	f04f 0100 	mov.w	r1, #0
 8001854:	0299      	lsls	r1, r3, #10
 8001856:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800185a:	0290      	lsls	r0, r2, #10
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	461a      	mov	r2, r3
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	f7fe fd02 	bl	8000274 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	60bb      	str	r3, [r7, #8]
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001896:	60bb      	str	r3, [r7, #8]
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	68bb      	ldr	r3, [r7, #8]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	007a1200 	.word	0x007a1200

080018b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08004ea4 	.word	0x08004ea4

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffdc 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	08004ea4 	.word	0x08004ea4

0800191c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	220f      	movs	r2, #15
 800192a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0203 	and.w	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_GetClockConfig+0x5c>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_RCC_GetClockConfig+0x60>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0207 	and.w	r2, r3, #7
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e041      	b.n	8001a16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f839 	bl	8001a1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f9d8 	bl	8001d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d001      	beq.n	8001a4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e04e      	b.n	8001aea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a23      	ldr	r2, [pc, #140]	; (8001af8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d022      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a76:	d01d      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <HAL_TIM_Base_Start_IT+0xc8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d018      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_TIM_Base_Start_IT+0xcc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d013      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1c      	ldr	r2, [pc, #112]	; (8001b04 <HAL_TIM_Base_Start_IT+0xd0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d00e      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1b      	ldr	r2, [pc, #108]	; (8001b08 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d009      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_TIM_Base_Start_IT+0xd8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d004      	beq.n	8001ab4 <HAL_TIM_Base_Start_IT+0x80>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d111      	bne.n	8001ad8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d010      	beq.n	8001ae8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad6:	e007      	b.n	8001ae8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40010000 	.word	0x40010000
 8001afc:	40000400 	.word	0x40000400
 8001b00:	40000800 	.word	0x40000800
 8001b04:	40000c00 	.word	0x40000c00
 8001b08:	40010400 	.word	0x40010400
 8001b0c:	40014000 	.word	0x40014000
 8001b10:	40001800 	.word	0x40001800

08001b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d122      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d11b      	bne.n	8001b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0202 	mvn.w	r2, #2
 8001b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8ee 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 8001b5c:	e005      	b.n	8001b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f8e0 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f8f1 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d122      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f06f 0204 	mvn.w	r2, #4
 8001b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2202      	movs	r2, #2
 8001b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f8c4 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e005      	b.n	8001bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8b6 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f8c7 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d122      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d11b      	bne.n	8001c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f06f 0208 	mvn.w	r2, #8
 8001be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2204      	movs	r2, #4
 8001bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f89a 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 8001c04:	e005      	b.n	8001c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f88c 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f89d 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d122      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	2b10      	cmp	r3, #16
 8001c32:	d11b      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0210 	mvn.w	r2, #16
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2208      	movs	r2, #8
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f870 	bl	8001d38 <HAL_TIM_IC_CaptureCallback>
 8001c58:	e005      	b.n	8001c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f862 	bl	8001d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f873 	bl	8001d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10e      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f06f 0201 	mvn.w	r2, #1
 8001c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fdbe 	bl	8000814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca2:	2b80      	cmp	r3, #128	; 0x80
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb0:	2b80      	cmp	r3, #128	; 0x80
 8001cb2:	d107      	bne.n	8001cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f902 	bl	8001ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b40      	cmp	r3, #64	; 0x40
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	d107      	bne.n	8001cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f838 	bl	8001d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	d10e      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0320 	and.w	r3, r3, #32
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	d107      	bne.n	8001d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0220 	mvn.w	r2, #32
 8001d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8cc 	bl	8001eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a40      	ldr	r2, [pc, #256]	; (8001e88 <TIM_Base_SetConfig+0x114>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <TIM_Base_SetConfig+0x40>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d92:	d00f      	beq.n	8001db4 <TIM_Base_SetConfig+0x40>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a3d      	ldr	r2, [pc, #244]	; (8001e8c <TIM_Base_SetConfig+0x118>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d00b      	beq.n	8001db4 <TIM_Base_SetConfig+0x40>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <TIM_Base_SetConfig+0x11c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d007      	beq.n	8001db4 <TIM_Base_SetConfig+0x40>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3b      	ldr	r2, [pc, #236]	; (8001e94 <TIM_Base_SetConfig+0x120>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d003      	beq.n	8001db4 <TIM_Base_SetConfig+0x40>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <TIM_Base_SetConfig+0x124>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d108      	bne.n	8001dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <TIM_Base_SetConfig+0x114>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d02b      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd4:	d027      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a2c      	ldr	r2, [pc, #176]	; (8001e8c <TIM_Base_SetConfig+0x118>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d023      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a2b      	ldr	r2, [pc, #172]	; (8001e90 <TIM_Base_SetConfig+0x11c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <TIM_Base_SetConfig+0x120>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d01b      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <TIM_Base_SetConfig+0x124>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d017      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <TIM_Base_SetConfig+0x128>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a27      	ldr	r2, [pc, #156]	; (8001ea0 <TIM_Base_SetConfig+0x12c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00f      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <TIM_Base_SetConfig+0x130>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00b      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a25      	ldr	r2, [pc, #148]	; (8001ea8 <TIM_Base_SetConfig+0x134>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a24      	ldr	r2, [pc, #144]	; (8001eac <TIM_Base_SetConfig+0x138>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d003      	beq.n	8001e26 <TIM_Base_SetConfig+0xb2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <TIM_Base_SetConfig+0x13c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d108      	bne.n	8001e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <TIM_Base_SetConfig+0x114>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d003      	beq.n	8001e6c <TIM_Base_SetConfig+0xf8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a0c      	ldr	r2, [pc, #48]	; (8001e98 <TIM_Base_SetConfig+0x124>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d103      	bne.n	8001e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	615a      	str	r2, [r3, #20]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40000400 	.word	0x40000400
 8001e90:	40000800 	.word	0x40000800
 8001e94:	40000c00 	.word	0x40000c00
 8001e98:	40010400 	.word	0x40010400
 8001e9c:	40014000 	.word	0x40014000
 8001ea0:	40014400 	.word	0x40014400
 8001ea4:	40014800 	.word	0x40014800
 8001ea8:	40001800 	.word	0x40001800
 8001eac:	40001c00 	.word	0x40001c00
 8001eb0:	40002000 	.word	0x40002000

08001eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e03f      	b.n	8001f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fcc6 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f905 	bl	8002130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b08a      	sub	sp, #40	; 0x28
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d17c      	bne.n	8002090 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_UART_Transmit+0x2c>
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e075      	b.n	8002092 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_UART_Transmit+0x3e>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e06e      	b.n	8002092 <HAL_UART_Transmit+0x11c>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2221      	movs	r2, #33	; 0x21
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fca:	f7fe fda9 	bl	8000b20 <HAL_GetTick>
 8001fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_UART_Transmit+0x82>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	e003      	b.n	8002000 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002008:	e02a      	b.n	8002060 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2200      	movs	r2, #0
 8002012:	2180      	movs	r1, #128	; 0x80
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f840 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e036      	b.n	8002092 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10b      	bne.n	8002042 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	3302      	adds	r3, #2
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	e007      	b.n	8002052 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002056:	b29b      	uxth	r3, r3
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1cf      	bne.n	800200a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	2200      	movs	r2, #0
 8002072:	2140      	movs	r1, #64	; 0x40
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f000 f810 	bl	800209a <UART_WaitOnFlagUntilTimeout>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e006      	b.n	8002092 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	e000      	b.n	8002092 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002090:	2302      	movs	r3, #2
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	3720      	adds	r7, #32
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4613      	mov	r3, r2
 80020a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020aa:	e02c      	b.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b2:	d028      	beq.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d007      	beq.n	80020ca <UART_WaitOnFlagUntilTimeout+0x30>
 80020ba:	f7fe fd31 	bl	8000b20 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d21d      	bcs.n	8002106 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020d8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2220      	movs	r2, #32
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e00f      	b.n	8002126 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4013      	ands	r3, r2
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	429a      	cmp	r2, r3
 8002114:	bf0c      	ite	eq
 8002116:	2301      	moveq	r3, #1
 8002118:	2300      	movne	r3, #0
 800211a:	b2db      	uxtb	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	429a      	cmp	r2, r3
 8002122:	d0c3      	beq.n	80020ac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002134:	b09f      	sub	sp, #124	; 0x7c
 8002136:	af00      	add	r7, sp, #0
 8002138:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800213a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002146:	68d9      	ldr	r1, [r3, #12]
 8002148:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	ea40 0301 	orr.w	r3, r0, r1
 8002150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	431a      	orrs	r2, r3
 800215c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	431a      	orrs	r2, r3
 8002162:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4313      	orrs	r3, r2
 8002168:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800216a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002174:	f021 010c 	bic.w	r1, r1, #12
 8002178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800217e:	430b      	orrs	r3, r1
 8002180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800218c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800218e:	6999      	ldr	r1, [r3, #24]
 8002190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	ea40 0301 	orr.w	r3, r0, r1
 8002198:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800219a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4bc5      	ldr	r3, [pc, #788]	; (80024b4 <UART_SetConfig+0x384>)
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d004      	beq.n	80021ae <UART_SetConfig+0x7e>
 80021a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4bc3      	ldr	r3, [pc, #780]	; (80024b8 <UART_SetConfig+0x388>)
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d103      	bne.n	80021b6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021ae:	f7ff fba1 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 80021b2:	6778      	str	r0, [r7, #116]	; 0x74
 80021b4:	e002      	b.n	80021bc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021b6:	f7ff fb89 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 80021ba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c4:	f040 80b6 	bne.w	8002334 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ca:	461c      	mov	r4, r3
 80021cc:	f04f 0500 	mov.w	r5, #0
 80021d0:	4622      	mov	r2, r4
 80021d2:	462b      	mov	r3, r5
 80021d4:	1891      	adds	r1, r2, r2
 80021d6:	6439      	str	r1, [r7, #64]	; 0x40
 80021d8:	415b      	adcs	r3, r3
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
 80021dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021e0:	1912      	adds	r2, r2, r4
 80021e2:	eb45 0303 	adc.w	r3, r5, r3
 80021e6:	f04f 0000 	mov.w	r0, #0
 80021ea:	f04f 0100 	mov.w	r1, #0
 80021ee:	00d9      	lsls	r1, r3, #3
 80021f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f4:	00d0      	lsls	r0, r2, #3
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	1911      	adds	r1, r2, r4
 80021fc:	6639      	str	r1, [r7, #96]	; 0x60
 80021fe:	416b      	adcs	r3, r5
 8002200:	667b      	str	r3, [r7, #100]	; 0x64
 8002202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	1891      	adds	r1, r2, r2
 800220e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002210:	415b      	adcs	r3, r3
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002218:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800221c:	f7fe f82a 	bl	8000274 <__aeabi_uldivmod>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4ba5      	ldr	r3, [pc, #660]	; (80024bc <UART_SetConfig+0x38c>)
 8002226:	fba3 2302 	umull	r2, r3, r3, r2
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	011e      	lsls	r6, r3, #4
 800222e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002230:	461c      	mov	r4, r3
 8002232:	f04f 0500 	mov.w	r5, #0
 8002236:	4622      	mov	r2, r4
 8002238:	462b      	mov	r3, r5
 800223a:	1891      	adds	r1, r2, r2
 800223c:	6339      	str	r1, [r7, #48]	; 0x30
 800223e:	415b      	adcs	r3, r3
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
 8002242:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002246:	1912      	adds	r2, r2, r4
 8002248:	eb45 0303 	adc.w	r3, r5, r3
 800224c:	f04f 0000 	mov.w	r0, #0
 8002250:	f04f 0100 	mov.w	r1, #0
 8002254:	00d9      	lsls	r1, r3, #3
 8002256:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800225a:	00d0      	lsls	r0, r2, #3
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	1911      	adds	r1, r2, r4
 8002262:	65b9      	str	r1, [r7, #88]	; 0x58
 8002264:	416b      	adcs	r3, r5
 8002266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	461a      	mov	r2, r3
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	1891      	adds	r1, r2, r2
 8002274:	62b9      	str	r1, [r7, #40]	; 0x28
 8002276:	415b      	adcs	r3, r3
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800227e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002282:	f7fd fff7 	bl	8000274 <__aeabi_uldivmod>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <UART_SetConfig+0x38c>)
 800228c:	fba3 1302 	umull	r1, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	2164      	movs	r1, #100	; 0x64
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	3332      	adds	r3, #50	; 0x32
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <UART_SetConfig+0x38c>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	095b      	lsrs	r3, r3, #5
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022ac:	441e      	add	r6, r3
 80022ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b0:	4618      	mov	r0, r3
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	1894      	adds	r4, r2, r2
 80022bc:	623c      	str	r4, [r7, #32]
 80022be:	415b      	adcs	r3, r3
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022c6:	1812      	adds	r2, r2, r0
 80022c8:	eb41 0303 	adc.w	r3, r1, r3
 80022cc:	f04f 0400 	mov.w	r4, #0
 80022d0:	f04f 0500 	mov.w	r5, #0
 80022d4:	00dd      	lsls	r5, r3, #3
 80022d6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022da:	00d4      	lsls	r4, r2, #3
 80022dc:	4622      	mov	r2, r4
 80022de:	462b      	mov	r3, r5
 80022e0:	1814      	adds	r4, r2, r0
 80022e2:	653c      	str	r4, [r7, #80]	; 0x50
 80022e4:	414b      	adcs	r3, r1
 80022e6:	657b      	str	r3, [r7, #84]	; 0x54
 80022e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	461a      	mov	r2, r3
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	1891      	adds	r1, r2, r2
 80022f4:	61b9      	str	r1, [r7, #24]
 80022f6:	415b      	adcs	r3, r3
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002302:	f7fd ffb7 	bl	8000274 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4b6c      	ldr	r3, [pc, #432]	; (80024bc <UART_SetConfig+0x38c>)
 800230c:	fba3 1302 	umull	r1, r3, r3, r2
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	2164      	movs	r1, #100	; 0x64
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	3332      	adds	r3, #50	; 0x32
 800231e:	4a67      	ldr	r2, [pc, #412]	; (80024bc <UART_SetConfig+0x38c>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	095b      	lsrs	r3, r3, #5
 8002326:	f003 0207 	and.w	r2, r3, #7
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4432      	add	r2, r6
 8002330:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002332:	e0b9      	b.n	80024a8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002336:	461c      	mov	r4, r3
 8002338:	f04f 0500 	mov.w	r5, #0
 800233c:	4622      	mov	r2, r4
 800233e:	462b      	mov	r3, r5
 8002340:	1891      	adds	r1, r2, r2
 8002342:	6139      	str	r1, [r7, #16]
 8002344:	415b      	adcs	r3, r3
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800234c:	1912      	adds	r2, r2, r4
 800234e:	eb45 0303 	adc.w	r3, r5, r3
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	00d9      	lsls	r1, r3, #3
 800235c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002360:	00d0      	lsls	r0, r2, #3
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	eb12 0804 	adds.w	r8, r2, r4
 800236a:	eb43 0905 	adc.w	r9, r3, r5
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	4618      	mov	r0, r3
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	008b      	lsls	r3, r1, #2
 8002382:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002386:	0082      	lsls	r2, r0, #2
 8002388:	4640      	mov	r0, r8
 800238a:	4649      	mov	r1, r9
 800238c:	f7fd ff72 	bl	8000274 <__aeabi_uldivmod>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4b49      	ldr	r3, [pc, #292]	; (80024bc <UART_SetConfig+0x38c>)
 8002396:	fba3 2302 	umull	r2, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	011e      	lsls	r6, r3, #4
 800239e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023a0:	4618      	mov	r0, r3
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	1894      	adds	r4, r2, r2
 80023ac:	60bc      	str	r4, [r7, #8]
 80023ae:	415b      	adcs	r3, r3
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023b6:	1812      	adds	r2, r2, r0
 80023b8:	eb41 0303 	adc.w	r3, r1, r3
 80023bc:	f04f 0400 	mov.w	r4, #0
 80023c0:	f04f 0500 	mov.w	r5, #0
 80023c4:	00dd      	lsls	r5, r3, #3
 80023c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023ca:	00d4      	lsls	r4, r2, #3
 80023cc:	4622      	mov	r2, r4
 80023ce:	462b      	mov	r3, r5
 80023d0:	1814      	adds	r4, r2, r0
 80023d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80023d4:	414b      	adcs	r3, r1
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	008b      	lsls	r3, r1, #2
 80023ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023f0:	0082      	lsls	r2, r0, #2
 80023f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023f6:	f7fd ff3d 	bl	8000274 <__aeabi_uldivmod>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <UART_SetConfig+0x38c>)
 8002400:	fba3 1302 	umull	r1, r3, r3, r2
 8002404:	095b      	lsrs	r3, r3, #5
 8002406:	2164      	movs	r1, #100	; 0x64
 8002408:	fb01 f303 	mul.w	r3, r1, r3
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	3332      	adds	r3, #50	; 0x32
 8002412:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <UART_SetConfig+0x38c>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241e:	441e      	add	r6, r3
 8002420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002422:	4618      	mov	r0, r3
 8002424:	f04f 0100 	mov.w	r1, #0
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	1894      	adds	r4, r2, r2
 800242e:	603c      	str	r4, [r7, #0]
 8002430:	415b      	adcs	r3, r3
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002438:	1812      	adds	r2, r2, r0
 800243a:	eb41 0303 	adc.w	r3, r1, r3
 800243e:	f04f 0400 	mov.w	r4, #0
 8002442:	f04f 0500 	mov.w	r5, #0
 8002446:	00dd      	lsls	r5, r3, #3
 8002448:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800244c:	00d4      	lsls	r4, r2, #3
 800244e:	4622      	mov	r2, r4
 8002450:	462b      	mov	r3, r5
 8002452:	eb12 0a00 	adds.w	sl, r2, r0
 8002456:	eb43 0b01 	adc.w	fp, r3, r1
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4618      	mov	r0, r3
 8002460:	f04f 0100 	mov.w	r1, #0
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	008b      	lsls	r3, r1, #2
 800246e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002472:	0082      	lsls	r2, r0, #2
 8002474:	4650      	mov	r0, sl
 8002476:	4659      	mov	r1, fp
 8002478:	f7fd fefc 	bl	8000274 <__aeabi_uldivmod>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <UART_SetConfig+0x38c>)
 8002482:	fba3 1302 	umull	r1, r3, r3, r2
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	2164      	movs	r1, #100	; 0x64
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	3332      	adds	r3, #50	; 0x32
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <UART_SetConfig+0x38c>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	f003 020f 	and.w	r2, r3, #15
 80024a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4432      	add	r2, r6
 80024a6:	609a      	str	r2, [r3, #8]
}
 80024a8:	bf00      	nop
 80024aa:	377c      	adds	r7, #124	; 0x7c
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024b2:	bf00      	nop
 80024b4:	40011000 	.word	0x40011000
 80024b8:	40011400 	.word	0x40011400
 80024bc:	51eb851f 	.word	0x51eb851f

080024c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f103 0208 	add.w	r2, r3, #8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f103 0208 	add.w	r2, r3, #8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 0208 	add.w	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d103      	bne.n	8002582 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e00c      	b.n	800259c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3308      	adds	r3, #8
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	e002      	b.n	8002590 <vListInsert+0x2e>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	429a      	cmp	r2, r3
 800259a:	d2f6      	bcs.n	800258a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	601a      	str	r2, [r3, #0]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6892      	ldr	r2, [r2, #8]
 80025ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6852      	ldr	r2, [r2, #4]
 80025f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d103      	bne.n	8002608 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002628:	b580      	push	{r7, lr}
 800262a:	b08c      	sub	sp, #48	; 0x30
 800262c:	af04      	add	r7, sp, #16
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f000 ff85 	bl	800354c <pvPortMalloc>
 8002642:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00e      	beq.n	8002668 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800264a:	2058      	movs	r0, #88	; 0x58
 800264c:	f000 ff7e 	bl	800354c <pvPortMalloc>
 8002650:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
 800265e:	e005      	b.n	800266c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002660:	6978      	ldr	r0, [r7, #20]
 8002662:	f001 f853 	bl	800370c <vPortFree>
 8002666:	e001      	b.n	800266c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d013      	beq.n	800269a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002672:	88fa      	ldrh	r2, [r7, #6]
 8002674:	2300      	movs	r3, #0
 8002676:	9303      	str	r3, [sp, #12]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	9302      	str	r3, [sp, #8]
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f80e 	bl	80026aa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800268e:	69f8      	ldr	r0, [r7, #28]
 8002690:	f000 f8a2 	bl	80027d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002694:	2301      	movs	r3, #1
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	e002      	b.n	80026a0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026a0:	69bb      	ldr	r3, [r7, #24]
    }
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b088      	sub	sp, #32
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	21a5      	movs	r1, #165	; 0xa5
 80026c4:	f002 fb5a 	bl	8004d7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80026c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026d2:	3b01      	subs	r3, #1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f023 0307 	bic.w	r3, r3, #7
 80026e0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <prvInitialiseNewTask+0x58>
        __asm volatile
 80026ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f0:	f383 8811 	msr	BASEPRI, r3
 80026f4:	f3bf 8f6f 	isb	sy
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	617b      	str	r3, [r7, #20]
    }
 80026fe:	bf00      	nop
 8002700:	e7fe      	b.n	8002700 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01f      	beq.n	8002748 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e012      	b.n	8002734 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	7819      	ldrb	r1, [r3, #0]
 8002716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	3334      	adds	r3, #52	; 0x34
 800271e:	460a      	mov	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b09      	cmp	r3, #9
 8002738:	d9e9      	bls.n	800270e <prvInitialiseNewTask+0x64>
 800273a:	e000      	b.n	800273e <prvInitialiseNewTask+0x94>
            {
                break;
 800273c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002746:	e003      	b.n	8002750 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	2b04      	cmp	r3, #4
 8002754:	d901      	bls.n	800275a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002756:	2304      	movs	r3, #4
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002764:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	2200      	movs	r2, #0
 800276a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	3304      	adds	r3, #4
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fec5 	bl	8002500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	3318      	adds	r3, #24
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fec0 	bl	8002500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002784:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	f1c3 0205 	rsb	r2, r3, #5
 800278c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002794:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	3350      	adds	r3, #80	; 0x50
 800279a:	2204      	movs	r2, #4
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 faec 	bl	8004d7c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	3354      	adds	r3, #84	; 0x54
 80027a8:	2201      	movs	r2, #1
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f002 fae5 	bl	8004d7c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	68f9      	ldr	r1, [r7, #12]
 80027b6:	69b8      	ldr	r0, [r7, #24]
 80027b8:	f000 fc2c 	bl	8003014 <pxPortInitialiseStack>
 80027bc:	4602      	mov	r2, r0
 80027be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c0:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d002      	beq.n	80027ce <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80027d8:	b5b0      	push	{r4, r5, r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80027e0:	f000 fdc8 	bl	8003374 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80027e4:	4b3b      	ldr	r3, [pc, #236]	; (80028d4 <prvAddNewTaskToReadyList+0xfc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a3a      	ldr	r2, [pc, #232]	; (80028d4 <prvAddNewTaskToReadyList+0xfc>)
 80027ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <prvAddNewTaskToReadyList+0x100>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80027f6:	4a38      	ldr	r2, [pc, #224]	; (80028d8 <prvAddNewTaskToReadyList+0x100>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <prvAddNewTaskToReadyList+0xfc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d110      	bne.n	8002826 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002804:	f000 faf4 	bl	8002df0 <prvInitialiseTaskLists>
 8002808:	e00d      	b.n	8002826 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800280a:	4b34      	ldr	r3, [pc, #208]	; (80028dc <prvAddNewTaskToReadyList+0x104>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d109      	bne.n	8002826 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <prvAddNewTaskToReadyList+0x100>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281c:	429a      	cmp	r2, r3
 800281e:	d802      	bhi.n	8002826 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002820:	4a2d      	ldr	r2, [pc, #180]	; (80028d8 <prvAddNewTaskToReadyList+0x100>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002826:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <prvAddNewTaskToReadyList+0x108>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a2c      	ldr	r2, [pc, #176]	; (80028e0 <prvAddNewTaskToReadyList+0x108>)
 800282e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <prvAddNewTaskToReadyList+0x108>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <prvAddNewTaskToReadyList+0x94>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fffd 	bl	8004840 <SEGGER_SYSVIEW_OnTaskCreate>
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	461d      	mov	r5, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461c      	mov	r4, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	1ae3      	subs	r3, r4, r3
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	462b      	mov	r3, r5
 8002868:	f001 f86e 	bl	8003948 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 f86a 	bl	8004948 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	2201      	movs	r2, #1
 800287a:	409a      	lsls	r2, r3
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <prvAddNewTaskToReadyList+0x10c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <prvAddNewTaskToReadyList+0x10c>)
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <prvAddNewTaskToReadyList+0x110>)
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7ff fe3c 	bl	800251a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028a2:	f000 fd97 	bl	80033d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028a6:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <prvAddNewTaskToReadyList+0x104>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00e      	beq.n	80028cc <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <prvAddNewTaskToReadyList+0x100>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <prvAddNewTaskToReadyList+0x114>)
 80028be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bdb0      	pop	{r4, r5, r7, pc}
 80028d4:	20000108 	.word	0x20000108
 80028d8:	20000030 	.word	0x20000030
 80028dc:	20000114 	.word	0x20000114
 80028e0:	20000124 	.word	0x20000124
 80028e4:	20000110 	.word	0x20000110
 80028e8:	20000034 	.word	0x20000034
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d01b      	beq.n	800293a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <vTaskDelay+0x68>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <vTaskDelay+0x30>
        __asm volatile
 800290a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800290e:	f383 8811 	msr	BASEPRI, r3
 8002912:	f3bf 8f6f 	isb	sy
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	60bb      	str	r3, [r7, #8]
    }
 800291c:	bf00      	nop
 800291e:	e7fe      	b.n	800291e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002920:	f000 f87a 	bl	8002a18 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	2023      	movs	r0, #35	; 0x23
 8002928:	f001 fbba 	bl	80040a0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800292c:	2100      	movs	r1, #0
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 faf8 	bl	8002f24 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002934:	f000 f87e 	bl	8002a34 <xTaskResumeAll>
 8002938:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d107      	bne.n	8002950 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <vTaskDelay+0x6c>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002950:	bf00      	nop
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000130 	.word	0x20000130
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <vTaskStartScheduler+0x98>)
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	2282      	movs	r2, #130	; 0x82
 8002972:	4922      	ldr	r1, [pc, #136]	; (80029fc <vTaskStartScheduler+0x9c>)
 8002974:	4822      	ldr	r0, [pc, #136]	; (8002a00 <vTaskStartScheduler+0xa0>)
 8002976:	f7ff fe57 	bl	8002628 <xTaskCreate>
 800297a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d124      	bne.n	80029cc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	60bb      	str	r3, [r7, #8]
    }
 8002994:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002996:	4b1b      	ldr	r3, [pc, #108]	; (8002a04 <vTaskStartScheduler+0xa4>)
 8002998:	f04f 32ff 	mov.w	r2, #4294967295
 800299c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800299e:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <vTaskStartScheduler+0xa8>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <vTaskStartScheduler+0xac>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <vTaskStartScheduler+0xb0>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <vTaskStartScheduler+0x98>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d102      	bne.n	80029bc <vTaskStartScheduler+0x5c>
 80029b6:	f001 ff27 	bl	8004808 <SEGGER_SYSVIEW_OnIdle>
 80029ba:	e004      	b.n	80029c6 <vTaskStartScheduler+0x66>
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <vTaskStartScheduler+0xb0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 ff7f 	bl	80048c4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80029c6:	f000 fbb5 	bl	8003134 <xPortStartScheduler>
 80029ca:	e00e      	b.n	80029ea <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d10a      	bne.n	80029ea <vTaskStartScheduler+0x8a>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	607b      	str	r3, [r7, #4]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <vTaskStartScheduler+0xb4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000012c 	.word	0x2000012c
 80029fc:	08004e1c 	.word	0x08004e1c
 8002a00:	08002dc1 	.word	0x08002dc1
 8002a04:	20000128 	.word	0x20000128
 8002a08:	20000114 	.word	0x20000114
 8002a0c:	2000010c 	.word	0x2000010c
 8002a10:	20000030 	.word	0x20000030
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <vTaskSuspendAll+0x18>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <vTaskSuspendAll+0x18>)
 8002a24:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a26:	bf00      	nop
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	20000130 	.word	0x20000130

08002a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a42:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <xTaskResumeAll+0x11c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10a      	bne.n	8002a60 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	603b      	str	r3, [r7, #0]
    }
 8002a5c:	bf00      	nop
 8002a5e:	e7fe      	b.n	8002a5e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a60:	f000 fc88 	bl	8003374 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a64:	4b3a      	ldr	r3, [pc, #232]	; (8002b50 <xTaskResumeAll+0x11c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	4a39      	ldr	r2, [pc, #228]	; (8002b50 <xTaskResumeAll+0x11c>)
 8002a6c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a6e:	4b38      	ldr	r3, [pc, #224]	; (8002b50 <xTaskResumeAll+0x11c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d165      	bne.n	8002b42 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a76:	4b37      	ldr	r3, [pc, #220]	; (8002b54 <xTaskResumeAll+0x120>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d061      	beq.n	8002b42 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a7e:	e032      	b.n	8002ae6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <xTaskResumeAll+0x124>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3318      	adds	r3, #24
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fda1 	bl	80025d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fd9c 	bl	80025d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 ff52 	bl	8004948 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	4b2b      	ldr	r3, [pc, #172]	; (8002b5c <xTaskResumeAll+0x128>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <xTaskResumeAll+0x128>)
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <xTaskResumeAll+0x12c>)
 8002ac4:	441a      	add	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f7ff fd24 	bl	800251a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad6:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <xTaskResumeAll+0x130>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002ae0:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <xTaskResumeAll+0x134>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <xTaskResumeAll+0x124>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1c8      	bne.n	8002a80 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002af4:	f000 f9fa 	bl	8002eec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <xTaskResumeAll+0x138>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d010      	beq.n	8002b26 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002b04:	f000 f836 	bl	8002b74 <xTaskIncrementTick>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002b0e:	4b16      	ldr	r3, [pc, #88]	; (8002b68 <xTaskResumeAll+0x134>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f1      	bne.n	8002b04 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <xTaskResumeAll+0x138>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <xTaskResumeAll+0x134>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <xTaskResumeAll+0x13c>)
 8002b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b42:	f000 fc47 	bl	80033d4 <vPortExitCritical>

    return xAlreadyYielded;
 8002b46:	68bb      	ldr	r3, [r7, #8]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	20000130 	.word	0x20000130
 8002b54:	20000108 	.word	0x20000108
 8002b58:	200000c8 	.word	0x200000c8
 8002b5c:	20000110 	.word	0x20000110
 8002b60:	20000034 	.word	0x20000034
 8002b64:	20000030 	.word	0x20000030
 8002b68:	2000011c 	.word	0x2000011c
 8002b6c:	20000118 	.word	0x20000118
 8002b70:	e000ed04 	.word	0xe000ed04

08002b74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b7e:	4b50      	ldr	r3, [pc, #320]	; (8002cc0 <xTaskIncrementTick+0x14c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f040 8092 	bne.w	8002cac <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b88:	4b4e      	ldr	r3, [pc, #312]	; (8002cc4 <xTaskIncrementTick+0x150>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <xTaskIncrementTick+0x150>)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d120      	bne.n	8002bde <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <xTaskIncrementTick+0x154>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <xTaskIncrementTick+0x48>
        __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	603b      	str	r3, [r7, #0]
    }
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <xTaskIncrementTick+0x46>
 8002bbc:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <xTaskIncrementTick+0x154>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <xTaskIncrementTick+0x158>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a40      	ldr	r2, [pc, #256]	; (8002cc8 <xTaskIncrementTick+0x154>)
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <xTaskIncrementTick+0x158>)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b3f      	ldr	r3, [pc, #252]	; (8002cd0 <xTaskIncrementTick+0x15c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <xTaskIncrementTick+0x15c>)
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	f000 f987 	bl	8002eec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <xTaskIncrementTick+0x160>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d34c      	bcc.n	8002c82 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <xTaskIncrementTick+0x154>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <xTaskIncrementTick+0x160>)
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	601a      	str	r2, [r3, #0]
                    break;
 8002bfa:	e042      	b.n	8002c82 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bfc:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <xTaskIncrementTick+0x154>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d203      	bcs.n	8002c1c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c14:	4a2f      	ldr	r2, [pc, #188]	; (8002cd4 <xTaskIncrementTick+0x160>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c1a:	e032      	b.n	8002c82 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fcd7 	bl	80025d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d004      	beq.n	8002c38 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3318      	adds	r3, #24
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fcce 	bl	80025d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 fe84 	bl	8004948 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2201      	movs	r2, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <xTaskIncrementTick+0x164>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	4a22      	ldr	r2, [pc, #136]	; (8002cd8 <xTaskIncrementTick+0x164>)
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <xTaskIncrementTick+0x168>)
 8002c60:	441a      	add	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f7ff fc56 	bl	800251a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <xTaskIncrementTick+0x16c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d3b5      	bcc.n	8002be8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c80:	e7b2      	b.n	8002be8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <xTaskIncrementTick+0x16c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c88:	4914      	ldr	r1, [pc, #80]	; (8002cdc <xTaskIncrementTick+0x168>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d901      	bls.n	8002c9e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <xTaskIncrementTick+0x170>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	e004      	b.n	8002cb6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <xTaskIncrementTick+0x174>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <xTaskIncrementTick+0x174>)
 8002cb4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002cb6:	697b      	ldr	r3, [r7, #20]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20000130 	.word	0x20000130
 8002cc4:	2000010c 	.word	0x2000010c
 8002cc8:	200000c0 	.word	0x200000c0
 8002ccc:	200000c4 	.word	0x200000c4
 8002cd0:	20000120 	.word	0x20000120
 8002cd4:	20000128 	.word	0x20000128
 8002cd8:	20000110 	.word	0x20000110
 8002cdc:	20000034 	.word	0x20000034
 8002ce0:	20000030 	.word	0x20000030
 8002ce4:	2000011c 	.word	0x2000011c
 8002ce8:	20000118 	.word	0x20000118

08002cec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cf2:	4b2d      	ldr	r3, [pc, #180]	; (8002da8 <vTaskSwitchContext+0xbc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <vTaskSwitchContext+0xc0>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d00:	e04d      	b.n	8002d9e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002d02:	4b2a      	ldr	r3, [pc, #168]	; (8002dac <vTaskSwitchContext+0xc0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d08:	4b29      	ldr	r3, [pc, #164]	; (8002db0 <vTaskSwitchContext+0xc4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f1c3 031f 	rsb	r3, r3, #31
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	4925      	ldr	r1, [pc, #148]	; (8002db4 <vTaskSwitchContext+0xc8>)
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	607b      	str	r3, [r7, #4]
    }
 8002d44:	bf00      	nop
 8002d46:	e7fe      	b.n	8002d46 <vTaskSwitchContext+0x5a>
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4a18      	ldr	r2, [pc, #96]	; (8002db4 <vTaskSwitchContext+0xc8>)
 8002d54:	4413      	add	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	605a      	str	r2, [r3, #4]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3308      	adds	r3, #8
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d104      	bne.n	8002d78 <vTaskSwitchContext+0x8c>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <vTaskSwitchContext+0xcc>)
 8002d80:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <vTaskSwitchContext+0xcc>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <vTaskSwitchContext+0xd0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d102      	bne.n	8002d94 <vTaskSwitchContext+0xa8>
 8002d8e:	f001 fd3b 	bl	8004808 <SEGGER_SYSVIEW_OnIdle>
}
 8002d92:	e004      	b.n	8002d9e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <vTaskSwitchContext+0xcc>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fd93 	bl	80048c4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000130 	.word	0x20000130
 8002dac:	2000011c 	.word	0x2000011c
 8002db0:	20000110 	.word	0x20000110
 8002db4:	20000034 	.word	0x20000034
 8002db8:	20000030 	.word	0x20000030
 8002dbc:	2000012c 	.word	0x2000012c

08002dc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002dc8:	f000 f852 	bl	8002e70 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <prvIdleTask+0x28>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d9f9      	bls.n	8002dc8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <prvIdleTask+0x2c>)
 8002dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002de4:	e7f0      	b.n	8002dc8 <prvIdleTask+0x8>
 8002de6:	bf00      	nop
 8002de8:	20000034 	.word	0x20000034
 8002dec:	e000ed04 	.word	0xe000ed04

08002df0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002df6:	2300      	movs	r3, #0
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	e00c      	b.n	8002e16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4a12      	ldr	r2, [pc, #72]	; (8002e50 <prvInitialiseTaskLists+0x60>)
 8002e08:	4413      	add	r3, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fb58 	bl	80024c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	607b      	str	r3, [r7, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d9ef      	bls.n	8002dfc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <prvInitialiseTaskLists+0x64>)
 8002e1e:	f7ff fb4f 	bl	80024c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e22:	480d      	ldr	r0, [pc, #52]	; (8002e58 <prvInitialiseTaskLists+0x68>)
 8002e24:	f7ff fb4c 	bl	80024c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <prvInitialiseTaskLists+0x6c>)
 8002e2a:	f7ff fb49 	bl	80024c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002e2e:	480c      	ldr	r0, [pc, #48]	; (8002e60 <prvInitialiseTaskLists+0x70>)
 8002e30:	f7ff fb46 	bl	80024c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002e34:	480b      	ldr	r0, [pc, #44]	; (8002e64 <prvInitialiseTaskLists+0x74>)
 8002e36:	f7ff fb43 	bl	80024c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <prvInitialiseTaskLists+0x78>)
 8002e3c:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <prvInitialiseTaskLists+0x64>)
 8002e3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <prvInitialiseTaskLists+0x7c>)
 8002e42:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <prvInitialiseTaskLists+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000034 	.word	0x20000034
 8002e54:	20000098 	.word	0x20000098
 8002e58:	200000ac 	.word	0x200000ac
 8002e5c:	200000c8 	.word	0x200000c8
 8002e60:	200000dc 	.word	0x200000dc
 8002e64:	200000f4 	.word	0x200000f4
 8002e68:	200000c0 	.word	0x200000c0
 8002e6c:	200000c4 	.word	0x200000c4

08002e70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e76:	e019      	b.n	8002eac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002e78:	f000 fa7c 	bl	8003374 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <prvCheckTasksWaitingTermination+0x50>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fba3 	bl	80025d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <prvCheckTasksWaitingTermination+0x54>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <prvCheckTasksWaitingTermination+0x54>)
 8002e96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <prvCheckTasksWaitingTermination+0x58>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <prvCheckTasksWaitingTermination+0x58>)
 8002ea0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ea2:	f000 fa97 	bl	80033d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f810 	bl	8002ecc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <prvCheckTasksWaitingTermination+0x58>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e1      	bne.n	8002e78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200000dc 	.word	0x200000dc
 8002ec4:	20000108 	.word	0x20000108
 8002ec8:	200000f0 	.word	0x200000f0

08002ecc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fc17 	bl	800370c <vPortFree>
                vPortFree( pxTCB );
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 fc14 	bl	800370c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <prvResetNextTaskUnblockTime+0x30>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <prvResetNextTaskUnblockTime+0x34>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f02:	e005      	b.n	8002f10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <prvResetNextTaskUnblockTime+0x30>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <prvResetNextTaskUnblockTime+0x34>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	200000c0 	.word	0x200000c0
 8002f20:	20000128 	.word	0x20000128

08002f24 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f34:	4b31      	ldr	r3, [pc, #196]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fb4a 	bl	80025d4 <uxListRemove>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10b      	bne.n	8002f5e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f46:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002f5c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d110      	bne.n	8002f88 <prvAddCurrentTaskToDelayedList+0x64>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00d      	beq.n	8002f88 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002f6c:	4b23      	ldr	r3, [pc, #140]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	211b      	movs	r1, #27
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fd2a 	bl	80049cc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4820      	ldr	r0, [pc, #128]	; (8003004 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002f82:	f7ff faca 	bl	800251a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f86:	e032      	b.n	8002fee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f90:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f98:	68ba      	ldr	r2, [r7, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d20f      	bcs.n	8002fc0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002fa0:	4b16      	ldr	r3, [pc, #88]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f001 fd10 	bl	80049cc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <prvAddCurrentTaskToDelayedList+0xe4>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f7ff fad2 	bl	8002562 <vListInsert>
}
 8002fbe:	e016      	b.n	8002fee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 fd00 	bl	80049cc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <prvAddCurrentTaskToDelayedList+0xe8>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	4610      	mov	r0, r2
 8002fda:	f7ff fac2 	bl	8002562 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <prvAddCurrentTaskToDelayedList+0xec>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d202      	bcs.n	8002fee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8002fe8:	4a09      	ldr	r2, [pc, #36]	; (8003010 <prvAddCurrentTaskToDelayedList+0xec>)
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6013      	str	r3, [r2, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000010c 	.word	0x2000010c
 8002ffc:	20000030 	.word	0x20000030
 8003000:	20000110 	.word	0x20000110
 8003004:	200000f4 	.word	0x200000f4
 8003008:	200000c4 	.word	0x200000c4
 800300c:	200000c0 	.word	0x200000c0
 8003010:	20000128 	.word	0x20000128

08003014 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b04      	subs	r3, #4
 8003024:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800302c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3b04      	subs	r3, #4
 8003032:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f023 0201 	bic.w	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	3b04      	subs	r3, #4
 8003042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003044:	4a0c      	ldr	r2, [pc, #48]	; (8003078 <pxPortInitialiseStack+0x64>)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	3b14      	subs	r3, #20
 800304e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3b04      	subs	r3, #4
 800305a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f06f 0202 	mvn.w	r2, #2
 8003062:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3b20      	subs	r3, #32
 8003068:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800306a:	68fb      	ldr	r3, [r7, #12]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	0800307d 	.word	0x0800307d

0800307c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <prvTaskExitError+0x54>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d00a      	beq.n	80030a6 <prvTaskExitError+0x2a>
        __asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	60fb      	str	r3, [r7, #12]
    }
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <prvTaskExitError+0x28>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	60bb      	str	r3, [r7, #8]
    }
 80030b8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80030ba:	bf00      	nop
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0fc      	beq.n	80030bc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	20000010 	.word	0x20000010
	...

080030e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <pxCurrentTCBConst2>)
 80030e2:	6819      	ldr	r1, [r3, #0]
 80030e4:	6808      	ldr	r0, [r1, #0]
 80030e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ea:	f380 8809 	msr	PSP, r0
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f380 8811 	msr	BASEPRI, r0
 80030fa:	4770      	bx	lr
 80030fc:	f3af 8000 	nop.w

08003100 <pxCurrentTCBConst2>:
 8003100:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop

08003108 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003108:	4808      	ldr	r0, [pc, #32]	; (800312c <prvPortStartFirstTask+0x24>)
 800310a:	6800      	ldr	r0, [r0, #0]
 800310c:	6800      	ldr	r0, [r0, #0]
 800310e:	f380 8808 	msr	MSP, r0
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f380 8814 	msr	CONTROL, r0
 800311a:	b662      	cpsie	i
 800311c:	b661      	cpsie	f
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	df00      	svc	0
 8003128:	bf00      	nop
 800312a:	0000      	.short	0x0000
 800312c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop

08003134 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800313a:	4b46      	ldr	r3, [pc, #280]	; (8003254 <xPortStartScheduler+0x120>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a46      	ldr	r2, [pc, #280]	; (8003258 <xPortStartScheduler+0x124>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d10a      	bne.n	800315a <xPortStartScheduler+0x26>
        __asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	613b      	str	r3, [r7, #16]
    }
 8003156:	bf00      	nop
 8003158:	e7fe      	b.n	8003158 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <xPortStartScheduler+0x120>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3f      	ldr	r2, [pc, #252]	; (800325c <xPortStartScheduler+0x128>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10a      	bne.n	800317a <xPortStartScheduler+0x46>
        __asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	60fb      	str	r3, [r7, #12]
    }
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <xPortStartScheduler+0x12c>)
 800317c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b31      	ldr	r3, [pc, #196]	; (8003264 <xPortStartScheduler+0x130>)
 80031a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031a2:	4b31      	ldr	r3, [pc, #196]	; (8003268 <xPortStartScheduler+0x134>)
 80031a4:	2207      	movs	r2, #7
 80031a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031a8:	e009      	b.n	80031be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <xPortStartScheduler+0x134>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <xPortStartScheduler+0x134>)
 80031b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b80      	cmp	r3, #128	; 0x80
 80031c8:	d0ef      	beq.n	80031aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031ca:	4b27      	ldr	r3, [pc, #156]	; (8003268 <xPortStartScheduler+0x134>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00a      	beq.n	80031ec <xPortStartScheduler+0xb8>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60bb      	str	r3, [r7, #8]
    }
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031ec:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <xPortStartScheduler+0x134>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <xPortStartScheduler+0x134>)
 80031f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <xPortStartScheduler+0x134>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031fe:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <xPortStartScheduler+0x134>)
 8003200:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <xPortStartScheduler+0x138>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a17      	ldr	r2, [pc, #92]	; (800326c <xPortStartScheduler+0x138>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003214:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <xPortStartScheduler+0x138>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a14      	ldr	r2, [pc, #80]	; (800326c <xPortStartScheduler+0x138>)
 800321c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003220:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003222:	f000 f963 	bl	80034ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <xPortStartScheduler+0x13c>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800322c:	f000 f982 	bl	8003534 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <xPortStartScheduler+0x140>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a0f      	ldr	r2, [pc, #60]	; (8003274 <xPortStartScheduler+0x140>)
 8003236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800323a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800323c:	f7ff ff64 	bl	8003108 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003240:	f7ff fd54 	bl	8002cec <vTaskSwitchContext>
    prvTaskExitError();
 8003244:	f7ff ff1a 	bl	800307c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000ed00 	.word	0xe000ed00
 8003258:	410fc271 	.word	0x410fc271
 800325c:	410fc270 	.word	0x410fc270
 8003260:	e000e400 	.word	0xe000e400
 8003264:	20000134 	.word	0x20000134
 8003268:	20000138 	.word	0x20000138
 800326c:	e000ed20 	.word	0xe000ed20
 8003270:	20000010 	.word	0x20000010
 8003274:	e000ef34 	.word	0xe000ef34

08003278 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800327e:	4b37      	ldr	r3, [pc, #220]	; (800335c <vInitPrioGroupValue+0xe4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a37      	ldr	r2, [pc, #220]	; (8003360 <vInitPrioGroupValue+0xe8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10a      	bne.n	800329e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	613b      	str	r3, [r7, #16]
    }
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800329e:	4b2f      	ldr	r3, [pc, #188]	; (800335c <vInitPrioGroupValue+0xe4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a30      	ldr	r2, [pc, #192]	; (8003364 <vInitPrioGroupValue+0xec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10a      	bne.n	80032be <vInitPrioGroupValue+0x46>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	60fb      	str	r3, [r7, #12]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <vInitPrioGroupValue+0xf0>)
 80032c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	22ff      	movs	r2, #255	; 0xff
 80032ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b22      	ldr	r3, [pc, #136]	; (800336c <vInitPrioGroupValue+0xf4>)
 80032e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80032e6:	4b22      	ldr	r3, [pc, #136]	; (8003370 <vInitPrioGroupValue+0xf8>)
 80032e8:	2207      	movs	r2, #7
 80032ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032ec:	e009      	b.n	8003302 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <vInitPrioGroupValue+0xf8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	4a1e      	ldr	r2, [pc, #120]	; (8003370 <vInitPrioGroupValue+0xf8>)
 80032f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d0ef      	beq.n	80032ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <vInitPrioGroupValue+0xf8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1c3 0307 	rsb	r3, r3, #7
 8003316:	2b04      	cmp	r3, #4
 8003318:	d00a      	beq.n	8003330 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60bb      	str	r3, [r7, #8]
    }
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <vInitPrioGroupValue+0xf8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	4a0e      	ldr	r2, [pc, #56]	; (8003370 <vInitPrioGroupValue+0xf8>)
 8003338:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <vInitPrioGroupValue+0xf8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <vInitPrioGroupValue+0xf8>)
 8003344:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00
 8003360:	410fc271 	.word	0x410fc271
 8003364:	410fc270 	.word	0x410fc270
 8003368:	e000e400 	.word	0xe000e400
 800336c:	20000134 	.word	0x20000134
 8003370:	20000138 	.word	0x20000138

08003374 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
        __asm volatile
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	607b      	str	r3, [r7, #4]
    }
 800338c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <vPortEnterCritical+0x58>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <vPortEnterCritical+0x58>)
 8003396:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <vPortEnterCritical+0x58>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10f      	bne.n	80033c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <vPortEnterCritical+0x5c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	603b      	str	r3, [r7, #0]
    }
 80033bc:	bf00      	nop
 80033be:	e7fe      	b.n	80033be <vPortEnterCritical+0x4a>
    }
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	20000010 	.word	0x20000010
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <vPortExitCritical+0x50>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10a      	bne.n	80033f8 <vPortExitCritical+0x24>
        __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	607b      	str	r3, [r7, #4]
    }
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <vPortExitCritical+0x50>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	4a09      	ldr	r2, [pc, #36]	; (8003424 <vPortExitCritical+0x50>)
 8003400:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003402:	4b08      	ldr	r3, [pc, #32]	; (8003424 <vPortExitCritical+0x50>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d105      	bne.n	8003416 <vPortExitCritical+0x42>
 800340a:	2300      	movs	r3, #0
 800340c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003414:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000010 	.word	0x20000010
	...

08003430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003430:	f3ef 8009 	mrs	r0, PSP
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <pxCurrentTCBConst>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	f01e 0f10 	tst.w	lr, #16
 8003440:	bf08      	it	eq
 8003442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800344a:	6010      	str	r0, [r2, #0]
 800344c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003450:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003454:	f380 8811 	msr	BASEPRI, r0
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	f3bf 8f6f 	isb	sy
 8003460:	f7ff fc44 	bl	8002cec <vTaskSwitchContext>
 8003464:	f04f 0000 	mov.w	r0, #0
 8003468:	f380 8811 	msr	BASEPRI, r0
 800346c:	bc09      	pop	{r0, r3}
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	6808      	ldr	r0, [r1, #0]
 8003472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003476:	f01e 0f10 	tst.w	lr, #16
 800347a:	bf08      	it	eq
 800347c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003480:	f380 8809 	msr	PSP, r0
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	f3af 8000 	nop.w

08003490 <pxCurrentTCBConst>:
 8003490:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop

08003498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
        __asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	607b      	str	r3, [r7, #4]
    }
 80034b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80034b2:	f001 f92f 	bl	8004714 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80034b6:	f7ff fb5d 	bl	8002b74 <xTaskIncrementTick>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80034c0:	f001 f986 	bl	80047d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <SysTick_Handler+0x50>)
 80034c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	e001      	b.n	80034d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80034ce:	f001 f963 	bl	8004798 <SEGGER_SYSVIEW_RecordExitISR>
 80034d2:	2300      	movs	r3, #0
 80034d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	f383 8811 	msr	BASEPRI, r3
    }
 80034dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	e000ed04 	.word	0xe000ed04

080034ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <vPortSetupTimerInterrupt+0x34>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <vPortSetupTimerInterrupt+0x38>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <vPortSetupTimerInterrupt+0x3c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <vPortSetupTimerInterrupt+0x40>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	4a09      	ldr	r2, [pc, #36]	; (8003530 <vPortSetupTimerInterrupt+0x44>)
 800350a:	3b01      	subs	r3, #1
 800350c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <vPortSetupTimerInterrupt+0x34>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010
 8003524:	e000e018 	.word	0xe000e018
 8003528:	20000000 	.word	0x20000000
 800352c:	10624dd3 	.word	0x10624dd3
 8003530:	e000e014 	.word	0xe000e014

08003534 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003534:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003544 <vPortEnableVFP+0x10>
 8003538:	6801      	ldr	r1, [r0, #0]
 800353a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800353e:	6001      	str	r1, [r0, #0]
 8003540:	4770      	bx	lr
 8003542:	0000      	.short	0x0000
 8003544:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop

0800354c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003558:	f7ff fa5e 	bl	8002a18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800355c:	4b65      	ldr	r3, [pc, #404]	; (80036f4 <pvPortMalloc+0x1a8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003564:	f000 f934 	bl	80037d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003568:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <pvPortMalloc+0x1ac>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f040 80a7 	bne.w	80036c4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02d      	beq.n	80035d8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800357c:	2208      	movs	r2, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d227      	bcs.n	80035d8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003588:	2208      	movs	r2, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	2b00      	cmp	r3, #0
 8003598:	d021      	beq.n	80035de <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f023 0307 	bic.w	r3, r3, #7
 80035a0:	3308      	adds	r3, #8
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d214      	bcs.n	80035d2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	3308      	adds	r3, #8
 80035b0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d010      	beq.n	80035de <pvPortMalloc+0x92>
        __asm volatile
 80035bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c0:	f383 8811 	msr	BASEPRI, r3
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	f3bf 8f4f 	dsb	sy
 80035cc:	617b      	str	r3, [r7, #20]
    }
 80035ce:	bf00      	nop
 80035d0:	e7fe      	b.n	80035d0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035d6:	e002      	b.n	80035de <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	e000      	b.n	80035e0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80035de:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d06e      	beq.n	80036c4 <pvPortMalloc+0x178>
 80035e6:	4b45      	ldr	r3, [pc, #276]	; (80036fc <pvPortMalloc+0x1b0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d869      	bhi.n	80036c4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80035f0:	4b43      	ldr	r3, [pc, #268]	; (8003700 <pvPortMalloc+0x1b4>)
 80035f2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80035f4:	4b42      	ldr	r3, [pc, #264]	; (8003700 <pvPortMalloc+0x1b4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80035fa:	e004      	b.n	8003606 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80035fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	429a      	cmp	r2, r3
 800360e:	d903      	bls.n	8003618 <pvPortMalloc+0xcc>
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f1      	bne.n	80035fc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003618:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <pvPortMalloc+0x1a8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	429a      	cmp	r2, r3
 8003620:	d050      	beq.n	80036c4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2208      	movs	r2, #8
 8003628:	4413      	add	r3, r2
 800362a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	2308      	movs	r3, #8
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	429a      	cmp	r2, r3
 8003642:	d91f      	bls.n	8003684 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <pvPortMalloc+0x120>
        __asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	f383 8811 	msr	BASEPRI, r3
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f3bf 8f4f 	dsb	sy
 8003666:	613b      	str	r3, [r7, #16]
    }
 8003668:	bf00      	nop
 800366a:	e7fe      	b.n	800366a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	1ad2      	subs	r2, r2, r3
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800367e:	69b8      	ldr	r0, [r7, #24]
 8003680:	f000 f908 	bl	8003894 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <pvPortMalloc+0x1b0>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <pvPortMalloc+0x1b0>)
 8003690:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003692:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <pvPortMalloc+0x1b0>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <pvPortMalloc+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	429a      	cmp	r2, r3
 800369c:	d203      	bcs.n	80036a6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <pvPortMalloc+0x1b0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <pvPortMalloc+0x1b8>)
 80036a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <pvPortMalloc+0x1ac>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <pvPortMalloc+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3301      	adds	r3, #1
 80036c0:	4a11      	ldr	r2, [pc, #68]	; (8003708 <pvPortMalloc+0x1bc>)
 80036c2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80036c4:	f7ff f9b6 	bl	8002a34 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <pvPortMalloc+0x19c>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60fb      	str	r3, [r7, #12]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <pvPortMalloc+0x19a>
    return pvReturn;
 80036e8:	69fb      	ldr	r3, [r7, #28]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3728      	adds	r7, #40	; 0x28
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20012d44 	.word	0x20012d44
 80036f8:	20012d58 	.word	0x20012d58
 80036fc:	20012d48 	.word	0x20012d48
 8003700:	20012d3c 	.word	0x20012d3c
 8003704:	20012d4c 	.word	0x20012d4c
 8003708:	20012d50 	.word	0x20012d50

0800370c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04d      	beq.n	80037ba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800371e:	2308      	movs	r3, #8
 8003720:	425b      	negs	r3, r3
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4413      	add	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <vPortFree+0xb8>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <vPortFree+0x44>
        __asm volatile
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	f383 8811 	msr	BASEPRI, r3
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	f3bf 8f4f 	dsb	sy
 800374a:	60fb      	str	r3, [r7, #12]
    }
 800374c:	bf00      	nop
 800374e:	e7fe      	b.n	800374e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <vPortFree+0x62>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60bb      	str	r3, [r7, #8]
    }
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	685a      	ldr	r2, [r3, #4]
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <vPortFree+0xb8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01e      	beq.n	80037ba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d11a      	bne.n	80037ba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <vPortFree+0xb8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	43db      	mvns	r3, r3
 800378e:	401a      	ands	r2, r3
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003794:	f7ff f940 	bl	8002a18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <vPortFree+0xbc>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4413      	add	r3, r2
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <vPortFree+0xbc>)
 80037a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037a6:	6938      	ldr	r0, [r7, #16]
 80037a8:	f000 f874 	bl	8003894 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80037ac:	4b07      	ldr	r3, [pc, #28]	; (80037cc <vPortFree+0xc0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a06      	ldr	r2, [pc, #24]	; (80037cc <vPortFree+0xc0>)
 80037b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80037b6:	f7ff f93d 	bl	8002a34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20012d58 	.word	0x20012d58
 80037c8:	20012d48 	.word	0x20012d48
 80037cc:	20012d54 	.word	0x20012d54

080037d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80037d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80037da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80037dc:	4b27      	ldr	r3, [pc, #156]	; (800387c <prvHeapInit+0xac>)
 80037de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3307      	adds	r3, #7
 80037ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0307 	bic.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	4a1f      	ldr	r2, [pc, #124]	; (800387c <prvHeapInit+0xac>)
 8003800:	4413      	add	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003808:	4a1d      	ldr	r2, [pc, #116]	; (8003880 <prvHeapInit+0xb0>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <prvHeapInit+0xb0>)
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	4413      	add	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800381c:	2208      	movs	r2, #8
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0307 	bic.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a15      	ldr	r2, [pc, #84]	; (8003884 <prvHeapInit+0xb4>)
 8003830:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <prvHeapInit+0xb4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800383a:	4b12      	ldr	r3, [pc, #72]	; (8003884 <prvHeapInit+0xb4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <prvHeapInit+0xb4>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <prvHeapInit+0xb8>)
 800385e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4a09      	ldr	r2, [pc, #36]	; (800388c <prvHeapInit+0xbc>)
 8003866:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003868:	4b09      	ldr	r3, [pc, #36]	; (8003890 <prvHeapInit+0xc0>)
 800386a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800386e:	601a      	str	r2, [r3, #0]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	2000013c 	.word	0x2000013c
 8003880:	20012d3c 	.word	0x20012d3c
 8003884:	20012d44 	.word	0x20012d44
 8003888:	20012d4c 	.word	0x20012d4c
 800388c:	20012d48 	.word	0x20012d48
 8003890:	20012d58 	.word	0x20012d58

08003894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <prvInsertBlockIntoFreeList+0xac>)
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e002      	b.n	80038a8 <prvInsertBlockIntoFreeList+0x14>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d8f7      	bhi.n	80038a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d108      	bne.n	80038d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	441a      	add	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	441a      	add	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d118      	bne.n	800391c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <prvInsertBlockIntoFreeList+0xb0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d00d      	beq.n	8003912 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	e008      	b.n	8003924 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <prvInsertBlockIntoFreeList+0xb0>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	e003      	b.n	8003924 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d002      	beq.n	8003932 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20012d3c 	.word	0x20012d3c
 8003944:	20012d44 	.word	0x20012d44

08003948 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003956:	2205      	movs	r2, #5
 8003958:	492b      	ldr	r1, [pc, #172]	; (8003a08 <SYSVIEW_AddTask+0xc0>)
 800395a:	68b8      	ldr	r0, [r7, #8]
 800395c:	f001 f9f2 	bl	8004d44 <memcmp>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d04b      	beq.n	80039fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003966:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b07      	cmp	r3, #7
 800396c:	d903      	bls.n	8003976 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800396e:	4828      	ldr	r0, [pc, #160]	; (8003a10 <SYSVIEW_AddTask+0xc8>)
 8003970:	f001 f968 	bl	8004c44 <SEGGER_SYSVIEW_Warn>
    return;
 8003974:	e044      	b.n	8003a00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003976:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	4926      	ldr	r1, [pc, #152]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	4921      	ldr	r1, [pc, #132]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3304      	adds	r3, #4
 800399c:	68ba      	ldr	r2, [r7, #8]
 800399e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	491b      	ldr	r1, [pc, #108]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	440b      	add	r3, r1
 80039b0:	3308      	adds	r3, #8
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4916      	ldr	r1, [pc, #88]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	330c      	adds	r3, #12
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4910      	ldr	r1, [pc, #64]	; (8003a14 <SYSVIEW_AddTask+0xcc>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3310      	adds	r3, #16
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <SYSVIEW_AddTask+0xc4>)
 80039ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f80e 	bl	8003a18 <SYSVIEW_SendTaskInfo>
 80039fc:	e000      	b.n	8003a00 <SYSVIEW_AddTask+0xb8>
    return;
 80039fe:	bf00      	nop

}
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	08004e24 	.word	0x08004e24
 8003a0c:	20012dfc 	.word	0x20012dfc
 8003a10:	08004e2c 	.word	0x08004e2c
 8003a14:	20012d5c 	.word	0x20012d5c

08003a18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	2214      	movs	r2, #20
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f9a4 	bl	8004d7c <memset>
  TaskInfo.TaskID     = TaskID;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fd37 	bl	80044c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003a52:	bf00      	nop
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <_DoInit+0x98>)
 8003a64:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a20      	ldr	r2, [pc, #128]	; (8003af8 <_DoInit+0x9c>)
 8003a76:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a20      	ldr	r2, [pc, #128]	; (8003afc <_DoInit+0xa0>)
 8003a7c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a84:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <_DoInit+0x9c>)
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <_DoInit+0xa4>)
 8003aa2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2210      	movs	r2, #16
 8003aa8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3307      	adds	r3, #7
 8003ac0:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <_DoInit+0xa8>)
 8003ac2:	6810      	ldr	r0, [r2, #0]
 8003ac4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ac6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a0e      	ldr	r2, [pc, #56]	; (8003b08 <_DoInit+0xac>)
 8003ace:	6810      	ldr	r0, [r2, #0]
 8003ad0:	6018      	str	r0, [r3, #0]
 8003ad2:	8891      	ldrh	r1, [r2, #4]
 8003ad4:	7992      	ldrb	r2, [r2, #6]
 8003ad6:	8099      	strh	r1, [r3, #4]
 8003ad8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ada:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003ae4:	f3bf 8f5f 	dmb	sy
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	200133b4 	.word	0x200133b4
 8003af8:	08004e7c 	.word	0x08004e7c
 8003afc:	20012e00 	.word	0x20012e00
 8003b00:	20013200 	.word	0x20013200
 8003b04:	08004e88 	.word	0x08004e88
 8003b08:	08004e8c 	.word	0x08004e8c

08003b0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	; 0x30
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003b18:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b1a:	623b      	str	r3, [r7, #32]
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <SEGGER_RTT_ReadNoLock+0x1e>
 8003b26:	f7ff ff99 	bl	8003a5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4413      	add	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	3360      	adds	r3, #96	; 0x60
 8003b36:	4a37      	ldr	r2, [pc, #220]	; (8003c14 <SEGGER_RTT_ReadNoLock+0x108>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d92b      	bls.n	8003bb0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bf28      	it	cs
 8003b6a:	4613      	movcs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	4413      	add	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	6939      	ldr	r1, [r7, #16]
 8003b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7e:	f001 f8ef 	bl	8004d60 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4413      	add	r3, r2
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d101      	bne.n	8003bb0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bf28      	it	cs
 8003bc0:	4613      	movcs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d019      	beq.n	8003bfe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	4413      	add	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	6939      	ldr	r1, [r7, #16]
 8003bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bda:	f001 f8c1 	bl	8004d60 <memcpy>
    NumBytesRead += NumBytesRem;
 8003bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	4413      	add	r3, r2
 8003be4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c08:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3730      	adds	r7, #48	; 0x30
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	200133b4 	.word	0x200133b4

08003c18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00f      	beq.n	8003c4e <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003c2e:	e002      	b.n	8003c36 <_EncodeStr+0x1e>
      Len++;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3301      	adds	r3, #1
 8003c34:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f6      	bne.n	8003c30 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d901      	bls.n	8003c4e <_EncodeStr+0x36>
      Len = Limit;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2bfe      	cmp	r3, #254	; 0xfe
 8003c52:	d806      	bhi.n	8003c62 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60fa      	str	r2, [r7, #12]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e011      	b.n	8003c86 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1c5a      	adds	r2, r3, #1
 8003c66:	60fa      	str	r2, [r7, #12]
 8003c68:	22ff      	movs	r2, #255	; 0xff
 8003c6a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	60fa      	str	r2, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	0a19      	lsrs	r1, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	60fa      	str	r2, [r7, #12]
 8003c82:	b2ca      	uxtb	r2, r1
 8003c84:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c8a:	e00a      	b.n	8003ca2 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	1c53      	adds	r3, r2, #1
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1c59      	adds	r1, r3, #1
 8003c96:	60f9      	str	r1, [r7, #12]
 8003c98:	7812      	ldrb	r2, [r2, #0]
 8003c9a:	701a      	strb	r2, [r3, #0]
    n++;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d3f0      	bcc.n	8003c8c <_EncodeStr+0x74>
  }
  return pPayload;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <_HandleIncomingPacket+0xe0>)
 8003cd8:	7e1b      	ldrb	r3, [r3, #24]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	1cfb      	adds	r3, r7, #3
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7ff ff13 	bl	8003b0c <SEGGER_RTT_ReadNoLock>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dd54      	ble.n	8003d9a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	2b80      	cmp	r3, #128	; 0x80
 8003cf4:	d032      	beq.n	8003d5c <_HandleIncomingPacket+0x8c>
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	dc42      	bgt.n	8003d80 <_HandleIncomingPacket+0xb0>
 8003cfa:	2b07      	cmp	r3, #7
 8003cfc:	dc16      	bgt.n	8003d2c <_HandleIncomingPacket+0x5c>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	dd3e      	ble.n	8003d80 <_HandleIncomingPacket+0xb0>
 8003d02:	3b01      	subs	r3, #1
 8003d04:	2b06      	cmp	r3, #6
 8003d06:	d83b      	bhi.n	8003d80 <_HandleIncomingPacket+0xb0>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <_HandleIncomingPacket+0x40>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d33 	.word	0x08003d33
 8003d14:	08003d39 	.word	0x08003d39
 8003d18:	08003d3f 	.word	0x08003d3f
 8003d1c:	08003d45 	.word	0x08003d45
 8003d20:	08003d4b 	.word	0x08003d4b
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d57 	.word	0x08003d57
 8003d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2e:	d036      	beq.n	8003d9e <_HandleIncomingPacket+0xce>
 8003d30:	e026      	b.n	8003d80 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003d32:	f000 fa4b 	bl	80041cc <SEGGER_SYSVIEW_Start>
      break;
 8003d36:	e037      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003d38:	f000 fb02 	bl	8004340 <SEGGER_SYSVIEW_Stop>
      break;
 8003d3c:	e034      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003d3e:	f000 fcb7 	bl	80046b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003d42:	e031      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003d44:	f000 fca0 	bl	8004688 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003d48:	e02e      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003d4a:	f000 fb1f 	bl	800438c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003d4e:	e02b      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003d50:	f000 ff3a 	bl	8004bc8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003d54:	e028      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003d56:	f000 ff19 	bl	8004b8c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003d5a:	e025      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <_HandleIncomingPacket+0xe0>)
 8003d5e:	7e1b      	ldrb	r3, [r3, #24]
 8003d60:	4618      	mov	r0, r3
 8003d62:	1cfb      	adds	r3, r7, #3
 8003d64:	2201      	movs	r2, #1
 8003d66:	4619      	mov	r1, r3
 8003d68:	f7ff fed0 	bl	8003b0c <SEGGER_RTT_ReadNoLock>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	dd15      	ble.n	8003da2 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fe87 	bl	8004a8c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003d7e:	e010      	b.n	8003da2 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	da0e      	bge.n	8003da6 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d88:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <_HandleIncomingPacket+0xe0>)
 8003d8a:	7e1b      	ldrb	r3, [r3, #24]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	1cfb      	adds	r3, r7, #3
 8003d90:	2201      	movs	r2, #1
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7ff feba 	bl	8003b0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d98:	e005      	b.n	8003da6 <_HandleIncomingPacket+0xd6>
    }
  }
 8003d9a:	bf00      	nop
 8003d9c:	e004      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e002      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
      break;
 8003da2:	bf00      	nop
 8003da4:	e000      	b.n	8003da8 <_HandleIncomingPacket+0xd8>
      break;
 8003da6:	bf00      	nop
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20013210 	.word	0x20013210

08003db4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	; 0x30
 8003db8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003dba:	2301      	movs	r3, #1
 8003dbc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dce:	e00b      	b.n	8003de8 <_TrySendOverflowPacket+0x34>
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	1c59      	adds	r1, r3, #1
 8003dd8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	09db      	lsrs	r3, r3, #7
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	2b7f      	cmp	r3, #127	; 0x7f
 8003dec:	d8f0      	bhi.n	8003dd0 <_TrySendOverflowPacket+0x1c>
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003dfe:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <_TrySendOverflowPacket+0xe0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003e04:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	e00b      	b.n	8003e30 <_TrySendOverflowPacket+0x7c>
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	6279      	str	r1, [r7, #36]	; 0x24
 8003e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	701a      	strb	r2, [r3, #0]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d8f0      	bhi.n	8003e18 <_TrySendOverflowPacket+0x64>
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003e46:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	f7fc f9ba 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e66:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003e6c:	4b08      	ldr	r3, [pc, #32]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e004      	b.n	8003e84 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <_TrySendOverflowPacket+0xdc>)
 8003e82:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003e84:	693b      	ldr	r3, [r7, #16]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3730      	adds	r7, #48	; 0x30
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	20013210 	.word	0x20013210
 8003e94:	e0001004 	.word	0xe0001004

08003e98 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003ea4:	4b6c      	ldr	r3, [pc, #432]	; (8004058 <_SendPacket+0x1c0>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d010      	beq.n	8003ece <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003eac:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <_SendPacket+0x1c0>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 80a3 	beq.w	8003ffc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003eb6:	4b68      	ldr	r3, [pc, #416]	; (8004058 <_SendPacket+0x1c0>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d109      	bne.n	8003ed2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003ebe:	f7ff ff79 	bl	8003db4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003ec2:	4b65      	ldr	r3, [pc, #404]	; (8004058 <_SendPacket+0x1c0>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	f040 809a 	bne.w	8004000 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8003ecc:	e001      	b.n	8003ed2 <_SendPacket+0x3a>
    goto Send;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <_SendPacket+0x3c>
Send:
 8003ed2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b1f      	cmp	r3, #31
 8003ed8:	d809      	bhi.n	8003eee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003eda:	4b5f      	ldr	r3, [pc, #380]	; (8004058 <_SendPacket+0x1c0>)
 8003edc:	69da      	ldr	r2, [r3, #28]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 808b 	bne.w	8004004 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b17      	cmp	r3, #23
 8003ef2:	d807      	bhi.n	8003f04 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	e03d      	b.n	8003f80 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f10:	d912      	bls.n	8003f38 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	09da      	lsrs	r2, r3, #7
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	60fa      	str	r2, [r7, #12]
 8003f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	e006      	b.n	8003f46 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b7f      	cmp	r3, #127	; 0x7f
 8003f4a:	d912      	bls.n	8003f72 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	09da      	lsrs	r2, r3, #7
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	3a01      	subs	r2, #1
 8003f64:	60fa      	str	r2, [r7, #12]
 8003f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	701a      	strb	r2, [r3, #0]
 8003f70:	e006      	b.n	8003f80 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f80:	4b36      	ldr	r3, [pc, #216]	; (800405c <_SendPacket+0x1c4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <_SendPacket+0x1c0>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	623b      	str	r3, [r7, #32]
 8003f98:	e00b      	b.n	8003fb2 <_SendPacket+0x11a>
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	1c59      	adds	r1, r3, #1
 8003fa2:	6279      	str	r1, [r7, #36]	; 0x24
 8003fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	09db      	lsrs	r3, r3, #7
 8003fb0:	623b      	str	r3, [r7, #32]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003fb6:	d8f0      	bhi.n	8003f9a <_SendPacket+0x102>
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	1c5a      	adds	r2, r3, #1
 8003fbc:	627a      	str	r2, [r7, #36]	; 0x24
 8003fbe:	6a3a      	ldr	r2, [r7, #32]
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003fc8:	4b23      	ldr	r3, [pc, #140]	; (8004058 <_SendPacket+0x1c0>)
 8003fca:	785b      	ldrb	r3, [r3, #1]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	f7fc f8fa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <_SendPacket+0x1c0>)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	60d3      	str	r3, [r2, #12]
 8003fec:	e00b      	b.n	8004006 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003fee:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <_SendPacket+0x1c0>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b18      	ldr	r3, [pc, #96]	; (8004058 <_SendPacket+0x1c0>)
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e004      	b.n	8004006 <_SendPacket+0x16e>
    goto SendDone;
 8003ffc:	bf00      	nop
 8003ffe:	e002      	b.n	8004006 <_SendPacket+0x16e>
      goto SendDone;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <_SendPacket+0x16e>
      goto SendDone;
 8004004:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <_SendPacket+0x1c0>)
 8004008:	7e1b      	ldrb	r3, [r3, #24]
 800400a:	4619      	mov	r1, r3
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <_SendPacket+0x1c8>)
 800400e:	460b      	mov	r3, r1
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	440b      	add	r3, r1
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	4413      	add	r3, r2
 8004018:	336c      	adds	r3, #108	; 0x6c
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <_SendPacket+0x1c0>)
 800401e:	7e1b      	ldrb	r3, [r3, #24]
 8004020:	4618      	mov	r0, r3
 8004022:	490f      	ldr	r1, [pc, #60]	; (8004060 <_SendPacket+0x1c8>)
 8004024:	4603      	mov	r3, r0
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4403      	add	r3, r0
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3370      	adds	r3, #112	; 0x70
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d00b      	beq.n	800404e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004036:	4b08      	ldr	r3, [pc, #32]	; (8004058 <_SendPacket+0x1c0>)
 8004038:	789b      	ldrb	r3, [r3, #2]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d107      	bne.n	800404e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <_SendPacket+0x1c0>)
 8004040:	2201      	movs	r2, #1
 8004042:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004044:	f7ff fe44 	bl	8003cd0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <_SendPacket+0x1c0>)
 800404a:	2200      	movs	r2, #0
 800404c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800404e:	bf00      	nop
 8004050:	3728      	adds	r7, #40	; 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20013210 	.word	0x20013210
 800405c:	e0001004 	.word	0xe0001004
 8004060:	200133b4 	.word	0x200133b4

08004064 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800406c:	f3ef 8311 	mrs	r3, BASEPRI
 8004070:	f04f 0120 	mov.w	r1, #32
 8004074:	f381 8811 	msr	BASEPRI, r1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4808      	ldr	r0, [pc, #32]	; (800409c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800407c:	f7ff fe1c 	bl	8003cb8 <_PreparePacket>
 8004080:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68b8      	ldr	r0, [r7, #8]
 8004088:	f7ff ff06 	bl	8003e98 <_SendPacket>
  RECORD_END();
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f383 8811 	msr	BASEPRI, r3
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20013240 	.word	0x20013240

080040a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040aa:	f3ef 8311 	mrs	r3, BASEPRI
 80040ae:	f04f 0120 	mov.w	r1, #32
 80040b2:	f381 8811 	msr	BASEPRI, r1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	4816      	ldr	r0, [pc, #88]	; (8004114 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80040ba:	f7ff fdfd 	bl	8003cb8 <_PreparePacket>
 80040be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e00b      	b.n	80040e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	1c59      	adds	r1, r3, #1
 80040d6:	61f9      	str	r1, [r7, #28]
 80040d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b7f      	cmp	r3, #127	; 0x7f
 80040ea:	d8f0      	bhi.n	80040ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	6938      	ldr	r0, [r7, #16]
 8004102:	f7ff fec9 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f383 8811 	msr	BASEPRI, r3
}
 800410c:	bf00      	nop
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20013240 	.word	0x20013240

08004118 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004124:	f3ef 8311 	mrs	r3, BASEPRI
 8004128:	f04f 0120 	mov.w	r1, #32
 800412c:	f381 8811 	msr	BASEPRI, r1
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	4825      	ldr	r0, [pc, #148]	; (80041c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004134:	f7ff fdc0 	bl	8003cb8 <_PreparePacket>
 8004138:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	e00b      	b.n	8004160 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	09db      	lsrs	r3, r3, #7
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	2b7f      	cmp	r3, #127	; 0x7f
 8004164:	d8f0      	bhi.n	8004148 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800416c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	e00b      	b.n	8004198 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	6279      	str	r1, [r7, #36]	; 0x24
 800418a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b7f      	cmp	r3, #127	; 0x7f
 800419c:	d8f0      	bhi.n	8004180 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	627a      	str	r2, [r7, #36]	; 0x24
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6979      	ldr	r1, [r7, #20]
 80041b2:	69b8      	ldr	r0, [r7, #24]
 80041b4:	f7ff fe70 	bl	8003e98 <_SendPacket>
  RECORD_END();
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f383 8811 	msr	BASEPRI, r3
}
 80041be:	bf00      	nop
 80041c0:	3730      	adds	r7, #48	; 0x30
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20013240 	.word	0x20013240

080041cc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80041d2:	4b58      	ldr	r3, [pc, #352]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80041d8:	f3ef 8311 	mrs	r3, BASEPRI
 80041dc:	f04f 0120 	mov.w	r1, #32
 80041e0:	f381 8811 	msr	BASEPRI, r1
 80041e4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80041e6:	4b53      	ldr	r3, [pc, #332]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	220a      	movs	r2, #10
 80041ec:	4952      	ldr	r1, [pc, #328]	; (8004338 <SEGGER_SYSVIEW_Start+0x16c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fb ffee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80041fa:	200a      	movs	r0, #10
 80041fc:	f7ff ff32 	bl	8004064 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004200:	f3ef 8311 	mrs	r3, BASEPRI
 8004204:	f04f 0120 	mov.w	r1, #32
 8004208:	f381 8811 	msr	BASEPRI, r1
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	484b      	ldr	r0, [pc, #300]	; (800433c <SEGGER_SYSVIEW_Start+0x170>)
 8004210:	f7ff fd52 	bl	8003cb8 <_PreparePacket>
 8004214:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421e:	4b45      	ldr	r3, [pc, #276]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
 8004224:	e00b      	b.n	800423e <SEGGER_SYSVIEW_Start+0x72>
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	09db      	lsrs	r3, r3, #7
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	2b7f      	cmp	r3, #127	; 0x7f
 8004242:	d8f0      	bhi.n	8004226 <SEGGER_SYSVIEW_Start+0x5a>
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	4b36      	ldr	r3, [pc, #216]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e00b      	b.n	8004278 <SEGGER_SYSVIEW_Start+0xac>
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	6279      	str	r1, [r7, #36]	; 0x24
 800426a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	09db      	lsrs	r3, r3, #7
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b7f      	cmp	r3, #127	; 0x7f
 800427c:	d8f0      	bhi.n	8004260 <SEGGER_SYSVIEW_Start+0x94>
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	627a      	str	r2, [r7, #36]	; 0x24
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	4b28      	ldr	r3, [pc, #160]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e00b      	b.n	80042b2 <SEGGER_SYSVIEW_Start+0xe6>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	61f9      	str	r1, [r7, #28]
 80042a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d8f0      	bhi.n	800429a <SEGGER_SYSVIEW_Start+0xce>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	61fa      	str	r2, [r7, #28]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e00b      	b.n	80042ea <SEGGER_SYSVIEW_Start+0x11e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1c59      	adds	r1, r3, #1
 80042da:	6179      	str	r1, [r7, #20]
 80042dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	09db      	lsrs	r3, r3, #7
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b7f      	cmp	r3, #127	; 0x7f
 80042ee:	d8f0      	bhi.n	80042d2 <SEGGER_SYSVIEW_Start+0x106>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	617a      	str	r2, [r7, #20]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004300:	2218      	movs	r2, #24
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff fdc7 	bl	8003e98 <_SendPacket>
      RECORD_END();
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800431e:	f000 f9c7 	bl	80046b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004322:	f000 f9b1 	bl	8004688 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004326:	f000 fc4f 	bl	8004bc8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800432a:	bf00      	nop
 800432c:	3730      	adds	r7, #48	; 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20013210 	.word	0x20013210
 8004338:	08004eac 	.word	0x08004eac
 800433c:	20013240 	.word	0x20013240

08004340 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004346:	f3ef 8311 	mrs	r3, BASEPRI
 800434a:	f04f 0120 	mov.w	r1, #32
 800434e:	f381 8811 	msr	BASEPRI, r1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <SEGGER_SYSVIEW_Stop+0x44>)
 8004356:	f7ff fcaf 	bl	8003cb8 <_PreparePacket>
 800435a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <SEGGER_SYSVIEW_Stop+0x48>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004364:	220b      	movs	r2, #11
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	6838      	ldr	r0, [r7, #0]
 800436a:	f7ff fd95 	bl	8003e98 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <SEGGER_SYSVIEW_Stop+0x48>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f383 8811 	msr	BASEPRI, r3
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20013240 	.word	0x20013240
 8004388:	20013210 	.word	0x20013210

0800438c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004392:	f3ef 8311 	mrs	r3, BASEPRI
 8004396:	f04f 0120 	mov.w	r1, #32
 800439a:	f381 8811 	msr	BASEPRI, r1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	4845      	ldr	r0, [pc, #276]	; (80044b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80043a2:	f7ff fc89 	bl	8003cb8 <_PreparePacket>
 80043a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	4b42      	ldr	r3, [pc, #264]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	e00b      	b.n	80043d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	09db      	lsrs	r3, r3, #7
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b7f      	cmp	r3, #127	; 0x7f
 80043d4:	d8f0      	bhi.n	80043b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	4b34      	ldr	r3, [pc, #208]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	e00b      	b.n	800440a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1c59      	adds	r1, r3, #1
 80043fa:	6279      	str	r1, [r7, #36]	; 0x24
 80043fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	09db      	lsrs	r3, r3, #7
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b7f      	cmp	r3, #127	; 0x7f
 800440e:	d8f0      	bhi.n	80043f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	627a      	str	r2, [r7, #36]	; 0x24
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e00b      	b.n	8004444 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	61f9      	str	r1, [r7, #28]
 8004436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	09db      	lsrs	r3, r3, #7
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b7f      	cmp	r3, #127	; 0x7f
 8004448:	d8f0      	bhi.n	800442c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	61fa      	str	r2, [r7, #28]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e00b      	b.n	800447c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	6179      	str	r1, [r7, #20]
 800446e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	09db      	lsrs	r3, r3, #7
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b7f      	cmp	r3, #127	; 0x7f
 8004480:	d8f0      	bhi.n	8004464 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	617a      	str	r2, [r7, #20]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004492:	2218      	movs	r2, #24
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f7ff fcfe 	bl	8003e98 <_SendPacket>
  RECORD_END();
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	4798      	blx	r3
  }
}
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	; 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20013240 	.word	0x20013240
 80044bc:	20013210 	.word	0x20013210

080044c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	; 0x48
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80044c8:	f3ef 8311 	mrs	r3, BASEPRI
 80044cc:	f04f 0120 	mov.w	r1, #32
 80044d0:	f381 8811 	msr	BASEPRI, r1
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	486a      	ldr	r0, [pc, #424]	; (8004680 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80044d8:	f7ff fbee 	bl	8003cb8 <_PreparePacket>
 80044dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	647b      	str	r3, [r7, #68]	; 0x44
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b66      	ldr	r3, [pc, #408]	; (8004684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
 80044f2:	e00b      	b.n	800450c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	6479      	str	r1, [r7, #68]	; 0x44
 80044fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	09db      	lsrs	r3, r3, #7
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	2b7f      	cmp	r3, #127	; 0x7f
 8004510:	d8f0      	bhi.n	80044f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	647a      	str	r2, [r7, #68]	; 0x44
 8004518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004520:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
 800452c:	e00b      	b.n	8004546 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	b2da      	uxtb	r2, r3
 8004532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	09db      	lsrs	r3, r3, #7
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	2b7f      	cmp	r3, #127	; 0x7f
 800454a:	d8f0      	bhi.n	800452e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7ff fb57 	bl	8003c18 <_EncodeStr>
 800456a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800456c:	2209      	movs	r2, #9
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f7ff fc91 	bl	8003e98 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
 800458a:	e00b      	b.n	80045a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	b2da      	uxtb	r2, r3
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	6379      	str	r1, [r7, #52]	; 0x34
 8004596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	09db      	lsrs	r3, r3, #7
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2b7f      	cmp	r3, #127	; 0x7f
 80045a8:	d8f0      	bhi.n	800458c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	637a      	str	r2, [r7, #52]	; 0x34
 80045b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c4:	e00b      	b.n	80045de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	1c59      	adds	r1, r3, #1
 80045ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	09db      	lsrs	r3, r3, #7
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	2b7f      	cmp	r3, #127	; 0x7f
 80045e2:	d8f0      	bhi.n	80045c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e00b      	b.n	8004618 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6279      	str	r1, [r7, #36]	; 0x24
 800460a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b7f      	cmp	r3, #127	; 0x7f
 800461c:	d8f0      	bhi.n	8004600 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	627a      	str	r2, [r7, #36]	; 0x24
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e00b      	b.n	8004650 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	61f9      	str	r1, [r7, #28]
 8004642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	09db      	lsrs	r3, r3, #7
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b7f      	cmp	r3, #127	; 0x7f
 8004654:	d8f0      	bhi.n	8004638 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004666:	2215      	movs	r2, #21
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f7ff fc14 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f383 8811 	msr	BASEPRI, r3
}
 8004676:	bf00      	nop
 8004678:	3748      	adds	r7, #72	; 0x48
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20013240 	.word	0x20013240
 8004684:	20013210 	.word	0x20013210

08004688 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4798      	blx	r3
  }
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20013210 	.word	0x20013210

080046b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01a      	beq.n	80046f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80046be:	4b13      	ldr	r3, [pc, #76]	; (800470c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d015      	beq.n	80046f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80046c8:	4b10      	ldr	r3, [pc, #64]	; (800470c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4798      	blx	r3
 80046d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80046d4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80046d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	000a      	movs	r2, r1
 80046e4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80046e6:	4613      	mov	r3, r2
 80046e8:	461a      	mov	r2, r3
 80046ea:	4621      	mov	r1, r4
 80046ec:	200d      	movs	r0, #13
 80046ee:	f7ff fd13 	bl	8004118 <SEGGER_SYSVIEW_RecordU32x2>
 80046f2:	e006      	b.n	8004702 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	200c      	movs	r0, #12
 80046fc:	f7ff fcd0 	bl	80040a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004700:	bf00      	nop
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}
 800470a:	bf00      	nop
 800470c:	20013210 	.word	0x20013210
 8004710:	e0001004 	.word	0xe0001004

08004714 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800471a:	f3ef 8311 	mrs	r3, BASEPRI
 800471e:	f04f 0120 	mov.w	r1, #32
 8004722:	f381 8811 	msr	BASEPRI, r1
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	4819      	ldr	r0, [pc, #100]	; (8004790 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800472a:	f7ff fac5 	bl	8003cb8 <_PreparePacket>
 800472e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004734:	4b17      	ldr	r3, [pc, #92]	; (8004794 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	e00b      	b.n	8004760 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	b2da      	uxtb	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	1c59      	adds	r1, r3, #1
 8004750:	6179      	str	r1, [r7, #20]
 8004752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	09db      	lsrs	r3, r3, #7
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b7f      	cmp	r3, #127	; 0x7f
 8004764:	d8f0      	bhi.n	8004748 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	617a      	str	r2, [r7, #20]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004776:	2202      	movs	r2, #2
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f7ff fb8c 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f383 8811 	msr	BASEPRI, r3
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20013240 	.word	0x20013240
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800479e:	f3ef 8311 	mrs	r3, BASEPRI
 80047a2:	f04f 0120 	mov.w	r1, #32
 80047a6:	f381 8811 	msr	BASEPRI, r1
 80047aa:	607b      	str	r3, [r7, #4]
 80047ac:	4807      	ldr	r0, [pc, #28]	; (80047cc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80047ae:	f7ff fa83 	bl	8003cb8 <_PreparePacket>
 80047b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80047b4:	2203      	movs	r2, #3
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	6838      	ldr	r0, [r7, #0]
 80047ba:	f7ff fb6d 	bl	8003e98 <_SendPacket>
  RECORD_END();
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f383 8811 	msr	BASEPRI, r3
}
 80047c4:	bf00      	nop
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20013240 	.word	0x20013240

080047d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047d6:	f3ef 8311 	mrs	r3, BASEPRI
 80047da:	f04f 0120 	mov.w	r1, #32
 80047de:	f381 8811 	msr	BASEPRI, r1
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	4807      	ldr	r0, [pc, #28]	; (8004804 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80047e6:	f7ff fa67 	bl	8003cb8 <_PreparePacket>
 80047ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80047ec:	2212      	movs	r2, #18
 80047ee:	6839      	ldr	r1, [r7, #0]
 80047f0:	6838      	ldr	r0, [r7, #0]
 80047f2:	f7ff fb51 	bl	8003e98 <_SendPacket>
  RECORD_END();
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f383 8811 	msr	BASEPRI, r3
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	20013240 	.word	0x20013240

08004808 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800480e:	f3ef 8311 	mrs	r3, BASEPRI
 8004812:	f04f 0120 	mov.w	r1, #32
 8004816:	f381 8811 	msr	BASEPRI, r1
 800481a:	607b      	str	r3, [r7, #4]
 800481c:	4807      	ldr	r0, [pc, #28]	; (800483c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800481e:	f7ff fa4b 	bl	8003cb8 <_PreparePacket>
 8004822:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004824:	2211      	movs	r2, #17
 8004826:	6839      	ldr	r1, [r7, #0]
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	f7ff fb35 	bl	8003e98 <_SendPacket>
  RECORD_END();
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f383 8811 	msr	BASEPRI, r3
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	20013240 	.word	0x20013240

08004840 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004848:	f3ef 8311 	mrs	r3, BASEPRI
 800484c:	f04f 0120 	mov.w	r1, #32
 8004850:	f381 8811 	msr	BASEPRI, r1
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	4819      	ldr	r0, [pc, #100]	; (80048bc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004858:	f7ff fa2e 	bl	8003cb8 <_PreparePacket>
 800485c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004862:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	61bb      	str	r3, [r7, #24]
 8004874:	e00b      	b.n	800488e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	1c59      	adds	r1, r3, #1
 800487e:	61f9      	str	r1, [r7, #28]
 8004880:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	09db      	lsrs	r3, r3, #7
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b7f      	cmp	r3, #127	; 0x7f
 8004892:	d8f0      	bhi.n	8004876 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	61fa      	str	r2, [r7, #28]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	b2d2      	uxtb	r2, r2
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80048a4:	2208      	movs	r2, #8
 80048a6:	68f9      	ldr	r1, [r7, #12]
 80048a8:	6938      	ldr	r0, [r7, #16]
 80048aa:	f7ff faf5 	bl	8003e98 <_SendPacket>
  RECORD_END();
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f383 8811 	msr	BASEPRI, r3
}
 80048b4:	bf00      	nop
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20013240 	.word	0x20013240
 80048c0:	20013210 	.word	0x20013210

080048c4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80048cc:	f3ef 8311 	mrs	r3, BASEPRI
 80048d0:	f04f 0120 	mov.w	r1, #32
 80048d4:	f381 8811 	msr	BASEPRI, r1
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	4819      	ldr	r0, [pc, #100]	; (8004940 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80048dc:	f7ff f9ec 	bl	8003cb8 <_PreparePacket>
 80048e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e00b      	b.n	8004912 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	61f9      	str	r1, [r7, #28]
 8004904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	09db      	lsrs	r3, r3, #7
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b7f      	cmp	r3, #127	; 0x7f
 8004916:	d8f0      	bhi.n	80048fa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	61fa      	str	r2, [r7, #28]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004928:	2204      	movs	r2, #4
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	6938      	ldr	r0, [r7, #16]
 800492e:	f7ff fab3 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f383 8811 	msr	BASEPRI, r3
}
 8004938:	bf00      	nop
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20013240 	.word	0x20013240
 8004944:	20013210 	.word	0x20013210

08004948 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	f04f 0120 	mov.w	r1, #32
 8004958:	f381 8811 	msr	BASEPRI, r1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	4819      	ldr	r0, [pc, #100]	; (80049c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004960:	f7ff f9aa 	bl	8003cb8 <_PreparePacket>
 8004964:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e00b      	b.n	8004996 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	b2da      	uxtb	r2, r3
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	61f9      	str	r1, [r7, #28]
 8004988:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498c:	b2d2      	uxtb	r2, r2
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	09db      	lsrs	r3, r3, #7
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b7f      	cmp	r3, #127	; 0x7f
 800499a:	d8f0      	bhi.n	800497e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	1c5a      	adds	r2, r3, #1
 80049a0:	61fa      	str	r2, [r7, #28]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	701a      	strb	r2, [r3, #0]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80049ac:	2206      	movs	r2, #6
 80049ae:	68f9      	ldr	r1, [r7, #12]
 80049b0:	6938      	ldr	r0, [r7, #16]
 80049b2:	f7ff fa71 	bl	8003e98 <_SendPacket>
  RECORD_END();
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	f383 8811 	msr	BASEPRI, r3
}
 80049bc:	bf00      	nop
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20013240 	.word	0x20013240
 80049c8:	20013210 	.word	0x20013210

080049cc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80049d6:	f3ef 8311 	mrs	r3, BASEPRI
 80049da:	f04f 0120 	mov.w	r1, #32
 80049de:	f381 8811 	msr	BASEPRI, r1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	4827      	ldr	r0, [pc, #156]	; (8004a84 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80049e6:	f7ff f967 	bl	8003cb8 <_PreparePacket>
 80049ea:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049f0:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	623b      	str	r3, [r7, #32]
 8004a02:	e00b      	b.n	8004a1c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	1c59      	adds	r1, r3, #1
 8004a0c:	6279      	str	r1, [r7, #36]	; 0x24
 8004a0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	09db      	lsrs	r3, r3, #7
 8004a1a:	623b      	str	r3, [r7, #32]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a20:	d8f0      	bhi.n	8004a04 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	627a      	str	r2, [r7, #36]	; 0x24
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	e00b      	b.n	8004a54 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	1c59      	adds	r1, r3, #1
 8004a44:	61f9      	str	r1, [r7, #28]
 8004a46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	09db      	lsrs	r3, r3, #7
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b7f      	cmp	r3, #127	; 0x7f
 8004a58:	d8f0      	bhi.n	8004a3c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	61fa      	str	r2, [r7, #28]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	6938      	ldr	r0, [r7, #16]
 8004a70:	f7ff fa12 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f383 8811 	msr	BASEPRI, r3
}
 8004a7a:	bf00      	nop
 8004a7c:	3728      	adds	r7, #40	; 0x28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	20013240 	.word	0x20013240
 8004a88:	20013210 	.word	0x20013210

08004a8c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	; 0x30
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d06d      	beq.n	8004b7a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004a9e:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa8:	e008      	b.n	8004abc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab8:	3301      	adds	r3, #1
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3f2      	bcc.n	8004aaa <SEGGER_SYSVIEW_SendModule+0x1e>
 8004ac4:	e000      	b.n	8004ac8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004ac6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d055      	beq.n	8004b7a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ace:	f3ef 8311 	mrs	r3, BASEPRI
 8004ad2:	f04f 0120 	mov.w	r1, #32
 8004ad6:	f381 8811 	msr	BASEPRI, r1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	482a      	ldr	r0, [pc, #168]	; (8004b88 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004ade:	f7ff f8eb 	bl	8003cb8 <_PreparePacket>
 8004ae2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	623b      	str	r3, [r7, #32]
 8004af0:	e00b      	b.n	8004b0a <SEGGER_SYSVIEW_SendModule+0x7e>
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	6279      	str	r1, [r7, #36]	; 0x24
 8004afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0e:	d8f0      	bhi.n	8004af2 <SEGGER_SYSVIEW_SendModule+0x66>
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	627a      	str	r2, [r7, #36]	; 0x24
 8004b16:	6a3a      	ldr	r2, [r7, #32]
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	e00b      	b.n	8004b44 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	1c59      	adds	r1, r3, #1
 8004b34:	61f9      	str	r1, [r7, #28]
 8004b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b3a:	b2d2      	uxtb	r2, r2
 8004b3c:	701a      	strb	r2, [r3, #0]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	09db      	lsrs	r3, r3, #7
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b7f      	cmp	r3, #127	; 0x7f
 8004b48:	d8f0      	bhi.n	8004b2c <SEGGER_SYSVIEW_SendModule+0xa0>
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	61fa      	str	r2, [r7, #28]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2280      	movs	r2, #128	; 0x80
 8004b60:	4619      	mov	r1, r3
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff f858 	bl	8003c18 <_EncodeStr>
 8004b68:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004b6a:	2216      	movs	r2, #22
 8004b6c:	68f9      	ldr	r1, [r7, #12]
 8004b6e:	6938      	ldr	r0, [r7, #16]
 8004b70:	f7ff f992 	bl	8003e98 <_SendPacket>
      RECORD_END();
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3730      	adds	r7, #48	; 0x30
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20013238 	.word	0x20013238
 8004b88:	20013240 	.word	0x20013240

08004b8c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00f      	beq.n	8004bba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f2      	bne.n	8004ba0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20013238 	.word	0x20013238

08004bc8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004bce:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd2:	f04f 0120 	mov.w	r1, #32
 8004bd6:	f381 8811 	msr	BASEPRI, r1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	4817      	ldr	r0, [pc, #92]	; (8004c3c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004bde:	f7ff f86b 	bl	8003cb8 <_PreparePacket>
 8004be2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e00b      	b.n	8004c0c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	6179      	str	r1, [r7, #20]
 8004bfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	09db      	lsrs	r3, r3, #7
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c10:	d8f0      	bhi.n	8004bf4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	617a      	str	r2, [r7, #20]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004c22:	221b      	movs	r2, #27
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	68b8      	ldr	r0, [r7, #8]
 8004c28:	f7ff f936 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f383 8811 	msr	BASEPRI, r3
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20013240 	.word	0x20013240
 8004c40:	2001323c 	.word	0x2001323c

08004c44 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c50:	f04f 0120 	mov.w	r1, #32
 8004c54:	f381 8811 	msr	BASEPRI, r1
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	4827      	ldr	r0, [pc, #156]	; (8004cf8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004c5c:	f7ff f82c 	bl	8003cb8 <_PreparePacket>
 8004c60:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	6938      	ldr	r0, [r7, #16]
 8004c68:	f7fe ffd6 	bl	8003c18 <_EncodeStr>
 8004c6c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
 8004c72:	2301      	movs	r3, #1
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e00b      	b.n	8004c90 <SEGGER_SYSVIEW_Warn+0x4c>
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	6279      	str	r1, [r7, #36]	; 0x24
 8004c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	09db      	lsrs	r3, r3, #7
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	2b7f      	cmp	r3, #127	; 0x7f
 8004c94:	d8f0      	bhi.n	8004c78 <SEGGER_SYSVIEW_Warn+0x34>
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c9c:	6a3a      	ldr	r2, [r7, #32]
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	61fb      	str	r3, [r7, #28]
 8004caa:	2300      	movs	r3, #0
 8004cac:	61bb      	str	r3, [r7, #24]
 8004cae:	e00b      	b.n	8004cc8 <SEGGER_SYSVIEW_Warn+0x84>
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	61f9      	str	r1, [r7, #28]
 8004cba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	09db      	lsrs	r3, r3, #7
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b7f      	cmp	r3, #127	; 0x7f
 8004ccc:	d8f0      	bhi.n	8004cb0 <SEGGER_SYSVIEW_Warn+0x6c>
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	61fa      	str	r2, [r7, #28]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004cde:	221a      	movs	r2, #26
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	6938      	ldr	r0, [r7, #16]
 8004ce4:	f7ff f8d8 	bl	8003e98 <_SendPacket>
  RECORD_END();
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f383 8811 	msr	BASEPRI, r3
}
 8004cee:	bf00      	nop
 8004cf0:	3728      	adds	r7, #40	; 0x28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20013240 	.word	0x20013240

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 f83c 	bl	8004d8c <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08004ec0 	.word	0x08004ec0
 8004d38:	08004ec0 	.word	0x08004ec0
 8004d3c:	08004ec0 	.word	0x08004ec0
 8004d40:	08004ec4 	.word	0x08004ec4

08004d44 <memcmp>:
 8004d44:	b530      	push	{r4, r5, lr}
 8004d46:	3901      	subs	r1, #1
 8004d48:	2400      	movs	r4, #0
 8004d4a:	42a2      	cmp	r2, r4
 8004d4c:	d101      	bne.n	8004d52 <memcmp+0xe>
 8004d4e:	2000      	movs	r0, #0
 8004d50:	e005      	b.n	8004d5e <memcmp+0x1a>
 8004d52:	5d03      	ldrb	r3, [r0, r4]
 8004d54:	3401      	adds	r4, #1
 8004d56:	5d0d      	ldrb	r5, [r1, r4]
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	d0f6      	beq.n	8004d4a <memcmp+0x6>
 8004d5c:	1b58      	subs	r0, r3, r5
 8004d5e:	bd30      	pop	{r4, r5, pc}

08004d60 <memcpy>:
 8004d60:	440a      	add	r2, r1
 8004d62:	4291      	cmp	r1, r2
 8004d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d68:	d100      	bne.n	8004d6c <memcpy+0xc>
 8004d6a:	4770      	bx	lr
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d76:	4291      	cmp	r1, r2
 8004d78:	d1f9      	bne.n	8004d6e <memcpy+0xe>
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <memset>:
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d100      	bne.n	8004d86 <memset+0xa>
 8004d84:	4770      	bx	lr
 8004d86:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8a:	e7f9      	b.n	8004d80 <memset+0x4>

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr
