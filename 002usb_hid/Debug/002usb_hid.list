
002usb_hid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006900  08006900  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006908  08006908  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08006910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009dc  20000164  08006a74  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b40  08006a74  00020b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150e9  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316d  00000000  00000000  0003527d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000383f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00039100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023417  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010be4  00000000  00000000  0005d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c601c  00000000  00000000  0006dce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133cff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  00133d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000164 	.word	0x20000164
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006860 	.word	0x08006860

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000168 	.word	0x20000168
 80001c4:	08006860 	.word	0x08006860

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 f9f6 	bl	80008c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f840 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8d0 	bl	8000680 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e0:	f005 fd18 	bl	8005f14 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 f8a2 	bl	800062c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(USB_RX_Buffer[2] == 1) {
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <main+0x74>)
 80004ea:	789b      	ldrb	r3, [r3, #2]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d104      	bne.n	80004fa <main+0x2a>
		 debugPrint(&huart1, "Task3\r\n");
 80004f0:	4915      	ldr	r1, [pc, #84]	; (8000548 <main+0x78>)
 80004f2:	4816      	ldr	r0, [pc, #88]	; (800054c <main+0x7c>)
 80004f4:	f000 f9a8 	bl	8000848 <debugPrint>
 80004f8:	e01e      	b.n	8000538 <main+0x68>
	 } else if(USB_RX_Buffer[2] == 1) {
 80004fa:	4b12      	ldr	r3, [pc, #72]	; (8000544 <main+0x74>)
 80004fc:	789b      	ldrb	r3, [r3, #2]
 80004fe:	2b01      	cmp	r3, #1
 8000500:	d104      	bne.n	800050c <main+0x3c>
		 debugPrint(&huart1, "Task3\r\n");
 8000502:	4911      	ldr	r1, [pc, #68]	; (8000548 <main+0x78>)
 8000504:	4811      	ldr	r0, [pc, #68]	; (800054c <main+0x7c>)
 8000506:	f000 f99f 	bl	8000848 <debugPrint>
 800050a:	e015      	b.n	8000538 <main+0x68>
	 } else if(USB_RX_Buffer[2] == 1) {
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <main+0x74>)
 800050e:	789b      	ldrb	r3, [r3, #2]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d104      	bne.n	800051e <main+0x4e>
		 debugPrint(&huart1, "Task3\r\n");
 8000514:	490c      	ldr	r1, [pc, #48]	; (8000548 <main+0x78>)
 8000516:	480d      	ldr	r0, [pc, #52]	; (800054c <main+0x7c>)
 8000518:	f000 f996 	bl	8000848 <debugPrint>
 800051c:	e00c      	b.n	8000538 <main+0x68>
	 } else if(USB_RX_Buffer[2] == 1) {
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <main+0x74>)
 8000520:	789b      	ldrb	r3, [r3, #2]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d104      	bne.n	8000530 <main+0x60>
		 debugPrint(&huart1, "Task3\r\n");
 8000526:	4908      	ldr	r1, [pc, #32]	; (8000548 <main+0x78>)
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x7c>)
 800052a:	f000 f98d 	bl	8000848 <debugPrint>
 800052e:	e003      	b.n	8000538 <main+0x68>
	 } else {
		 debugPrint(&huart1, "Task4\r\n");
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <main+0x80>)
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <main+0x7c>)
 8000534:	f000 f988 	bl	8000848 <debugPrint>
	 }
	 USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, USB_TX_Buffer, 64);
 8000538:	2240      	movs	r2, #64	; 0x40
 800053a:	4906      	ldr	r1, [pc, #24]	; (8000554 <main+0x84>)
 800053c:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x88>)
 800053e:	f004 fa8d 	bl	8004a5c <USBD_CUSTOM_HID_SendReport>
	 if(USB_RX_Buffer[2] == 1) {
 8000542:	e7d1      	b.n	80004e8 <main+0x18>
 8000544:	200001e4 	.word	0x200001e4
 8000548:	08006878 	.word	0x08006878
 800054c:	200001a0 	.word	0x200001a0
 8000550:	08006880 	.word	0x08006880
 8000554:	20000224 	.word	0x20000224
 8000558:	20000268 	.word	0x20000268

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f006 f970 	bl	8006850 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a26      	ldr	r2, [pc, #152]	; (8000624 <SystemClock_Config+0xc8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <SystemClock_Config+0xcc>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005cc:	2304      	movs	r3, #4
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005d0:	2348      	movs	r3, #72	; 0x48
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fe1f 	bl	8002224 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 f870 	bl	80006d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f002 f881 	bl	8002714 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000618:	f000 f85a 	bl	80006d0 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <MX_USART1_UART_Init+0x50>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART1_UART_Init+0x4c>)
 8000664:	f002 fa52 	bl	8002b0c <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800066e:	f000 f82f 	bl	80006d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200001a0 	.word	0x200001a0
 800067c:	40011000 	.word	0x40011000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_GPIO_Init+0x4c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a0f      	ldr	r2, [pc, #60]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_GPIO_Init+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a08      	ldr	r2, [pc, #32]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_GPIO_Init+0x4c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]

}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800

080006d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d4:	b672      	cpsid	i
}
 80006d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <Error_Handler+0x8>
	...

080006dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <HAL_MspInit+0x4c>)
 80006e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <HAL_MspInit+0x4c>)
 80006ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_MspInit+0x4c>)
 80006f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_MspInit+0x4c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	4a08      	ldr	r2, [pc, #32]	; (8000728 <HAL_MspInit+0x4c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	6413      	str	r3, [r2, #64]	; 0x40
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <HAL_UART_MspInit+0x84>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d12c      	bne.n	80007a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <HAL_UART_MspInit+0x88>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <HAL_UART_MspInit+0x88>)
 8000758:	f043 0310 	orr.w	r3, r3, #16
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_UART_MspInit+0x88>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_UART_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <HAL_UART_MspInit+0x88>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_UART_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000786:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800078a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000798:	2307      	movs	r3, #7
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4805      	ldr	r0, [pc, #20]	; (80007b8 <HAL_UART_MspInit+0x8c>)
 80007a4:	f000 fa36 	bl	8000c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	; 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40011000 	.word	0x40011000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f8ae 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	; (8000820 <OTG_FS_IRQHandler+0x10>)
 8000816:	f000 fce9 	bl	80011ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000738 	.word	0x20000738

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <debugPrint>:
 *  Created on: May 22, 2021
 *      Author: minia
 */

#include "uart_task.h"
void debugPrint(UART_HandleTypeDef *huart, char _out[]) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	f7ff fcb8 	bl	80001c8 <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	230a      	movs	r3, #10
 800085e:	6839      	ldr	r1, [r7, #0]
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f002 f9a0 	bl	8002ba6 <HAL_UART_Transmit>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000876:	490e      	ldr	r1, [pc, #56]	; (80008b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800088c:	4c0b      	ldr	r4, [pc, #44]	; (80008bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800089a:	f7ff ffc3 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089e:	f005 ffb3 	bl	8006808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a2:	f7ff fe15 	bl	80004d0 <main>
  bx  lr    
 80008a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80008b4:	08006910 	.word	0x08006910
  ldr r2, =_sbss
 80008b8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80008bc:	20000b40 	.word	0x20000b40

080008c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC_IRQHandler>
	...

080008c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_Init+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	; (8000904 <HAL_Init+0x40>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_Init+0x40>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_Init+0x40>)
 80008da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_Init+0x40>)
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f94f 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f000 f808 	bl	8000908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f8:	f7ff fef0 	bl	80006dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023c00 	.word	0x40023c00

08000908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_InitTick+0x54>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <HAL_InitTick+0x58>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f967 	bl	8000bfa <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f92f 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x5c>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	20000008 	.word	0x20000008
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008
 800098c:	20000264 	.word	0x20000264

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000264 	.word	0x20000264

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff3e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e16b      	b.n	8000f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 815a 	bne.w	8000f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	69b9      	ldr	r1, [r7, #24]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80b4 	beq.w	8000f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a5f      	ldr	r2, [pc, #380]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a5b      	ldr	r2, [pc, #364]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_GPIO_Init+0x314>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d02b      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_GPIO_Init+0x318>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x222>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <HAL_GPIO_Init+0x31c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x21e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4f      	ldr	r2, [pc, #316]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x216>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x212>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x32c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x20e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x20a>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00e      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e7e:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae90 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021c00 	.word	0x40021c00
 8000f48:	40013c00 	.word	0x40013c00

08000f4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08f      	sub	sp, #60	; 0x3c
 8000f50:	af0a      	add	r7, sp, #40	; 0x28
 8000f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e10f      	b.n	800117e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d106      	bne.n	8000f7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f005 f943 	bl	8006204 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2203      	movs	r2, #3
 8000f82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d102      	bne.n	8000f98 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 f9bc 	bl	800331a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	687e      	ldr	r6, [r7, #4]
 8000faa:	466d      	mov	r5, sp
 8000fac:	f106 0410 	add.w	r4, r6, #16
 8000fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fbc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fc0:	1d33      	adds	r3, r6, #4
 8000fc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc4:	6838      	ldr	r0, [r7, #0]
 8000fc6:	f002 f893 	bl	80030f0 <USB_CoreInit>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0d0      	b.n	800117e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 f9aa 	bl	800333c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e04a      	b.n	8001084 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fee:	7bfa      	ldrb	r2, [r7, #15]
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	1a9b      	subs	r3, r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	333d      	adds	r3, #61	; 0x3d
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	333c      	adds	r3, #60	; 0x3c
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001016:	7bfa      	ldrb	r2, [r7, #15]
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	b298      	uxth	r0, r3
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3342      	adds	r3, #66	; 0x42
 800102a:	4602      	mov	r2, r0
 800102c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	333f      	adds	r3, #63	; 0x3f
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001042:	7bfa      	ldrb	r2, [r7, #15]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	440b      	add	r3, r1
 8001050:	3344      	adds	r3, #68	; 0x44
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	3348      	adds	r3, #72	; 0x48
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	6879      	ldr	r1, [r7, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a9b      	subs	r3, r3, r2
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	440b      	add	r3, r1
 8001078:	3350      	adds	r3, #80	; 0x50
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	3301      	adds	r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	7bfa      	ldrb	r2, [r7, #15]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3af      	bcc.n	8000fee <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	e044      	b.n	800111e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001094:	7bfa      	ldrb	r2, [r7, #15]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	1a9b      	subs	r3, r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	1a9b      	subs	r3, r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	1a9b      	subs	r3, r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001102:	7bfa      	ldrb	r2, [r7, #15]
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	1a9b      	subs	r3, r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	440b      	add	r3, r1
 8001110:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	3301      	adds	r3, #1
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	d3b5      	bcc.n	8001094 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	687e      	ldr	r6, [r7, #4]
 8001130:	466d      	mov	r5, sp
 8001132:	f106 0410 	add.w	r4, r6, #16
 8001136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001142:	e885 0003 	stmia.w	r5, {r0, r1}
 8001146:	1d33      	adds	r3, r6, #4
 8001148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	f002 f920 	bl	8003390 <USB_DevInit>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2202      	movs	r2, #2
 800115a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00d      	b.n	800117e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f003 f968 	bl	800444c <USB_DevDisconnect>

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001186 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800119a:	2b01      	cmp	r3, #1
 800119c:	d101      	bne.n	80011a2 <HAL_PCD_Start+0x1c>
 800119e:	2302      	movs	r3, #2
 80011a0:	e020      	b.n	80011e4 <HAL_PCD_Start+0x5e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d109      	bne.n	80011c6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 f894 	bl	80032f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f918 	bl	800440a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b08d      	sub	sp, #52	; 0x34
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f9d6 	bl	80045b4 <USB_GetMode>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	f040 839d 	bne.w	800194a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f003 f93a 	bl	800448e <USB_ReadInterrupts>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8393 	beq.w	8001948 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f003 f931 	bl	800448e <USB_ReadInterrupts>
 800122c:	4603      	mov	r3, r0
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b02      	cmp	r3, #2
 8001234:	d107      	bne.n	8001246 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	695a      	ldr	r2, [r3, #20]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f002 0202 	and.w	r2, r2, #2
 8001244:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f003 f91f 	bl	800448e <USB_ReadInterrupts>
 8001250:	4603      	mov	r3, r0
 8001252:	f003 0310 	and.w	r3, r3, #16
 8001256:	2b10      	cmp	r3, #16
 8001258:	d161      	bne.n	800131e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0210 	bic.w	r2, r2, #16
 8001268:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	6a1b      	ldr	r3, [r3, #32]
 800126e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	f003 020f 	and.w	r2, r3, #15
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	3304      	adds	r3, #4
 8001288:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	0c5b      	lsrs	r3, r3, #17
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	2b02      	cmp	r3, #2
 8001294:	d124      	bne.n	80012e0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d035      	beq.n	800130e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	6a38      	ldr	r0, [r7, #32]
 80012b6:	f002 ff85 	bl	80041c4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c6:	441a      	add	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d8:	441a      	add	r2, r3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	e016      	b.n	800130e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	0c5b      	lsrs	r3, r3, #17
 80012e4:	f003 030f 	and.w	r3, r3, #15
 80012e8:	2b06      	cmp	r3, #6
 80012ea:	d110      	bne.n	800130e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80012f2:	2208      	movs	r2, #8
 80012f4:	4619      	mov	r1, r3
 80012f6:	6a38      	ldr	r0, [r7, #32]
 80012f8:	f002 ff64 	bl	80041c4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001308:	441a      	add	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	699a      	ldr	r2, [r3, #24]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0210 	orr.w	r2, r2, #16
 800131c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f003 f8b3 	bl	800448e <USB_ReadInterrupts>
 8001328:	4603      	mov	r3, r0
 800132a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800132e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001332:	d16e      	bne.n	8001412 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f8b9 	bl	80044b4 <USB_ReadDevAllOutEpInterrupt>
 8001342:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001344:	e062      	b.n	800140c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b00      	cmp	r3, #0
 800134e:	d057      	beq.n	8001400 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f003 f8de 	bl	800451c <USB_ReadDevOutEPInterrupt>
 8001360:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d00c      	beq.n	8001386 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	015a      	lsls	r2, r3, #5
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	4413      	add	r3, r2
 8001374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001378:	461a      	mov	r2, r3
 800137a:	2301      	movs	r3, #1
 800137c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800137e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fd99 	bl	8001eb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00c      	beq.n	80013aa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	015a      	lsls	r2, r3, #5
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	4413      	add	r3, r2
 8001398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800139c:	461a      	mov	r2, r3
 800139e:	2308      	movs	r3, #8
 80013a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fe93 	bl	80020d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c0:	461a      	mov	r2, r3
 80013c2:	2310      	movs	r3, #16
 80013c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	f003 0320 	and.w	r3, r3, #32
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	015a      	lsls	r2, r3, #5
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013dc:	461a      	mov	r2, r3
 80013de:	2320      	movs	r3, #32
 80013e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	015a      	lsls	r2, r3, #5
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	4413      	add	r3, r2
 80013f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013f8:	461a      	mov	r2, r3
 80013fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	3301      	adds	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	2b00      	cmp	r3, #0
 8001410:	d199      	bne.n	8001346 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f003 f839 	bl	800448e <USB_ReadInterrupts>
 800141c:	4603      	mov	r3, r0
 800141e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001426:	f040 80c0 	bne.w	80015aa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f85a 	bl	80044e8 <USB_ReadDevAllInEpInterrupt>
 8001434:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800143a:	e0b2      	b.n	80015a2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	f000 80a7 	beq.w	8001596 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f880 	bl	8004558 <USB_ReadDevInEPInterrupt>
 8001458:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d057      	beq.n	8001514 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	2201      	movs	r2, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43db      	mvns	r3, r3
 800147e:	69f9      	ldr	r1, [r7, #28]
 8001480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001484:	4013      	ands	r3, r2
 8001486:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	015a      	lsls	r2, r3, #5
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	4413      	add	r3, r2
 8001490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001494:	461a      	mov	r2, r3
 8001496:	2301      	movs	r3, #1
 8001498:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d132      	bne.n	8001508 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3348      	adds	r3, #72	; 0x48
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4403      	add	r3, r0
 80014c2:	3344      	adds	r3, #68	; 0x44
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4419      	add	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4403      	add	r3, r0
 80014d6:	3348      	adds	r3, #72	; 0x48
 80014d8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d113      	bne.n	8001508 <HAL_PCD_IRQHandler+0x31c>
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e4:	4613      	mov	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3350      	adds	r3, #80	; 0x50
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d108      	bne.n	8001508 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001500:	461a      	mov	r2, r3
 8001502:	2101      	movs	r1, #1
 8001504:	f003 f888 	bl	8004618 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f004 fef9 	bl	8006306 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800152a:	461a      	mov	r2, r3
 800152c:	2308      	movs	r3, #8
 800152e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	4413      	add	r3, r2
 8001542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001546:	461a      	mov	r2, r3
 8001548:	2310      	movs	r3, #16
 800154a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	015a      	lsls	r2, r3, #5
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	4413      	add	r3, r2
 800155e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001562:	461a      	mov	r2, r3
 8001564:	2340      	movs	r3, #64	; 0x40
 8001566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d008      	beq.n	8001584 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	015a      	lsls	r2, r3, #5
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	4413      	add	r3, r2
 800157a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800157e:	461a      	mov	r2, r3
 8001580:	2302      	movs	r3, #2
 8001582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800158e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fc03 	bl	8001d9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	3301      	adds	r3, #1
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	085b      	lsrs	r3, r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f47f af49 	bne.w	800143c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 ff6d 	bl	800448e <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015be:	d122      	bne.n	8001606 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d108      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015e6:	2100      	movs	r1, #0
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fe0f 	bl	800220c <HAL_PCDEx_LPM_Callback>
 80015ee:	e002      	b.n	80015f6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f004 feff 	bl	80063f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f002 ff3f 	bl	800448e <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800161a:	d112      	bne.n	8001642 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f004 febb 	bl	80063a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001640:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f002 ff21 	bl	800448e <USB_ReadInterrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001656:	f040 80c7 	bne.w	80017e8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2110      	movs	r1, #16
 8001674:	4618      	mov	r0, r3
 8001676:	f001 ffef 	bl	8003658 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800167e:	e056      	b.n	800172e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	015a      	lsls	r2, r3, #5
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	4413      	add	r3, r2
 8001688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168c:	461a      	mov	r2, r3
 800168e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001692:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a4:	0151      	lsls	r1, r2, #5
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	440a      	add	r2, r1
 80016aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016b2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016c4:	0151      	lsls	r1, r2, #5
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	440a      	add	r2, r1
 80016ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e0:	461a      	mov	r2, r3
 80016e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f8:	0151      	lsls	r1, r2, #5
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	440a      	add	r2, r1
 80016fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001718:	0151      	lsls	r1, r2, #5
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	440a      	add	r2, r1
 800171e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001726:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	3301      	adds	r3, #1
 800172c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001734:	429a      	cmp	r2, r3
 8001736:	d3a3      	bcc.n	8001680 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001746:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800174a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	2b00      	cmp	r3, #0
 8001752:	d016      	beq.n	8001782 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001764:	f043 030b 	orr.w	r3, r3, #11
 8001768:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800177a:	f043 030b 	orr.w	r3, r3, #11
 800177e:	6453      	str	r3, [r2, #68]	; 0x44
 8001780:	e015      	b.n	80017ae <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001794:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001798:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a8:	f043 030b 	orr.w	r3, r3, #11
 80017ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	69fa      	ldr	r2, [r7, #28]
 80017b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017d2:	461a      	mov	r2, r3
 80017d4:	f002 ff20 	bl	8004618 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fe4e 	bl	800448e <USB_ReadInterrupts>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017fc:	d124      	bne.n	8001848 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f002 fee4 	bl	80045d0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f001 ff84 	bl	800371a <USB_GetDevSpeed>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681c      	ldr	r4, [r3, #0]
 800181e:	f001 f941 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8001822:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4620      	mov	r0, r4
 800182e:	f001 fcc1 	bl	80031b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f004 fd8f 	bl	8006356 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001846:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fe1e 	bl	800448e <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b08      	cmp	r3, #8
 800185a:	d10a      	bne.n	8001872 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f004 fd6c 	bl	800633a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695a      	ldr	r2, [r3, #20]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f002 0208 	and.w	r2, r2, #8
 8001870:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 fe09 	bl	800448e <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001886:	d10f      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f004 fdce 	bl	8006434 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fdee 	bl	800448e <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018bc:	d10f      	bne.n	80018de <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	4619      	mov	r1, r3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f004 fda1 	bl	8006410 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f002 fdd3 	bl	800448e <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d10a      	bne.n	800190a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f004 fdaf 	bl	8006458 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001908:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f002 fdbd 	bl	800448e <USB_ReadInterrupts>
 8001914:	4603      	mov	r3, r0
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b04      	cmp	r3, #4
 800191c:	d115      	bne.n	800194a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f004 fd9f 	bl	8006474 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	e000      	b.n	800194a <HAL_PCD_IRQHandler+0x75e>
      return;
 8001948:	bf00      	nop
    }
  }
}
 800194a:	3734      	adds	r7, #52	; 0x34
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}

08001950 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001962:	2b01      	cmp	r3, #1
 8001964:	d101      	bne.n	800196a <HAL_PCD_SetAddress+0x1a>
 8001966:	2302      	movs	r3, #2
 8001968:	e013      	b.n	8001992 <HAL_PCD_SetAddress+0x42>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	78fa      	ldrb	r2, [r7, #3]
 8001976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	4611      	mov	r1, r2
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fd1b 	bl	80043be <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	4608      	mov	r0, r1
 80019a4:	4611      	mov	r1, r2
 80019a6:	461a      	mov	r2, r3
 80019a8:	4603      	mov	r3, r0
 80019aa:	70fb      	strb	r3, [r7, #3]
 80019ac:	460b      	mov	r3, r1
 80019ae:	803b      	strh	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	da0f      	bge.n	80019e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 020f 	and.w	r2, r3, #15
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3338      	adds	r3, #56	; 0x38
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	3304      	adds	r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2201      	movs	r2, #1
 80019dc:	705a      	strb	r2, [r3, #1]
 80019de:	e00f      	b.n	8001a00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a0c:	883a      	ldrh	r2, [r7, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	78ba      	ldrb	r2, [r7, #2]
 8001a16:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	785b      	ldrb	r3, [r3, #1]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a2a:	78bb      	ldrb	r3, [r7, #2]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d102      	bne.n	8001a36 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d101      	bne.n	8001a44 <HAL_PCD_EP_Open+0xaa>
 8001a40:	2302      	movs	r3, #2
 8001a42:	e00e      	b.n	8001a62 <HAL_PCD_EP_Open+0xc8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fe86 	bl	8003764 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a60:	7afb      	ldrb	r3, [r7, #11]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da0f      	bge.n	8001a9e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	f003 020f 	and.w	r2, r3, #15
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	3338      	adds	r3, #56	; 0x38
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	705a      	strb	r2, [r3, #1]
 8001a9c:	e00f      	b.n	8001abe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	1a9b      	subs	r3, r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_EP_Close+0x6e>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Close+0x8c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fec4 	bl	8003874 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d109      	bne.n	8001b78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	6979      	ldr	r1, [r7, #20]
 8001b72:	f002 f99f 	bl	8003eb4 <USB_EP0StartXfer>
 8001b76:	e008      	b.n	8001b8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6979      	ldr	r1, [r7, #20]
 8001b86:	f001 ff51 	bl	8003a2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	f003 020f 	and.w	r2, r3, #15
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3338      	adds	r3, #56	; 0x38
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bee:	7afb      	ldrb	r3, [r7, #11]
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	6979      	ldr	r1, [r7, #20]
 8001c06:	f002 f955 	bl	8003eb4 <USB_EP0StartXfer>
 8001c0a:	e008      	b.n	8001c1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	6979      	ldr	r1, [r7, #20]
 8001c1a:	f001 ff07 	bl	8003a2c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 020f 	and.w	r2, r3, #15
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d901      	bls.n	8001c46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e050      	b.n	8001ce8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da0f      	bge.n	8001c6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 020f 	and.w	r2, r3, #15
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	1a9b      	subs	r3, r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	3338      	adds	r3, #56	; 0x38
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
 8001c6c:	e00d      	b.n	8001c8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c6e:	78fa      	ldrb	r2, [r7, #3]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	3304      	adds	r3, #4
 8001c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 030f 	and.w	r3, r3, #15
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_PCD_EP_SetStall+0x82>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e01e      	b.n	8001ce8 <HAL_PCD_EP_SetStall+0xc0>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68f9      	ldr	r1, [r7, #12]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f002 faac 	bl	8004216 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	b2d9      	uxtb	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001cd8:	461a      	mov	r2, r3
 8001cda:	f002 fc9d 	bl	8004618 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 020f 	and.w	r2, r3, #15
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d901      	bls.n	8001d0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e042      	b.n	8001d94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da0f      	bge.n	8001d36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 020f 	and.w	r2, r3, #15
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	3338      	adds	r3, #56	; 0x38
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	705a      	strb	r2, [r3, #1]
 8001d34:	e00f      	b.n	8001d56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 020f 	and.w	r2, r3, #15
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	1a9b      	subs	r3, r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_PCD_EP_ClrStall+0x86>
 8001d72:	2302      	movs	r3, #2
 8001d74:	e00e      	b.n	8001d94 <HAL_PCD_EP_ClrStall+0xa4>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fab4 	bl	80042f2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	4613      	mov	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	1a9b      	subs	r3, r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	3338      	adds	r3, #56	; 0x38
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	699a      	ldr	r2, [r3, #24]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d901      	bls.n	8001dd4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e06c      	b.n	8001eae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	69fa      	ldr	r2, [r7, #28]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d902      	bls.n	8001df0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3303      	adds	r3, #3
 8001df4:	089b      	lsrs	r3, r3, #2
 8001df6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001df8:	e02b      	b.n	8001e52 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d902      	bls.n	8001e16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3303      	adds	r3, #3
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	68d9      	ldr	r1, [r3, #12]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	4603      	mov	r3, r0
 8001e34:	6978      	ldr	r0, [r7, #20]
 8001e36:	f002 f990 	bl	800415a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	441a      	add	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	699a      	ldr	r2, [r3, #24]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	441a      	add	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d809      	bhi.n	8001e7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d203      	bcs.n	8001e7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1be      	bne.n	8001dfa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	695a      	ldr	r2, [r3, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d811      	bhi.n	8001eac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	2201      	movs	r2, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	6939      	ldr	r1, [r7, #16]
 8001ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3720      	adds	r7, #32
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	333c      	adds	r3, #60	; 0x3c
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	f040 80a0 	bne.w	8002030 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d015      	beq.n	8001f26 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	f240 80dd 	bls.w	80020be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80d7 	beq.w	80020be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f22:	6093      	str	r3, [r2, #8]
 8001f24:	e0cb      	b.n	80020be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d009      	beq.n	8001f44 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2320      	movs	r3, #32
 8001f40:	6093      	str	r3, [r2, #8]
 8001f42:	e0bc      	b.n	80020be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 80b7 	bne.w	80020be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a5d      	ldr	r2, [pc, #372]	; (80020c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d90f      	bls.n	8001f78 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	015a      	lsls	r2, r3, #5
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f74:	6093      	str	r3, [r2, #8]
 8001f76:	e0a2      	b.n	80020be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f8a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	0159      	lsls	r1, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	440b      	add	r3, r1
 8001f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001f9e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4403      	add	r3, r0
 8001fae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fb2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fc6:	6819      	ldr	r1, [r3, #0]
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4403      	add	r3, r0
 8001fd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4419      	add	r1, r3
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	1a9b      	subs	r3, r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ff0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d114      	bne.n	8002022 <PCD_EP_OutXfrComplete_int+0x16a>
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800201a:	461a      	mov	r2, r3
 800201c:	2101      	movs	r1, #1
 800201e:	f002 fafb 	bl	8004618 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	4619      	mov	r1, r3
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f004 f951 	bl	80062d0 <HAL_PCD_DataOutStageCallback>
 800202e:	e046      	b.n	80020be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4a26      	ldr	r2, [pc, #152]	; (80020cc <PCD_EP_OutXfrComplete_int+0x214>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d124      	bne.n	8002082 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	015a      	lsls	r2, r3, #5
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4413      	add	r3, r2
 800204a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204e:	461a      	mov	r2, r3
 8002050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002054:	6093      	str	r3, [r2, #8]
 8002056:	e032      	b.n	80020be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206e:	461a      	mov	r2, r3
 8002070:	2320      	movs	r3, #32
 8002072:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4619      	mov	r1, r3
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f004 f928 	bl	80062d0 <HAL_PCD_DataOutStageCallback>
 8002080:	e01d      	b.n	80020be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d114      	bne.n	80020b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d108      	bne.n	80020b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020aa:	461a      	mov	r2, r3
 80020ac:	2100      	movs	r1, #0
 80020ae:	f002 fab3 	bl	8004618 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f004 f909 	bl	80062d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	4f54300a 	.word	0x4f54300a
 80020cc:	4f54310a 	.word	0x4f54310a

080020d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	333c      	adds	r3, #60	; 0x3c
 80020e8:	3304      	adds	r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4a15      	ldr	r2, [pc, #84]	; (8002158 <PCD_EP_OutSetupPacket_int+0x88>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d90e      	bls.n	8002124 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211c:	461a      	mov	r2, r3
 800211e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002122:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f004 f8c1 	bl	80062ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <PCD_EP_OutSetupPacket_int+0x88>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d90c      	bls.n	800214c <PCD_EP_OutSetupPacket_int+0x7c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002144:	461a      	mov	r2, r3
 8002146:	2101      	movs	r1, #1
 8002148:	f002 fa66 	bl	8004618 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	4f54300a 	.word	0x4f54300a

0800215c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
 8002168:	4613      	mov	r3, r2
 800216a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800217a:	883b      	ldrh	r3, [r7, #0]
 800217c:	0419      	lsls	r1, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	430a      	orrs	r2, r1
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
 8002188:	e028      	b.n	80021dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4413      	add	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e00d      	b.n	80021ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	3340      	adds	r3, #64	; 0x40
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	4413      	add	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	3301      	adds	r3, #1
 80021b8:	73fb      	strb	r3, [r7, #15]
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	3b01      	subs	r3, #1
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3ec      	bcc.n	800219e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80021c4:	883b      	ldrh	r3, [r7, #0]
 80021c6:	0418      	lsls	r0, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	4302      	orrs	r2, r0
 80021d4:	3340      	adds	r3, #64	; 0x40
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	460b      	mov	r3, r1
 80021f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	887a      	ldrh	r2, [r7, #2]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e264      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002242:	4ba3      	ldr	r3, [pc, #652]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4ba0      	ldr	r3, [pc, #640]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b9d      	ldr	r3, [pc, #628]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b99      	ldr	r3, [pc, #612]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e23f      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b91      	ldr	r3, [pc, #580]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a90      	ldr	r2, [pc, #576]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b8b      	ldr	r3, [pc, #556]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a8a      	ldr	r2, [pc, #552]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b88      	ldr	r3, [pc, #544]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a87      	ldr	r2, [pc, #540]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b84      	ldr	r3, [pc, #528]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a83      	ldr	r2, [pc, #524]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b81      	ldr	r3, [pc, #516]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a80      	ldr	r2, [pc, #512]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fb58 	bl	8000990 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e4:	f7fe fb54 	bl	8000990 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	; 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e204      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b76      	ldr	r3, [pc, #472]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe fb44 	bl	8000990 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230c:	f7fe fb40 	bl	8000990 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	; 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1f0      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b6c      	ldr	r3, [pc, #432]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800233a:	4b65      	ldr	r3, [pc, #404]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b62      	ldr	r3, [pc, #392]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b5f      	ldr	r3, [pc, #380]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1c4      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4952      	ldr	r1, [pc, #328]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <HAL_RCC_OscConfig+0x2b0>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe faf9 	bl	8000990 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a2:	f7fe faf5 	bl	8000990 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1a5      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b46      	ldr	r3, [pc, #280]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4940      	ldr	r1, [pc, #256]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b3f      	ldr	r3, [pc, #252]	; (80024d4 <HAL_RCC_OscConfig+0x2b0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe fad8 	bl	8000990 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e4:	f7fe fad4 	bl	8000990 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e184      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d030      	beq.n	8002470 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <HAL_RCC_OscConfig+0x2b4>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7fe fab8 	bl	8000990 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002424:	f7fe fab4 	bl	8000990 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e164      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
 8002442:	e015      	b.n	8002470 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x2b4>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7fe faa1 	bl	8000990 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe fa9d 	bl	8000990 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e14d      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a0 	beq.w	80025be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d121      	bne.n	80024fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a07      	ldr	r2, [pc, #28]	; (80024dc <HAL_RCC_OscConfig+0x2b8>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7fe fa63 	bl	8000990 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e011      	b.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000
 80024d8:	42470e80 	.word	0x42470e80
 80024dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fa56 	bl	8000990 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e106      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b85      	ldr	r3, [pc, #532]	; (8002708 <HAL_RCC_OscConfig+0x4e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x2f0>
 8002506:	4b81      	ldr	r3, [pc, #516]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	4a80      	ldr	r2, [pc, #512]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70
 8002512:	e01c      	b.n	800254e <HAL_RCC_OscConfig+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b05      	cmp	r3, #5
 800251a:	d10c      	bne.n	8002536 <HAL_RCC_OscConfig+0x312>
 800251c:	4b7b      	ldr	r3, [pc, #492]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002520:	4a7a      	ldr	r2, [pc, #488]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002522:	f043 0304 	orr.w	r3, r3, #4
 8002526:	6713      	str	r3, [r2, #112]	; 0x70
 8002528:	4b78      	ldr	r3, [pc, #480]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	4a77      	ldr	r2, [pc, #476]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	6713      	str	r3, [r2, #112]	; 0x70
 8002534:	e00b      	b.n	800254e <HAL_RCC_OscConfig+0x32a>
 8002536:	4b75      	ldr	r3, [pc, #468]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	4a74      	ldr	r2, [pc, #464]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70
 8002542:	4b72      	ldr	r3, [pc, #456]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a71      	ldr	r2, [pc, #452]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002548:	f023 0304 	bic.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002556:	f7fe fa1b 	bl	8000990 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe fa17 	bl	8000990 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0c5      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	4b65      	ldr	r3, [pc, #404]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ee      	beq.n	800255e <HAL_RCC_OscConfig+0x33a>
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002582:	f7fe fa05 	bl	8000990 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	e00a      	b.n	80025a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800258a:	f7fe fa01 	bl	8000990 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f241 3288 	movw	r2, #5000	; 0x1388
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e0af      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	4b5a      	ldr	r3, [pc, #360]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ee      	bne.n	800258a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d105      	bne.n	80025be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a55      	ldr	r2, [pc, #340]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 809b 	beq.w	80026fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d05c      	beq.n	800268e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d141      	bne.n	8002660 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCC_OscConfig+0x4ec>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e2:	f7fe f9d5 	bl	8000990 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ea:	f7fe f9d1 	bl	8000990 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e081      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fc:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69da      	ldr	r2, [r3, #28]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	019b      	lsls	r3, r3, #6
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	3b01      	subs	r3, #1
 8002622:	041b      	lsls	r3, r3, #16
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	061b      	lsls	r3, r3, #24
 800262c:	4937      	ldr	r1, [pc, #220]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800262e:	4313      	orrs	r3, r2
 8002630:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002632:	4b37      	ldr	r3, [pc, #220]	; (8002710 <HAL_RCC_OscConfig+0x4ec>)
 8002634:	2201      	movs	r2, #1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe f9aa 	bl	8000990 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002640:	f7fe f9a6 	bl	8000990 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e056      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002652:	4b2e      	ldr	r3, [pc, #184]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x41c>
 800265e:	e04e      	b.n	80026fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <HAL_RCC_OscConfig+0x4ec>)
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002666:	f7fe f993 	bl	8000990 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266e:	f7fe f98f 	bl	8000990 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e03f      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f0      	bne.n	800266e <HAL_RCC_OscConfig+0x44a>
 800268c:	e037      	b.n	80026fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e032      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCC_OscConfig+0x4e8>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d028      	beq.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d11a      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026ca:	4013      	ands	r3, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d111      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d107      	bne.n	80026fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40007000 	.word	0x40007000
 800270c:	40023800 	.word	0x40023800
 8002710:	42470060 	.word	0x42470060

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe f8c4 	bl	8000990 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe f8c0 	bl	8000990 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	; (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe f824 	bl	8000908 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	080068e8 	.word	0x080068e8
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	607b      	str	r3, [r7, #4]
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	2300      	movs	r3, #0
 80028f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d00d      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 8002904:	2b08      	cmp	r3, #8
 8002906:	f200 80bd 	bhi.w	8002a84 <HAL_RCC_GetSysClockFreq+0x1a4>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3a>
 8002912:	e0b7      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002916:	60bb      	str	r3, [r7, #8]
       break;
 8002918:	e0b7      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800291c:	60bb      	str	r3, [r7, #8]
      break;
 800291e:	e0b4      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002928:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292a:	4b5b      	ldr	r3, [pc, #364]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d04d      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	4b58      	ldr	r3, [pc, #352]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	461a      	mov	r2, r3
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002946:	f04f 0100 	mov.w	r1, #0
 800294a:	ea02 0800 	and.w	r8, r2, r0
 800294e:	ea03 0901 	and.w	r9, r3, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	014b      	lsls	r3, r1, #5
 8002960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002964:	0142      	lsls	r2, r0, #5
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	ebb0 0008 	subs.w	r0, r0, r8
 800296e:	eb61 0109 	sbc.w	r1, r1, r9
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	018b      	lsls	r3, r1, #6
 800297c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002980:	0182      	lsls	r2, r0, #6
 8002982:	1a12      	subs	r2, r2, r0
 8002984:	eb63 0301 	sbc.w	r3, r3, r1
 8002988:	f04f 0000 	mov.w	r0, #0
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	00d9      	lsls	r1, r3, #3
 8002992:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002996:	00d0      	lsls	r0, r2, #3
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	eb12 0208 	adds.w	r2, r2, r8
 80029a0:	eb43 0309 	adc.w	r3, r3, r9
 80029a4:	f04f 0000 	mov.w	r0, #0
 80029a8:	f04f 0100 	mov.w	r1, #0
 80029ac:	0259      	lsls	r1, r3, #9
 80029ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029b2:	0250      	lsls	r0, r2, #9
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	f7fd fc08 	bl	80001d8 <__aeabi_uldivmod>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4613      	mov	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e04a      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b31      	ldr	r3, [pc, #196]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	461a      	mov	r2, r3
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	ea02 0400 	and.w	r4, r2, r0
 80029ea:	ea03 0501 	and.w	r5, r3, r1
 80029ee:	4620      	mov	r0, r4
 80029f0:	4629      	mov	r1, r5
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	014b      	lsls	r3, r1, #5
 80029fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a00:	0142      	lsls	r2, r0, #5
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	1b00      	subs	r0, r0, r4
 8002a08:	eb61 0105 	sbc.w	r1, r1, r5
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	018b      	lsls	r3, r1, #6
 8002a16:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a1a:	0182      	lsls	r2, r0, #6
 8002a1c:	1a12      	subs	r2, r2, r0
 8002a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	00d9      	lsls	r1, r3, #3
 8002a2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a30:	00d0      	lsls	r0, r2, #3
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	1912      	adds	r2, r2, r4
 8002a38:	eb45 0303 	adc.w	r3, r5, r3
 8002a3c:	f04f 0000 	mov.w	r0, #0
 8002a40:	f04f 0100 	mov.w	r1, #0
 8002a44:	0299      	lsls	r1, r3, #10
 8002a46:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a4a:	0290      	lsls	r0, r2, #10
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	f7fd fbbc 	bl	80001d8 <__aeabi_uldivmod>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4613      	mov	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a80:	60bb      	str	r3, [r7, #8]
      break;
 8002a82:	e002      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a86:	60bb      	str	r3, [r7, #8]
      break;
 8002a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	00f42400 	.word	0x00f42400
 8002aa0:	007a1200 	.word	0x007a1200

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20000000 	.word	0x20000000

08002abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ac0:	f7ff fff0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ad2:	5ccb      	ldrb	r3, [r1, r3]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	080068f8 	.word	0x080068f8

08002ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ae8:	f7ff ffdc 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	0b5b      	lsrs	r3, r3, #13
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	4903      	ldr	r1, [pc, #12]	; (8002b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002afa:	5ccb      	ldrb	r3, [r1, r3]
 8002afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40023800 	.word	0x40023800
 8002b08:	080068f8 	.word	0x080068f8

08002b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e03f      	b.n	8002b9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd fdfa 	bl	800072c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	; 0x24
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f905 	bl	8002d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b08a      	sub	sp, #40	; 0x28
 8002baa:	af02      	add	r7, sp, #8
 8002bac:	60f8      	str	r0, [r7, #12]
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d17c      	bne.n	8002cc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_UART_Transmit+0x2c>
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e075      	b.n	8002cc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Transmit+0x3e>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e06e      	b.n	8002cc2 <HAL_UART_Transmit+0x11c>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2221      	movs	r2, #33	; 0x21
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bfa:	f7fd fec9 	bl	8000990 <HAL_GetTick>
 8002bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c14:	d108      	bne.n	8002c28 <HAL_UART_Transmit+0x82>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e003      	b.n	8002c30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c38:	e02a      	b.n	8002c90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 f840 	bl	8002cca <UART_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e036      	b.n	8002cc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e007      	b.n	8002c82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1cf      	bne.n	8002c3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2140      	movs	r1, #64	; 0x40
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f810 	bl	8002cca <UART_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e006      	b.n	8002cc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3720      	adds	r7, #32
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cda:	e02c      	b.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d028      	beq.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d007      	beq.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x30>
 8002cea:	f7fd fe51 	bl	8000990 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d21d      	bcs.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00f      	b.n	8002d56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d0c3      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d64:	b09f      	sub	sp, #124	; 0x7c
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d76:	68d9      	ldr	r1, [r3, #12]
 8002d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	ea40 0301 	orr.w	r3, r0, r1
 8002d80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	431a      	orrs	r2, r3
 8002d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002da4:	f021 010c 	bic.w	r1, r1, #12
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dae:	430b      	orrs	r3, r1
 8002db0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	6999      	ldr	r1, [r3, #24]
 8002dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	ea40 0301 	orr.w	r3, r0, r1
 8002dc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4bc5      	ldr	r3, [pc, #788]	; (80030e4 <UART_SetConfig+0x384>)
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d004      	beq.n	8002dde <UART_SetConfig+0x7e>
 8002dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4bc3      	ldr	r3, [pc, #780]	; (80030e8 <UART_SetConfig+0x388>)
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d103      	bne.n	8002de6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002dde:	f7ff fe81 	bl	8002ae4 <HAL_RCC_GetPCLK2Freq>
 8002de2:	6778      	str	r0, [r7, #116]	; 0x74
 8002de4:	e002      	b.n	8002dec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002de6:	f7ff fe69 	bl	8002abc <HAL_RCC_GetPCLK1Freq>
 8002dea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df4:	f040 80b6 	bne.w	8002f64 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dfa:	461c      	mov	r4, r3
 8002dfc:	f04f 0500 	mov.w	r5, #0
 8002e00:	4622      	mov	r2, r4
 8002e02:	462b      	mov	r3, r5
 8002e04:	1891      	adds	r1, r2, r2
 8002e06:	6439      	str	r1, [r7, #64]	; 0x40
 8002e08:	415b      	adcs	r3, r3
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e10:	1912      	adds	r2, r2, r4
 8002e12:	eb45 0303 	adc.w	r3, r5, r3
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	00d9      	lsls	r1, r3, #3
 8002e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e24:	00d0      	lsls	r0, r2, #3
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	1911      	adds	r1, r2, r4
 8002e2c:	6639      	str	r1, [r7, #96]	; 0x60
 8002e2e:	416b      	adcs	r3, r5
 8002e30:	667b      	str	r3, [r7, #100]	; 0x64
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	461a      	mov	r2, r3
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e40:	415b      	adcs	r3, r3
 8002e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e4c:	f7fd f9c4 	bl	80001d8 <__aeabi_uldivmod>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4ba5      	ldr	r3, [pc, #660]	; (80030ec <UART_SetConfig+0x38c>)
 8002e56:	fba3 2302 	umull	r2, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	011e      	lsls	r6, r3, #4
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	461c      	mov	r4, r3
 8002e62:	f04f 0500 	mov.w	r5, #0
 8002e66:	4622      	mov	r2, r4
 8002e68:	462b      	mov	r3, r5
 8002e6a:	1891      	adds	r1, r2, r2
 8002e6c:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6e:	415b      	adcs	r3, r3
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
 8002e72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002e76:	1912      	adds	r2, r2, r4
 8002e78:	eb45 0303 	adc.w	r3, r5, r3
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	00d9      	lsls	r1, r3, #3
 8002e86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e8a:	00d0      	lsls	r0, r2, #3
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	1911      	adds	r1, r2, r4
 8002e92:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e94:	416b      	adcs	r3, r5
 8002e96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	1891      	adds	r1, r2, r2
 8002ea4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ea6:	415b      	adcs	r3, r3
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002eb2:	f7fd f991 	bl	80001d8 <__aeabi_uldivmod>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4b8c      	ldr	r3, [pc, #560]	; (80030ec <UART_SetConfig+0x38c>)
 8002ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	2164      	movs	r1, #100	; 0x64
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	3332      	adds	r3, #50	; 0x32
 8002ece:	4a87      	ldr	r2, [pc, #540]	; (80030ec <UART_SetConfig+0x38c>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002edc:	441e      	add	r6, r3
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f04f 0100 	mov.w	r1, #0
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	1894      	adds	r4, r2, r2
 8002eec:	623c      	str	r4, [r7, #32]
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ef6:	1812      	adds	r2, r2, r0
 8002ef8:	eb41 0303 	adc.w	r3, r1, r3
 8002efc:	f04f 0400 	mov.w	r4, #0
 8002f00:	f04f 0500 	mov.w	r5, #0
 8002f04:	00dd      	lsls	r5, r3, #3
 8002f06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f0a:	00d4      	lsls	r4, r2, #3
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	462b      	mov	r3, r5
 8002f10:	1814      	adds	r4, r2, r0
 8002f12:	653c      	str	r4, [r7, #80]	; 0x50
 8002f14:	414b      	adcs	r3, r1
 8002f16:	657b      	str	r3, [r7, #84]	; 0x54
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	61b9      	str	r1, [r7, #24]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f2e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f32:	f7fd f951 	bl	80001d8 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <UART_SetConfig+0x38c>)
 8002f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	2164      	movs	r1, #100	; 0x64
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3332      	adds	r3, #50	; 0x32
 8002f4e:	4a67      	ldr	r2, [pc, #412]	; (80030ec <UART_SetConfig+0x38c>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	f003 0207 	and.w	r2, r3, #7
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4432      	add	r2, r6
 8002f60:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f62:	e0b9      	b.n	80030d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f66:	461c      	mov	r4, r3
 8002f68:	f04f 0500 	mov.w	r5, #0
 8002f6c:	4622      	mov	r2, r4
 8002f6e:	462b      	mov	r3, r5
 8002f70:	1891      	adds	r1, r2, r2
 8002f72:	6139      	str	r1, [r7, #16]
 8002f74:	415b      	adcs	r3, r3
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f7c:	1912      	adds	r2, r2, r4
 8002f7e:	eb45 0303 	adc.w	r3, r5, r3
 8002f82:	f04f 0000 	mov.w	r0, #0
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	00d9      	lsls	r1, r3, #3
 8002f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f90:	00d0      	lsls	r0, r2, #3
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	eb12 0804 	adds.w	r8, r2, r4
 8002f9a:	eb43 0905 	adc.w	r9, r3, r5
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f04f 0100 	mov.w	r1, #0
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	008b      	lsls	r3, r1, #2
 8002fb2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002fb6:	0082      	lsls	r2, r0, #2
 8002fb8:	4640      	mov	r0, r8
 8002fba:	4649      	mov	r1, r9
 8002fbc:	f7fd f90c 	bl	80001d8 <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b49      	ldr	r3, [pc, #292]	; (80030ec <UART_SetConfig+0x38c>)
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	011e      	lsls	r6, r3, #4
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f04f 0100 	mov.w	r1, #0
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	1894      	adds	r4, r2, r2
 8002fdc:	60bc      	str	r4, [r7, #8]
 8002fde:	415b      	adcs	r3, r3
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe6:	1812      	adds	r2, r2, r0
 8002fe8:	eb41 0303 	adc.w	r3, r1, r3
 8002fec:	f04f 0400 	mov.w	r4, #0
 8002ff0:	f04f 0500 	mov.w	r5, #0
 8002ff4:	00dd      	lsls	r5, r3, #3
 8002ff6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ffa:	00d4      	lsls	r4, r2, #3
 8002ffc:	4622      	mov	r2, r4
 8002ffe:	462b      	mov	r3, r5
 8003000:	1814      	adds	r4, r2, r0
 8003002:	64bc      	str	r4, [r7, #72]	; 0x48
 8003004:	414b      	adcs	r3, r1
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	008b      	lsls	r3, r1, #2
 800301c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003020:	0082      	lsls	r2, r0, #2
 8003022:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003026:	f7fd f8d7 	bl	80001d8 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <UART_SetConfig+0x38c>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	2164      	movs	r1, #100	; 0x64
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	3332      	adds	r3, #50	; 0x32
 8003042:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <UART_SetConfig+0x38c>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304e:	441e      	add	r6, r3
 8003050:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003052:	4618      	mov	r0, r3
 8003054:	f04f 0100 	mov.w	r1, #0
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	1894      	adds	r4, r2, r2
 800305e:	603c      	str	r4, [r7, #0]
 8003060:	415b      	adcs	r3, r3
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003068:	1812      	adds	r2, r2, r0
 800306a:	eb41 0303 	adc.w	r3, r1, r3
 800306e:	f04f 0400 	mov.w	r4, #0
 8003072:	f04f 0500 	mov.w	r5, #0
 8003076:	00dd      	lsls	r5, r3, #3
 8003078:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800307c:	00d4      	lsls	r4, r2, #3
 800307e:	4622      	mov	r2, r4
 8003080:	462b      	mov	r3, r5
 8003082:	eb12 0a00 	adds.w	sl, r2, r0
 8003086:	eb43 0b01 	adc.w	fp, r3, r1
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	008b      	lsls	r3, r1, #2
 800309e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030a2:	0082      	lsls	r2, r0, #2
 80030a4:	4650      	mov	r0, sl
 80030a6:	4659      	mov	r1, fp
 80030a8:	f7fd f896 	bl	80001d8 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <UART_SetConfig+0x38c>)
 80030b2:	fba3 1302 	umull	r1, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2164      	movs	r1, #100	; 0x64
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	3332      	adds	r3, #50	; 0x32
 80030c4:	4a09      	ldr	r2, [pc, #36]	; (80030ec <UART_SetConfig+0x38c>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4432      	add	r2, r6
 80030d6:	609a      	str	r2, [r3, #8]
}
 80030d8:	bf00      	nop
 80030da:	377c      	adds	r7, #124	; 0x7c
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	40011000 	.word	0x40011000
 80030e8:	40011400 	.word	0x40011400
 80030ec:	51eb851f 	.word	0x51eb851f

080030f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030f0:	b084      	sub	sp, #16
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	f107 001c 	add.w	r0, r7, #28
 80030fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	2b01      	cmp	r3, #1
 8003106:	d122      	bne.n	800314e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800311c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003132:	2b01      	cmp	r3, #1
 8003134:	d105      	bne.n	8003142 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f001 fac6 	bl	80046d4 <USB_CoreReset>
 8003148:	4603      	mov	r3, r0
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e01a      	b.n	8003184 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f001 faba 	bl	80046d4 <USB_CoreReset>
 8003160:	4603      	mov	r3, r0
 8003162:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	; 0x38
 8003176:	e005      	b.n	8003184 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003186:	2b01      	cmp	r3, #1
 8003188:	d10b      	bne.n	80031a2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f043 0206 	orr.w	r2, r3, #6
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80031ae:	b004      	add	sp, #16
 80031b0:	4770      	bx	lr
	...

080031b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	4613      	mov	r3, r2
 80031c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d165      	bne.n	8003294 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4a41      	ldr	r2, [pc, #260]	; (80032d0 <USB_SetTurnaroundTime+0x11c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d906      	bls.n	80031de <USB_SetTurnaroundTime+0x2a>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4a40      	ldr	r2, [pc, #256]	; (80032d4 <USB_SetTurnaroundTime+0x120>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d202      	bcs.n	80031de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80031d8:	230f      	movs	r3, #15
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e062      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	4a3c      	ldr	r2, [pc, #240]	; (80032d4 <USB_SetTurnaroundTime+0x120>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d306      	bcc.n	80031f4 <USB_SetTurnaroundTime+0x40>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4a3b      	ldr	r2, [pc, #236]	; (80032d8 <USB_SetTurnaroundTime+0x124>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d202      	bcs.n	80031f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80031ee:	230e      	movs	r3, #14
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e057      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4a38      	ldr	r2, [pc, #224]	; (80032d8 <USB_SetTurnaroundTime+0x124>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d306      	bcc.n	800320a <USB_SetTurnaroundTime+0x56>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4a37      	ldr	r2, [pc, #220]	; (80032dc <USB_SetTurnaroundTime+0x128>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d202      	bcs.n	800320a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003204:	230d      	movs	r3, #13
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e04c      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4a33      	ldr	r2, [pc, #204]	; (80032dc <USB_SetTurnaroundTime+0x128>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d306      	bcc.n	8003220 <USB_SetTurnaroundTime+0x6c>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4a32      	ldr	r2, [pc, #200]	; (80032e0 <USB_SetTurnaroundTime+0x12c>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d802      	bhi.n	8003220 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800321a:	230c      	movs	r3, #12
 800321c:	617b      	str	r3, [r7, #20]
 800321e:	e041      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4a2f      	ldr	r2, [pc, #188]	; (80032e0 <USB_SetTurnaroundTime+0x12c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d906      	bls.n	8003236 <USB_SetTurnaroundTime+0x82>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <USB_SetTurnaroundTime+0x130>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d802      	bhi.n	8003236 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003230:	230b      	movs	r3, #11
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e036      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4a2a      	ldr	r2, [pc, #168]	; (80032e4 <USB_SetTurnaroundTime+0x130>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d906      	bls.n	800324c <USB_SetTurnaroundTime+0x98>
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4a29      	ldr	r2, [pc, #164]	; (80032e8 <USB_SetTurnaroundTime+0x134>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d802      	bhi.n	800324c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003246:	230a      	movs	r3, #10
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e02b      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <USB_SetTurnaroundTime+0x134>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d906      	bls.n	8003262 <USB_SetTurnaroundTime+0xae>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4a25      	ldr	r2, [pc, #148]	; (80032ec <USB_SetTurnaroundTime+0x138>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d202      	bcs.n	8003262 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800325c:	2309      	movs	r3, #9
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	e020      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4a21      	ldr	r2, [pc, #132]	; (80032ec <USB_SetTurnaroundTime+0x138>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d306      	bcc.n	8003278 <USB_SetTurnaroundTime+0xc4>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4a20      	ldr	r2, [pc, #128]	; (80032f0 <USB_SetTurnaroundTime+0x13c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d802      	bhi.n	8003278 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003272:	2308      	movs	r3, #8
 8003274:	617b      	str	r3, [r7, #20]
 8003276:	e015      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <USB_SetTurnaroundTime+0x13c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d906      	bls.n	800328e <USB_SetTurnaroundTime+0xda>
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <USB_SetTurnaroundTime+0x140>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d202      	bcs.n	800328e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003288:	2307      	movs	r3, #7
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	e00a      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800328e:	2306      	movs	r3, #6
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	e007      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d102      	bne.n	80032a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800329a:	2309      	movs	r3, #9
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e001      	b.n	80032a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80032a0:	2309      	movs	r3, #9
 80032a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	029b      	lsls	r3, r3, #10
 80032b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80032bc:	431a      	orrs	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	00d8acbf 	.word	0x00d8acbf
 80032d4:	00e4e1c0 	.word	0x00e4e1c0
 80032d8:	00f42400 	.word	0x00f42400
 80032dc:	01067380 	.word	0x01067380
 80032e0:	011a499f 	.word	0x011a499f
 80032e4:	01312cff 	.word	0x01312cff
 80032e8:	014ca43f 	.word	0x014ca43f
 80032ec:	016e3600 	.word	0x016e3600
 80032f0:	01a6ab1f 	.word	0x01a6ab1f
 80032f4:	01e84800 	.word	0x01e84800

080032f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 0201 	bic.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d106      	bne.n	8003368 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	60da      	str	r2, [r3, #12]
 8003366:	e00b      	b.n	8003380 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e001      	b.n	8003380 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e003      	b.n	8003388 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003380:	2032      	movs	r0, #50	; 0x32
 8003382:	f7fd fb11 	bl	80009a8 <HAL_Delay>

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003390:	b084      	sub	sp, #16
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800339e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	e009      	b.n	80033c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	3340      	adds	r3, #64	; 0x40
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3301      	adds	r3, #1
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b0e      	cmp	r3, #14
 80033c8:	d9f2      	bls.n	80033b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11c      	bne.n	800340a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
 8003408:	e00b      	b.n	8003422 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003428:	461a      	mov	r2, r3
 800342a:	2300      	movs	r3, #0
 800342c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003434:	4619      	mov	r1, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343c:	461a      	mov	r2, r3
 800343e:	680b      	ldr	r3, [r1, #0]
 8003440:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10c      	bne.n	8003462 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d104      	bne.n	8003458 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800344e:	2100      	movs	r1, #0
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f949 	bl	80036e8 <USB_SetDevSpeed>
 8003456:	e008      	b.n	800346a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003458:	2101      	movs	r1, #1
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f944 	bl	80036e8 <USB_SetDevSpeed>
 8003460:	e003      	b.n	800346a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003462:	2103      	movs	r1, #3
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f93f 	bl	80036e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800346a:	2110      	movs	r1, #16
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8f3 	bl	8003658 <USB_FlushTxFifo>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f911 	bl	80036a4 <USB_FlushRxFifo>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003492:	461a      	mov	r2, r3
 8003494:	2300      	movs	r3, #0
 8003496:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349e:	461a      	mov	r2, r3
 80034a0:	2300      	movs	r3, #0
 80034a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034aa:	461a      	mov	r2, r3
 80034ac:	2300      	movs	r3, #0
 80034ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e043      	b.n	800353e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034cc:	d118      	bne.n	8003500 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	461a      	mov	r2, r3
 80034e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e013      	b.n	8003512 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f6:	461a      	mov	r2, r3
 80034f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e008      	b.n	8003512 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4413      	add	r3, r2
 800351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351e:	461a      	mov	r2, r3
 8003520:	2300      	movs	r3, #0
 8003522:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003530:	461a      	mov	r2, r3
 8003532:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003536:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3301      	adds	r3, #1
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	429a      	cmp	r2, r3
 8003544:	d3b7      	bcc.n	80034b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	e043      	b.n	80035d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800355e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003562:	d118      	bne.n	8003596 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4413      	add	r3, r2
 8003572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003576:	461a      	mov	r2, r3
 8003578:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e013      	b.n	80035a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	e008      	b.n	80035a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	015a      	lsls	r2, r3, #5
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4413      	add	r3, r2
 800359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a2:	461a      	mov	r2, r3
 80035a4:	2300      	movs	r3, #0
 80035a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b4:	461a      	mov	r2, r3
 80035b6:	2300      	movs	r3, #0
 80035b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c6:	461a      	mov	r2, r3
 80035c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	3301      	adds	r3, #1
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d3b7      	bcc.n	800354c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80035fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f043 0210 	orr.w	r2, r3, #16
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699a      	ldr	r2, [r3, #24]
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <USB_DevInit+0x2c4>)
 8003616:	4313      	orrs	r3, r2
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f043 0208 	orr.w	r2, r3, #8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d107      	bne.n	8003644 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003644:	7dfb      	ldrb	r3, [r7, #23]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003650:	b004      	add	sp, #16
 8003652:	4770      	bx	lr
 8003654:	803c3800 	.word	0x803c3800

08003658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	019b      	lsls	r3, r3, #6
 800366a:	f043 0220 	orr.w	r2, r3, #32
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3301      	adds	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <USB_FlushTxFifo+0x48>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e006      	b.n	8003692 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	2b20      	cmp	r3, #32
 800368e:	d0f0      	beq.n	8003672 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	00030d40 	.word	0x00030d40

080036a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2210      	movs	r2, #16
 80036b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3301      	adds	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <USB_FlushRxFifo+0x40>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e006      	b.n	80036d6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d0f0      	beq.n	80036b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	00030d40 	.word	0x00030d40

080036e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	68f9      	ldr	r1, [r7, #12]
 8003704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800371a:	b480      	push	{r7}
 800371c:	b087      	sub	sp, #28
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0306 	and.w	r3, r3, #6
 8003732:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]
 800373e:	e00a      	b.n	8003756 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d002      	beq.n	800374c <USB_GetDevSpeed+0x32>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b06      	cmp	r3, #6
 800374a:	d102      	bne.n	8003752 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800374c:	2302      	movs	r3, #2
 800374e:	75fb      	strb	r3, [r7, #23]
 8003750:	e001      	b.n	8003756 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003752:	230f      	movs	r3, #15
 8003754:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d13a      	bne.n	80037f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	b29b      	uxth	r3, r3
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800379e:	4313      	orrs	r3, r2
 80037a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d155      	bne.n	8003864 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	78db      	ldrb	r3, [r3, #3]
 80037d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	059b      	lsls	r3, r3, #22
 80037da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80037dc:	4313      	orrs	r3, r2
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	0151      	lsls	r1, r2, #5
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	440a      	add	r2, r1
 80037e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e036      	b.n	8003864 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fc:	69da      	ldr	r2, [r3, #28]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	f003 030f 	and.w	r3, r3, #15
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	041b      	lsls	r3, r3, #16
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11a      	bne.n	8003864 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800384a:	430b      	orrs	r3, r1
 800384c:	4313      	orrs	r3, r2
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	440a      	add	r2, r1
 8003856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	785b      	ldrb	r3, [r3, #1]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d161      	bne.n	8003954 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038a6:	d11f      	bne.n	80038e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	0151      	lsls	r1, r2, #5
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	440a      	add	r2, r1
 80038be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	b29b      	uxth	r3, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	68f9      	ldr	r1, [r7, #12]
 8003904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003908:	4013      	ands	r3, r2
 800390a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	2101      	movs	r1, #1
 800391e:	fa01 f303 	lsl.w	r3, r1, r3
 8003922:	b29b      	uxth	r3, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	68f9      	ldr	r1, [r7, #12]
 8003928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800392c:	4013      	ands	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	015a      	lsls	r2, r3, #5
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	440b      	add	r3, r1
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	4619      	mov	r1, r3
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <USB_DeactivateEndpoint+0x1b0>)
 800394e:	4013      	ands	r3, r2
 8003950:	600b      	str	r3, [r1, #0]
 8003952:	e060      	b.n	8003a16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800396a:	d11f      	bne.n	80039ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	0151      	lsls	r1, r2, #5
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	440a      	add	r2, r1
 8003982:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003986:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800398a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	0151      	lsls	r1, r2, #5
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	440a      	add	r2, r1
 80039a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	2101      	movs	r1, #1
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	041b      	lsls	r3, r3, #16
 80039c4:	43db      	mvns	r3, r3
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039cc:	4013      	ands	r3, r2
 80039ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d6:	69da      	ldr	r2, [r3, #28]
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	43db      	mvns	r3, r3
 80039ea:	68f9      	ldr	r1, [r7, #12]
 80039ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039f0:	4013      	ands	r3, r2
 80039f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	0159      	lsls	r1, r3, #5
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	440b      	add	r3, r1
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <USB_DeactivateEndpoint+0x1b4>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	ec337800 	.word	0xec337800
 8003a28:	eff37800 	.word	0xeff37800

08003a2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	; 0x28
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 815c 	bne.w	8003d06 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d132      	bne.n	8003abc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	0151      	lsls	r1, r2, #5
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	440a      	add	r2, r1
 8003a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	0151      	lsls	r1, r2, #5
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	440a      	add	r2, r1
 8003a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	69fa      	ldr	r2, [r7, #28]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab4:	0cdb      	lsrs	r3, r3, #19
 8003ab6:	04db      	lsls	r3, r3, #19
 8003ab8:	6113      	str	r3, [r2, #16]
 8003aba:	e074      	b.n	8003ba6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad6:	0cdb      	lsrs	r3, r3, #19
 8003ad8:	04db      	lsls	r3, r3, #19
 8003ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003afa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003afe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6959      	ldr	r1, [r3, #20]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	440b      	add	r3, r1
 8003b18:	1e59      	subs	r1, r3, #1
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b22:	04d9      	lsls	r1, r3, #19
 8003b24:	4b9d      	ldr	r3, [pc, #628]	; (8003d9c <USB_EPStartXfer+0x370>)
 8003b26:	400b      	ands	r3, r1
 8003b28:	69b9      	ldr	r1, [r7, #24]
 8003b2a:	0148      	lsls	r0, r1, #5
 8003b2c:	69f9      	ldr	r1, [r7, #28]
 8003b2e:	4401      	add	r1, r0
 8003b30:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b34:	4313      	orrs	r3, r2
 8003b36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	0148      	lsls	r0, r1, #5
 8003b52:	69f9      	ldr	r1, [r7, #28]
 8003b54:	4401      	add	r1, r0
 8003b56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	78db      	ldrb	r3, [r3, #3]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d11f      	bne.n	8003ba6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b80:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b84:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	0151      	lsls	r1, r2, #5
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	440a      	add	r2, r1
 8003b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ba4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d14b      	bne.n	8003c44 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	78db      	ldrb	r3, [r3, #3]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d128      	bne.n	8003c22 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d110      	bne.n	8003c02 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	0151      	lsls	r1, r2, #5
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	e00f      	b.n	8003c22 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e12f      	b.n	8003ea4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c62:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	78db      	ldrb	r3, [r3, #3]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d015      	beq.n	8003c98 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8117 	beq.w	8003ea4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	2101      	movs	r1, #1
 8003c88:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8c:	69f9      	ldr	r1, [r7, #28]
 8003c8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c92:	4313      	orrs	r3, r2
 8003c94:	634b      	str	r3, [r1, #52]	; 0x34
 8003c96:	e105      	b.n	8003ea4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d110      	bne.n	8003cca <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	e00f      	b.n	8003cea <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	0151      	lsls	r1, r2, #5
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	440a      	add	r2, r1
 8003ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	68d9      	ldr	r1, [r3, #12]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	b298      	uxth	r0, r3
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fa2b 	bl	800415a <USB_WritePacket>
 8003d04:	e0ce      	b.n	8003ea4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d20:	0cdb      	lsrs	r3, r3, #19
 8003d22:	04db      	lsls	r3, r3, #19
 8003d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	69fa      	ldr	r2, [r7, #28]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d126      	bne.n	8003da0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d68:	69b9      	ldr	r1, [r7, #24]
 8003d6a:	0148      	lsls	r0, r1, #5
 8003d6c:	69f9      	ldr	r1, [r7, #28]
 8003d6e:	4401      	add	r1, r0
 8003d70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d74:	4313      	orrs	r3, r2
 8003d76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	0151      	lsls	r1, r2, #5
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	440a      	add	r2, r1
 8003d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d96:	6113      	str	r3, [r2, #16]
 8003d98:	e036      	b.n	8003e08 <USB_EPStartXfer+0x3dc>
 8003d9a:	bf00      	nop
 8003d9c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	695a      	ldr	r2, [r3, #20]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	1e5a      	subs	r2, r3, #1
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	8afb      	ldrh	r3, [r7, #22]
 8003dc6:	04d9      	lsls	r1, r3, #19
 8003dc8:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <USB_EPStartXfer+0x484>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	0148      	lsls	r0, r1, #5
 8003dd0:	69f9      	ldr	r1, [r7, #28]
 8003dd2:	4401      	add	r1, r0
 8003dd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	8af9      	ldrh	r1, [r7, #22]
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	0148      	lsls	r0, r1, #5
 8003dfc:	69f9      	ldr	r1, [r7, #28]
 8003dfe:	4401      	add	r1, r0
 8003e00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e04:	4313      	orrs	r3, r2
 8003e06:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d10d      	bne.n	8003e2a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	68d9      	ldr	r1, [r3, #12]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e26:	460a      	mov	r2, r1
 8003e28:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	78db      	ldrb	r3, [r3, #3]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d128      	bne.n	8003e84 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d110      	bne.n	8003e64 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	e00f      	b.n	8003e84 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e82:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ea2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	1ff80000 	.word	0x1ff80000

08003eb4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	f040 80cd 	bne.w	8004070 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d132      	bne.n	8003f44 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	0151      	lsls	r1, r2, #5
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003efc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	0151      	lsls	r1, r2, #5
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	440a      	add	r2, r1
 8003f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	0151      	lsls	r1, r2, #5
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	440a      	add	r2, r1
 8003f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3c:	0cdb      	lsrs	r3, r3, #19
 8003f3e:	04db      	lsls	r3, r3, #19
 8003f40:	6113      	str	r3, [r2, #16]
 8003f42:	e04e      	b.n	8003fe2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5e:	0cdb      	lsrs	r3, r3, #19
 8003f60:	04db      	lsls	r3, r3, #19
 8003f62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f86:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d903      	bls.n	8003f9c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	0151      	lsls	r1, r2, #5
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	440a      	add	r2, r1
 8003fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd2:	6939      	ldr	r1, [r7, #16]
 8003fd4:	0148      	lsls	r0, r1, #5
 8003fd6:	6979      	ldr	r1, [r7, #20]
 8003fd8:	4401      	add	r1, r0
 8003fda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d11e      	bne.n	8004026 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e092      	b.n	800414c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	440a      	add	r2, r1
 800403c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004040:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004044:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d07e      	beq.n	800414c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004054:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	2101      	movs	r1, #1
 8004060:	fa01 f303 	lsl.w	r3, r1, r3
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800406a:	4313      	orrs	r3, r2
 800406c:	634b      	str	r3, [r1, #52]	; 0x34
 800406e:	e06d      	b.n	800414c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	440a      	add	r2, r1
 8004086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408a:	0cdb      	lsrs	r3, r3, #19
 800408c:	04db      	lsls	r3, r3, #19
 800408e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	0151      	lsls	r1, r2, #5
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	440a      	add	r2, r1
 80040a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fa:	6939      	ldr	r1, [r7, #16]
 80040fc:	0148      	lsls	r0, r1, #5
 80040fe:	6979      	ldr	r1, [r7, #20]
 8004100:	4401      	add	r1, r0
 8004102:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10d      	bne.n	800412c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	68d9      	ldr	r1, [r3, #12]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	460a      	mov	r2, r1
 800412a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004146:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800414a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800415a:	b480      	push	{r7}
 800415c:	b089      	sub	sp, #36	; 0x24
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	4611      	mov	r1, r2
 8004166:	461a      	mov	r2, r3
 8004168:	460b      	mov	r3, r1
 800416a:	71fb      	strb	r3, [r7, #7]
 800416c:	4613      	mov	r3, r2
 800416e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004178:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
 800417e:	d11a      	bne.n	80041b6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004180:	88bb      	ldrh	r3, [r7, #4]
 8004182:	3303      	adds	r3, #3
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004188:	2300      	movs	r3, #0
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e00f      	b.n	80041ae <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	031a      	lsls	r2, r3, #12
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	461a      	mov	r2, r3
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3304      	adds	r3, #4
 80041a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	3301      	adds	r3, #1
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d3eb      	bcc.n	800418e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3724      	adds	r7, #36	; 0x24
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	3303      	adds	r3, #3
 80041de:	089b      	lsrs	r3, r3, #2
 80041e0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	e00b      	b.n	8004200 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3304      	adds	r3, #4
 80041f8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	3301      	adds	r3, #1
 80041fe:	61bb      	str	r3, [r7, #24]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	429a      	cmp	r2, r3
 8004206:	d3ef      	bcc.n	80041e8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004208:	69fb      	ldr	r3, [r7, #28]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3724      	adds	r7, #36	; 0x24
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	785b      	ldrb	r3, [r3, #1]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d12c      	bne.n	800428c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db12      	blt.n	800426a <USB_EPSetStall+0x54>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00f      	beq.n	800426a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	0151      	lsls	r1, r2, #5
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	440a      	add	r2, r1
 8004260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004264:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004268:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	015a      	lsls	r2, r3, #5
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	0151      	lsls	r1, r2, #5
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	440a      	add	r2, r1
 8004280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	e02b      	b.n	80042e4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	db12      	blt.n	80042c4 <USB_EPSetStall+0xae>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00f      	beq.n	80042c4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	0151      	lsls	r1, r2, #5
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	440a      	add	r2, r1
 80042ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042c2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	0151      	lsls	r1, r2, #5
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	440a      	add	r2, r1
 80042da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	785b      	ldrb	r3, [r3, #1]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d128      	bne.n	8004360 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	0151      	lsls	r1, r2, #5
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	440a      	add	r2, r1
 8004324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800432c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	78db      	ldrb	r3, [r3, #3]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d003      	beq.n	800433e <USB_EPClearStall+0x4c>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d138      	bne.n	80043b0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e027      	b.n	80043b0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	0151      	lsls	r1, r2, #5
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	440a      	add	r2, r1
 8004376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800437e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	2b03      	cmp	r3, #3
 8004386:	d003      	beq.n	8004390 <USB_EPClearStall+0x9e>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	78db      	ldrb	r3, [r3, #3]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d10f      	bne.n	80043b0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	0151      	lsls	r1, r2, #5
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	440a      	add	r2, r1
 80043a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
 80043c6:	460b      	mov	r3, r1
 80043c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043e0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80043f2:	68f9      	ldr	r1, [r7, #12]
 80043f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800440a:	b480      	push	{r7}
 800440c:	b085      	sub	sp, #20
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004424:	f023 0303 	bic.w	r3, r3, #3
 8004428:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004438:	f023 0302 	bic.w	r3, r3, #2
 800443c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004466:	f023 0303 	bic.w	r3, r3, #3
 800446a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4013      	ands	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80044a6:	68fb      	ldr	r3, [r7, #12]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	0c1b      	lsrs	r3, r3, #16
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4013      	ands	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	b29b      	uxth	r3, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800454a:	68bb      	ldr	r3, [r7, #8]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800457a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	f003 030f 	and.w	r3, r3, #15
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	fa22 f303 	lsr.w	r3, r2, r3
 8004588:	01db      	lsls	r3, r3, #7
 800458a:	b2db      	uxtb	r3, r3
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4013      	ands	r3, r2
 80045a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045a6:	68bb      	ldr	r3, [r7, #8]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0301 	and.w	r3, r3, #1
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045ee:	f023 0307 	bic.w	r3, r3, #7
 80045f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	460b      	mov	r3, r1
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	333c      	adds	r3, #60	; 0x3c
 800462e:	3304      	adds	r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4a26      	ldr	r2, [pc, #152]	; (80046d0 <USB_EP0_OutStart+0xb8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d90a      	bls.n	8004652 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800464c:	d101      	bne.n	8004652 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e037      	b.n	80046c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004680:	f043 0318 	orr.w	r3, r3, #24
 8004684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004694:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004698:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800469a:	7afb      	ldrb	r3, [r7, #11]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10f      	bne.n	80046c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80046be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	4f54300a 	.word	0x4f54300a

080046d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <USB_CoreReset+0x64>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e01b      	b.n	800472a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	daf2      	bge.n	80046e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <USB_CoreReset+0x64>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e006      	b.n	800472a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d0f0      	beq.n	800470a <USB_CoreReset+0x36>

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	00030d40 	.word	0x00030d40

0800473c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8004748:	2018      	movs	r0, #24
 800474a:	f002 f819 	bl	8006780 <USBD_static_malloc>
 800474e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800475e:	2302      	movs	r3, #2
 8004760:	e038      	b.n	80047d4 <USBD_CUSTOM_HID_Init+0x98>
  }

  pdev->pClassData = (void *)hhid;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7c1b      	ldrb	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d107      	bne.n	8004782 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2205      	movs	r2, #5
 8004776:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2205      	movs	r2, #5
 800477c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8004780:	e006      	b.n	8004790 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2205      	movs	r2, #5
 8004786:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2205      	movs	r2, #5
 800478c:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004790:	2302      	movs	r3, #2
 8004792:	2203      	movs	r2, #3
 8004794:	2181      	movs	r1, #129	; 0x81
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 fee1 	bl	800655e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80047a2:	2302      	movs	r3, #2
 80047a4:	2203      	movs	r2, #3
 80047a6:	2101      	movs	r1, #1
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 fed8 	bl	800655e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	751a      	strb	r2, [r3, #20]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	2302      	movs	r3, #2
 80047ca:	2101      	movs	r1, #1
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 ffb5 	bl	800673c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80047e8:	2181      	movs	r1, #129	; 0x81
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 fedd 	bl	80065aa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80047fc:	2101      	movs	r1, #1
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fed3 	bl	80065aa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00e      	beq.n	800483c <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800482e:	4618      	mov	r0, r3
 8004830:	f001 ffb4 	bl	800679c <USBD_static_free>
    pdev->pClassData = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
	...

08004848 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004858:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004870:	2303      	movs	r3, #3
 8004872:	e0ed      	b.n	8004a50 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800487c:	2b00      	cmp	r3, #0
 800487e:	d052      	beq.n	8004926 <USBD_CUSTOM_HID_Setup+0xde>
 8004880:	2b20      	cmp	r3, #32
 8004882:	f040 80dd 	bne.w	8004a40 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	3b02      	subs	r3, #2
 800488c:	2b09      	cmp	r3, #9
 800488e:	d842      	bhi.n	8004916 <USBD_CUSTOM_HID_Setup+0xce>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <USBD_CUSTOM_HID_Setup+0x50>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048f1 	.word	0x080048f1
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	08004917 	.word	0x08004917
 80048a4:	08004917 	.word	0x08004917
 80048a8:	08004917 	.word	0x08004917
 80048ac:	08004917 	.word	0x08004917
 80048b0:	08004917 	.word	0x08004917
 80048b4:	08004901 	.word	0x08004901
 80048b8:	080048df 	.word	0x080048df
 80048bc:	080048c1 	.word	0x080048c1
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	885b      	ldrh	r3, [r3, #2]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	605a      	str	r2, [r3, #4]
          break;
 80048cc:	e02a      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3304      	adds	r3, #4
 80048d2:	2201      	movs	r2, #1
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f001 fa9b 	bl	8005e12 <USBD_CtlSendData>
          break;
 80048dc:	e022      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	885b      	ldrh	r3, [r3, #2]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	609a      	str	r2, [r3, #8]
          break;
 80048ee:	e019      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3308      	adds	r3, #8
 80048f4:	2201      	movs	r2, #1
 80048f6:	4619      	mov	r1, r3
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 fa8a 	bl	8005e12 <USBD_CtlSendData>
          break;
 80048fe:	e011      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2201      	movs	r2, #1
 8004904:	611a      	str	r2, [r3, #16]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8004906:	6939      	ldr	r1, [r7, #16]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	88db      	ldrh	r3, [r3, #6]
 800490c:	461a      	mov	r2, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 faab 	bl	8005e6a <USBD_CtlPrepareRx>
          break;
 8004914:	e006      	b.n	8004924 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f001 fa09 	bl	8005d30 <USBD_CtlError>
          ret = USBD_FAIL;
 800491e:	2303      	movs	r3, #3
 8004920:	75fb      	strb	r3, [r7, #23]
          break;
 8004922:	bf00      	nop
      }
      break;
 8004924:	e093      	b.n	8004a4e <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	785b      	ldrb	r3, [r3, #1]
 800492a:	2b0b      	cmp	r3, #11
 800492c:	d87f      	bhi.n	8004a2e <USBD_CUSTOM_HID_Setup+0x1e6>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <USBD_CUSTOM_HID_Setup+0xec>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004965 	.word	0x08004965
 8004938:	08004a3d 	.word	0x08004a3d
 800493c:	08004a2f 	.word	0x08004a2f
 8004940:	08004a2f 	.word	0x08004a2f
 8004944:	08004a2f 	.word	0x08004a2f
 8004948:	08004a2f 	.word	0x08004a2f
 800494c:	0800498f 	.word	0x0800498f
 8004950:	08004a2f 	.word	0x08004a2f
 8004954:	08004a2f 	.word	0x08004a2f
 8004958:	08004a2f 	.word	0x08004a2f
 800495c:	080049dd 	.word	0x080049dd
 8004960:	08004a07 	.word	0x08004a07
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b03      	cmp	r3, #3
 800496e:	d107      	bne.n	8004980 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004970:	f107 030e 	add.w	r3, r7, #14
 8004974:	2202      	movs	r2, #2
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fa4a 	bl	8005e12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800497e:	e05e      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 f9d4 	bl	8005d30 <USBD_CtlError>
            ret = USBD_FAIL;
 8004988:	2303      	movs	r3, #3
 800498a:	75fb      	strb	r3, [r7, #23]
          break;
 800498c:	e057      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	885b      	ldrh	r3, [r3, #2]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b22      	cmp	r3, #34	; 0x22
 8004998:	d10b      	bne.n	80049b2 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	88db      	ldrh	r3, [r3, #6]
 800499e:	2b21      	cmp	r3, #33	; 0x21
 80049a0:	bf28      	it	cs
 80049a2:	2321      	movcs	r3, #33	; 0x21
 80049a4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
 80049b0:	e00d      	b.n	80049ce <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	885b      	ldrh	r3, [r3, #2]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b21      	cmp	r3, #33	; 0x21
 80049bc:	d107      	bne.n	80049ce <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80049be:	4b26      	ldr	r3, [pc, #152]	; (8004a58 <USBD_CUSTOM_HID_Setup+0x210>)
 80049c0:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	88db      	ldrh	r3, [r3, #6]
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	bf28      	it	cs
 80049ca:	2309      	movcs	r3, #9
 80049cc:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80049ce:	8bfb      	ldrh	r3, [r7, #30]
 80049d0:	461a      	mov	r2, r3
 80049d2:	69b9      	ldr	r1, [r7, #24]
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f001 fa1c 	bl	8005e12 <USBD_CtlSendData>
          break;
 80049da:	e030      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	d107      	bne.n	80049f8 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	330c      	adds	r3, #12
 80049ec:	2201      	movs	r2, #1
 80049ee:	4619      	mov	r1, r3
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f001 fa0e 	bl	8005e12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049f6:	e022      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f001 f998 	bl	8005d30 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a00:	2303      	movs	r3, #3
 8004a02:	75fb      	strb	r3, [r7, #23]
          break;
 8004a04:	e01b      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d106      	bne.n	8004a20 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	885b      	ldrh	r3, [r3, #2]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a1e:	e00e      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 f984 	bl	8005d30 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	75fb      	strb	r3, [r7, #23]
          break;
 8004a2c:	e007      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 f97d 	bl	8005d30 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a36:	2303      	movs	r3, #3
 8004a38:	75fb      	strb	r3, [r7, #23]
          break;
 8004a3a:	e000      	b.n	8004a3e <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8004a3c:	bf00      	nop
      }
      break;
 8004a3e:	e006      	b.n	8004a4e <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8004a40:	6839      	ldr	r1, [r7, #0]
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f974 	bl	8005d30 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a4c:	bf00      	nop
  }
  return (uint8_t)ret;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	200000c8 	.word	0x200000c8

08004a5c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e01a      	b.n	8004aae <USBD_CUSTOM_HID_SendReport+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a7e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d10f      	bne.n	8004aac <USBD_CUSTOM_HID_SendReport+0x50>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	7d1b      	ldrb	r3, [r3, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d109      	bne.n	8004aa8 <USBD_CUSTOM_HID_SendReport+0x4c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2201      	movs	r2, #1
 8004a98:	751a      	strb	r2, [r3, #20]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	2181      	movs	r1, #129	; 0x81
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f001 fe2a 	bl	80066fa <USBD_LL_Transmit>
 8004aa6:	e001      	b.n	8004aac <USBD_CUSTOM_HID_SendReport+0x50>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <USBD_CUSTOM_HID_SendReport+0x52>
    }
  }
  return (uint8_t)USBD_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2229      	movs	r2, #41	; 0x29
 8004ac4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8004ac6:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000044 	.word	0x20000044

08004ad8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2229      	movs	r2, #41	; 0x29
 8004ae4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8004ae6:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	20000070 	.word	0x20000070

08004af8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2229      	movs	r2, #41	; 0x29
 8004b04:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8004b06:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	2000009c 	.word	0x2000009c

08004b18 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	751a      	strb	r2, [r3, #20]

  return (uint8_t)USBD_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e00e      	b.n	8004b74 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	7810      	ldrb	r0, [r2, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	7852      	ldrb	r2, [r2, #1]
 8004b6e:	4611      	mov	r1, r2
 8004b70:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e00a      	b.n	8004ba8 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 fdcb 	bl	800673c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bbe:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e011      	b.n	8004bee <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d10c      	bne.n	8004bec <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	7810      	ldrb	r0, [r2, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	7852      	ldrb	r2, [r2, #1]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	611a      	str	r2, [r3, #16]
  }

  return (uint8_t)USBD_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	220a      	movs	r2, #10
 8004c04:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8004c06:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	200000d4 	.word	0x200000d4

08004c18 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e004      	b.n	8004c36 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	60b9      	str	r1, [r7, #8]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e01f      	b.n	8004c9a <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	79fa      	ldrb	r2, [r7, #7]
 8004c8c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f001 fbfe 	bl	8006490 <USBD_LL_Init>
 8004c94:	4603      	mov	r3, r0
 8004c96:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e016      	b.n	8004ce8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f107 020e 	add.w	r2, r7, #14
 8004cda:	4610      	mov	r0, r2
 8004cdc:	4798      	blx	r3
 8004cde:	4602      	mov	r2, r0
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 fc15 	bl	8006528 <USBD_LL_Start>
 8004cfe:	4603      	mov	r3, r0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d009      	beq.n	8004d4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	4611      	mov	r1, r2
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
 8004d48:	4603      	mov	r3, r0
 8004d4a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b082      	sub	sp, #8
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d007      	beq.n	8004d7c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	78fa      	ldrb	r2, [r7, #3]
 8004d76:	4611      	mov	r1, r2
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
  }

  return USBD_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004d96:	6839      	ldr	r1, [r7, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 ff8f 	bl	8005cbc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d01a      	beq.n	8004df8 <USBD_LL_SetupStage+0x72>
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d822      	bhi.n	8004e0c <USBD_LL_SetupStage+0x86>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <USBD_LL_SetupStage+0x4a>
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d00a      	beq.n	8004de4 <USBD_LL_SetupStage+0x5e>
 8004dce:	e01d      	b.n	8004e0c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fa61 	bl	80052a0 <USBD_StdDevReq>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
      break;
 8004de2:	e020      	b.n	8004e26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dea:	4619      	mov	r1, r3
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fac5 	bl	800537c <USBD_StdItfReq>
 8004df2:	4603      	mov	r3, r0
 8004df4:	73fb      	strb	r3, [r7, #15]
      break;
 8004df6:	e016      	b.n	8004e26 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fb04 	bl	800540e <USBD_StdEPReq>
 8004e06:	4603      	mov	r3, r0
 8004e08:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0a:	e00c      	b.n	8004e26 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 fbe4 	bl	80065e8 <USBD_LL_StallEP>
 8004e20:	4603      	mov	r3, r0
 8004e22:	73fb      	strb	r3, [r7, #15]
      break;
 8004e24:	bf00      	nop
  }

  return ret;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d138      	bne.n	8004eb6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004e4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d14a      	bne.n	8004eec <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d913      	bls.n	8004e8a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bf28      	it	cs
 8004e7c:	4613      	movcs	r3, r2
 8004e7e:	461a      	mov	r2, r3
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f001 f80e 	bl	8005ea4 <USBD_CtlContinueRx>
 8004e88:	e030      	b.n	8004eec <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d10b      	bne.n	8004eae <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f001 f809 	bl	8005ec6 <USBD_CtlSendStatus>
 8004eb4:	e01a      	b.n	8004eec <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d114      	bne.n	8004eec <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	7afa      	ldrb	r2, [r7, #11]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	4798      	blx	r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004ee2:	7dfb      	ldrb	r3, [r7, #23]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	e000      	b.n	8004eee <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3718      	adds	r7, #24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b086      	sub	sp, #24
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	460b      	mov	r3, r1
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f04:	7afb      	ldrb	r3, [r7, #11]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d16b      	bne.n	8004fe2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d156      	bne.n	8004fc8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	689a      	ldr	r2, [r3, #8]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d914      	bls.n	8004f50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	689a      	ldr	r2, [r3, #8]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	1ad2      	subs	r2, r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 ff83 	bl	8005e48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f42:	2300      	movs	r3, #0
 8004f44:	2200      	movs	r2, #0
 8004f46:	2100      	movs	r1, #0
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f001 fbf7 	bl	800673c <USBD_LL_PrepareReceive>
 8004f4e:	e03b      	b.n	8004fc8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d11c      	bne.n	8004f96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d316      	bcc.n	8004f96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d20f      	bcs.n	8004f96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 ff64 	bl	8005e48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f001 fbd4 	bl	800673c <USBD_LL_PrepareReceive>
 8004f94:	e018      	b.n	8004fc8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d10b      	bne.n	8004fba <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d005      	beq.n	8004fba <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004fba:	2180      	movs	r1, #128	; 0x80
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f001 fb13 	bl	80065e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 ff92 	bl	8005eec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d122      	bne.n	8005018 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff fe98 	bl	8004d08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004fe0:	e01a      	b.n	8005018 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d114      	bne.n	8005018 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	7afa      	ldrb	r2, [r7, #11]
 8005004:	4611      	mov	r1, r2
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	4798      	blx	r3
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	e000      	b.n	800501a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005052:	2303      	movs	r3, #3
 8005054:	e02f      	b.n	80050b6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00f      	beq.n	8005080 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6852      	ldr	r2, [r2, #4]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	4611      	mov	r1, r2
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005080:	2340      	movs	r3, #64	; 0x40
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f001 fa69 	bl	800655e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2240      	movs	r2, #64	; 0x40
 8005098:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800509c:	2340      	movs	r3, #64	; 0x40
 800509e:	2200      	movs	r2, #0
 80050a0:	2180      	movs	r1, #128	; 0x80
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 fa5b 	bl	800655e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2240      	movs	r2, #64	; 0x40
 80050b2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050ec:	b2da      	uxtb	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2204      	movs	r2, #4
 80050f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b04      	cmp	r3, #4
 800511c:	d106      	bne.n	800512c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b082      	sub	sp, #8
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800514c:	2303      	movs	r3, #3
 800514e:	e012      	b.n	8005176 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b03      	cmp	r3, #3
 800515a:	d10b      	bne.n	8005174 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	460b      	mov	r3, r1
 8005188:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005194:	2303      	movs	r3, #3
 8005196:	e014      	b.n	80051c2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d10d      	bne.n	80051c0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	78fa      	ldrb	r2, [r7, #3]
 80051ba:	4611      	mov	r1, r2
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b082      	sub	sp, #8
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e014      	b.n	800520e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10d      	bne.n	800520c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d007      	beq.n	800520c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	78fa      	ldrb	r2, [r7, #3]
 8005206:	4611      	mov	r1, r2
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6852      	ldr	r2, [r2, #4]
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	4611      	mov	r1, r2
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	4798      	blx	r3
  }

  return USBD_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	3301      	adds	r3, #1
 800527a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005282:	8a3b      	ldrh	r3, [r7, #16]
 8005284:	021b      	lsls	r3, r3, #8
 8005286:	b21a      	sxth	r2, r3
 8005288:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800528c:	4313      	orrs	r3, r2
 800528e:	b21b      	sxth	r3, r3
 8005290:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005292:	89fb      	ldrh	r3, [r7, #14]
}
 8005294:	4618      	mov	r0, r3
 8005296:	371c      	adds	r7, #28
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d005      	beq.n	80052c6 <USBD_StdDevReq+0x26>
 80052ba:	2b40      	cmp	r3, #64	; 0x40
 80052bc:	d853      	bhi.n	8005366 <USBD_StdDevReq+0xc6>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <USBD_StdDevReq+0x3a>
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d14f      	bne.n	8005366 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	6839      	ldr	r1, [r7, #0]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
 80052d4:	4603      	mov	r3, r0
 80052d6:	73fb      	strb	r3, [r7, #15]
      break;
 80052d8:	e04a      	b.n	8005370 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	785b      	ldrb	r3, [r3, #1]
 80052de:	2b09      	cmp	r3, #9
 80052e0:	d83b      	bhi.n	800535a <USBD_StdDevReq+0xba>
 80052e2:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <USBD_StdDevReq+0x48>)
 80052e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	08005351 	.word	0x08005351
 80052f0:	0800535b 	.word	0x0800535b
 80052f4:	08005347 	.word	0x08005347
 80052f8:	0800535b 	.word	0x0800535b
 80052fc:	0800531b 	.word	0x0800531b
 8005300:	08005311 	.word	0x08005311
 8005304:	0800535b 	.word	0x0800535b
 8005308:	08005333 	.word	0x08005333
 800530c:	08005325 	.word	0x08005325
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9de 	bl	80056d4 <USBD_GetDescriptor>
          break;
 8005318:	e024      	b.n	8005364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fb43 	bl	80059a8 <USBD_SetAddress>
          break;
 8005322:	e01f      	b.n	8005364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fb82 	bl	8005a30 <USBD_SetConfig>
 800532c:	4603      	mov	r3, r0
 800532e:	73fb      	strb	r3, [r7, #15]
          break;
 8005330:	e018      	b.n	8005364 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005332:	6839      	ldr	r1, [r7, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fc21 	bl	8005b7c <USBD_GetConfig>
          break;
 800533a:	e013      	b.n	8005364 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 fc52 	bl	8005be8 <USBD_GetStatus>
          break;
 8005344:	e00e      	b.n	8005364 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005346:	6839      	ldr	r1, [r7, #0]
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fc81 	bl	8005c50 <USBD_SetFeature>
          break;
 800534e:	e009      	b.n	8005364 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005350:	6839      	ldr	r1, [r7, #0]
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fc90 	bl	8005c78 <USBD_ClrFeature>
          break;
 8005358:	e004      	b.n	8005364 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fce7 	bl	8005d30 <USBD_CtlError>
          break;
 8005362:	bf00      	nop
      }
      break;
 8005364:	e004      	b.n	8005370 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005366:	6839      	ldr	r1, [r7, #0]
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fce1 	bl	8005d30 <USBD_CtlError>
      break;
 800536e:	bf00      	nop
  }

  return ret;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop

0800537c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d005      	beq.n	80053a2 <USBD_StdItfReq+0x26>
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d82f      	bhi.n	80053fa <USBD_StdItfReq+0x7e>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <USBD_StdItfReq+0x26>
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d12b      	bne.n	80053fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d81d      	bhi.n	80053ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	889b      	ldrh	r3, [r3, #4]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d813      	bhi.n	80053e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	4798      	blx	r3
 80053c8:	4603      	mov	r3, r0
 80053ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	88db      	ldrh	r3, [r3, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d110      	bne.n	80053f6 <USBD_StdItfReq+0x7a>
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10d      	bne.n	80053f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fd73 	bl	8005ec6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053e0:	e009      	b.n	80053f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fca3 	bl	8005d30 <USBD_CtlError>
          break;
 80053ea:	e004      	b.n	80053f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fc9e 	bl	8005d30 <USBD_CtlError>
          break;
 80053f4:	e000      	b.n	80053f8 <USBD_StdItfReq+0x7c>
          break;
 80053f6:	bf00      	nop
      }
      break;
 80053f8:	e004      	b.n	8005404 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fc97 	bl	8005d30 <USBD_CtlError>
      break;
 8005402:	bf00      	nop
  }

  return ret;
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}

0800540e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b084      	sub	sp, #16
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	889b      	ldrh	r3, [r3, #4]
 8005420:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d007      	beq.n	800543e <USBD_StdEPReq+0x30>
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	f200 8145 	bhi.w	80056be <USBD_StdEPReq+0x2b0>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <USBD_StdEPReq+0x44>
 8005438:	2b20      	cmp	r3, #32
 800543a:	f040 8140 	bne.w	80056be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	6839      	ldr	r1, [r7, #0]
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
      break;
 8005450:	e13a      	b.n	80056c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	2b03      	cmp	r3, #3
 8005458:	d007      	beq.n	800546a <USBD_StdEPReq+0x5c>
 800545a:	2b03      	cmp	r3, #3
 800545c:	f300 8129 	bgt.w	80056b2 <USBD_StdEPReq+0x2a4>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d07f      	beq.n	8005564 <USBD_StdEPReq+0x156>
 8005464:	2b01      	cmp	r3, #1
 8005466:	d03c      	beq.n	80054e2 <USBD_StdEPReq+0xd4>
 8005468:	e123      	b.n	80056b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d002      	beq.n	800547c <USBD_StdEPReq+0x6e>
 8005476:	2b03      	cmp	r3, #3
 8005478:	d016      	beq.n	80054a8 <USBD_StdEPReq+0x9a>
 800547a:	e02c      	b.n	80054d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <USBD_StdEPReq+0x90>
 8005482:	7bbb      	ldrb	r3, [r7, #14]
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d00a      	beq.n	800549e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 f8ab 	bl	80065e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 f8a7 	bl	80065e8 <USBD_LL_StallEP>
 800549a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800549c:	e020      	b.n	80054e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800549e:	6839      	ldr	r1, [r7, #0]
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fc45 	bl	8005d30 <USBD_CtlError>
              break;
 80054a6:	e01b      	b.n	80054e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	885b      	ldrh	r3, [r3, #2]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10e      	bne.n	80054ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <USBD_StdEPReq+0xc0>
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	2b80      	cmp	r3, #128	; 0x80
 80054ba:	d008      	beq.n	80054ce <USBD_StdEPReq+0xc0>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	88db      	ldrh	r3, [r3, #6]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 f88d 	bl	80065e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 fcf9 	bl	8005ec6 <USBD_CtlSendStatus>

              break;
 80054d4:	e004      	b.n	80054e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fc29 	bl	8005d30 <USBD_CtlError>
              break;
 80054de:	bf00      	nop
          }
          break;
 80054e0:	e0ec      	b.n	80056bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d002      	beq.n	80054f4 <USBD_StdEPReq+0xe6>
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d016      	beq.n	8005520 <USBD_StdEPReq+0x112>
 80054f2:	e030      	b.n	8005556 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054f4:	7bbb      	ldrb	r3, [r7, #14]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <USBD_StdEPReq+0x108>
 80054fa:	7bbb      	ldrb	r3, [r7, #14]
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d00a      	beq.n	8005516 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f86f 	bl	80065e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800550a:	2180      	movs	r1, #128	; 0x80
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f86b 	bl	80065e8 <USBD_LL_StallEP>
 8005512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005514:	e025      	b.n	8005562 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fc09 	bl	8005d30 <USBD_CtlError>
              break;
 800551e:	e020      	b.n	8005562 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	885b      	ldrh	r3, [r3, #2]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d11b      	bne.n	8005560 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f001 f875 	bl	8006626 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fcc2 	bl	8005ec6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	4798      	blx	r3
 8005550:	4603      	mov	r3, r0
 8005552:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005554:	e004      	b.n	8005560 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fbe9 	bl	8005d30 <USBD_CtlError>
              break;
 800555e:	e000      	b.n	8005562 <USBD_StdEPReq+0x154>
              break;
 8005560:	bf00      	nop
          }
          break;
 8005562:	e0ab      	b.n	80056bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d002      	beq.n	8005576 <USBD_StdEPReq+0x168>
 8005570:	2b03      	cmp	r3, #3
 8005572:	d032      	beq.n	80055da <USBD_StdEPReq+0x1cc>
 8005574:	e097      	b.n	80056a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <USBD_StdEPReq+0x17e>
 800557c:	7bbb      	ldrb	r3, [r7, #14]
 800557e:	2b80      	cmp	r3, #128	; 0x80
 8005580:	d004      	beq.n	800558c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fbd3 	bl	8005d30 <USBD_CtlError>
                break;
 800558a:	e091      	b.n	80056b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800558c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005590:	2b00      	cmp	r3, #0
 8005592:	da0b      	bge.n	80055ac <USBD_StdEPReq+0x19e>
 8005594:	7bbb      	ldrb	r3, [r7, #14]
 8005596:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	3310      	adds	r3, #16
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4413      	add	r3, r2
 80055a8:	3304      	adds	r3, #4
 80055aa:	e00b      	b.n	80055c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80055ac:	7bbb      	ldrb	r3, [r7, #14]
 80055ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4413      	add	r3, r2
 80055c2:	3304      	adds	r3, #4
 80055c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2202      	movs	r2, #2
 80055d0:	4619      	mov	r1, r3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fc1d 	bl	8005e12 <USBD_CtlSendData>
              break;
 80055d8:	e06a      	b.n	80056b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80055da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	da11      	bge.n	8005606 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055e2:	7bbb      	ldrb	r3, [r7, #14]
 80055e4:	f003 020f 	and.w	r2, r3, #15
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	440b      	add	r3, r1
 80055f4:	3324      	adds	r3, #36	; 0x24
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d117      	bne.n	800562c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80055fc:	6839      	ldr	r1, [r7, #0]
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb96 	bl	8005d30 <USBD_CtlError>
                  break;
 8005604:	e054      	b.n	80056b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005606:	7bbb      	ldrb	r3, [r7, #14]
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fb83 	bl	8005d30 <USBD_CtlError>
                  break;
 800562a:	e041      	b.n	80056b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800562c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005630:	2b00      	cmp	r3, #0
 8005632:	da0b      	bge.n	800564c <USBD_StdEPReq+0x23e>
 8005634:	7bbb      	ldrb	r3, [r7, #14]
 8005636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	3310      	adds	r3, #16
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	3304      	adds	r3, #4
 800564a:	e00b      	b.n	8005664 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800564c:	7bbb      	ldrb	r3, [r7, #14]
 800564e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	4413      	add	r3, r2
 8005662:	3304      	adds	r3, #4
 8005664:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005666:	7bbb      	ldrb	r3, [r7, #14]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <USBD_StdEPReq+0x264>
 800566c:	7bbb      	ldrb	r3, [r7, #14]
 800566e:	2b80      	cmp	r3, #128	; 0x80
 8005670:	d103      	bne.n	800567a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e00e      	b.n	8005698 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	4619      	mov	r1, r3
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fff0 	bl	8006664 <USBD_LL_IsStallEP>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2201      	movs	r2, #1
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	e002      	b.n	8005698 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2202      	movs	r2, #2
 800569c:	4619      	mov	r1, r3
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fbb7 	bl	8005e12 <USBD_CtlSendData>
              break;
 80056a4:	e004      	b.n	80056b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fb41 	bl	8005d30 <USBD_CtlError>
              break;
 80056ae:	bf00      	nop
          }
          break;
 80056b0:	e004      	b.n	80056bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 fb3b 	bl	8005d30 <USBD_CtlError>
          break;
 80056ba:	bf00      	nop
      }
      break;
 80056bc:	e004      	b.n	80056c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80056be:	6839      	ldr	r1, [r7, #0]
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fb35 	bl	8005d30 <USBD_CtlError>
      break;
 80056c6:	bf00      	nop
  }

  return ret;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	885b      	ldrh	r3, [r3, #2]
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	2b06      	cmp	r3, #6
 80056f6:	f200 8128 	bhi.w	800594a <USBD_GetDescriptor+0x276>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <USBD_GetDescriptor+0x2c>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	0800571d 	.word	0x0800571d
 8005704:	08005735 	.word	0x08005735
 8005708:	08005775 	.word	0x08005775
 800570c:	0800594b 	.word	0x0800594b
 8005710:	0800594b 	.word	0x0800594b
 8005714:	080058eb 	.word	0x080058eb
 8005718:	08005917 	.word	0x08005917
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	7c12      	ldrb	r2, [r2, #16]
 8005728:	f107 0108 	add.w	r1, r7, #8
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	60f8      	str	r0, [r7, #12]
      break;
 8005732:	e112      	b.n	800595a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	7c1b      	ldrb	r3, [r3, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10d      	bne.n	8005758 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	f107 0208 	add.w	r2, r7, #8
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3301      	adds	r3, #1
 8005752:	2202      	movs	r2, #2
 8005754:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005756:	e100      	b.n	800595a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	f107 0208 	add.w	r2, r7, #8
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
 8005768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	2202      	movs	r2, #2
 8005770:	701a      	strb	r2, [r3, #0]
      break;
 8005772:	e0f2      	b.n	800595a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b05      	cmp	r3, #5
 800577c:	f200 80ac 	bhi.w	80058d8 <USBD_GetDescriptor+0x204>
 8005780:	a201      	add	r2, pc, #4	; (adr r2, 8005788 <USBD_GetDescriptor+0xb4>)
 8005782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005786:	bf00      	nop
 8005788:	080057a1 	.word	0x080057a1
 800578c:	080057d5 	.word	0x080057d5
 8005790:	08005809 	.word	0x08005809
 8005794:	0800583d 	.word	0x0800583d
 8005798:	08005871 	.word	0x08005871
 800579c:	080058a5 	.word	0x080058a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	7c12      	ldrb	r2, [r2, #16]
 80057b8:	f107 0108 	add.w	r1, r7, #8
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057c2:	e091      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fab2 	bl	8005d30 <USBD_CtlError>
            err++;
 80057cc:	7afb      	ldrb	r3, [r7, #11]
 80057ce:	3301      	adds	r3, #1
 80057d0:	72fb      	strb	r3, [r7, #11]
          break;
 80057d2:	e089      	b.n	80058e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	7c12      	ldrb	r2, [r2, #16]
 80057ec:	f107 0108 	add.w	r1, r7, #8
 80057f0:	4610      	mov	r0, r2
 80057f2:	4798      	blx	r3
 80057f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057f6:	e077      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa98 	bl	8005d30 <USBD_CtlError>
            err++;
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	3301      	adds	r3, #1
 8005804:	72fb      	strb	r3, [r7, #11]
          break;
 8005806:	e06f      	b.n	80058e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7c12      	ldrb	r2, [r2, #16]
 8005820:	f107 0108 	add.w	r1, r7, #8
 8005824:	4610      	mov	r0, r2
 8005826:	4798      	blx	r3
 8005828:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800582a:	e05d      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa7e 	bl	8005d30 <USBD_CtlError>
            err++;
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	3301      	adds	r3, #1
 8005838:	72fb      	strb	r3, [r7, #11]
          break;
 800583a:	e055      	b.n	80058e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00b      	beq.n	8005860 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	7c12      	ldrb	r2, [r2, #16]
 8005854:	f107 0108 	add.w	r1, r7, #8
 8005858:	4610      	mov	r0, r2
 800585a:	4798      	blx	r3
 800585c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800585e:	e043      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005860:	6839      	ldr	r1, [r7, #0]
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa64 	bl	8005d30 <USBD_CtlError>
            err++;
 8005868:	7afb      	ldrb	r3, [r7, #11]
 800586a:	3301      	adds	r3, #1
 800586c:	72fb      	strb	r3, [r7, #11]
          break;
 800586e:	e03b      	b.n	80058e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	7c12      	ldrb	r2, [r2, #16]
 8005888:	f107 0108 	add.w	r1, r7, #8
 800588c:	4610      	mov	r0, r2
 800588e:	4798      	blx	r3
 8005890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005892:	e029      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa4a 	bl	8005d30 <USBD_CtlError>
            err++;
 800589c:	7afb      	ldrb	r3, [r7, #11]
 800589e:	3301      	adds	r3, #1
 80058a0:	72fb      	strb	r3, [r7, #11]
          break;
 80058a2:	e021      	b.n	80058e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	7c12      	ldrb	r2, [r2, #16]
 80058bc:	f107 0108 	add.w	r1, r7, #8
 80058c0:	4610      	mov	r0, r2
 80058c2:	4798      	blx	r3
 80058c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058c6:	e00f      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fa30 	bl	8005d30 <USBD_CtlError>
            err++;
 80058d0:	7afb      	ldrb	r3, [r7, #11]
 80058d2:	3301      	adds	r3, #1
 80058d4:	72fb      	strb	r3, [r7, #11]
          break;
 80058d6:	e007      	b.n	80058e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa28 	bl	8005d30 <USBD_CtlError>
          err++;
 80058e0:	7afb      	ldrb	r3, [r7, #11]
 80058e2:	3301      	adds	r3, #1
 80058e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80058e6:	bf00      	nop
      }
      break;
 80058e8:	e037      	b.n	800595a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7c1b      	ldrb	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d109      	bne.n	8005906 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	f107 0208 	add.w	r2, r7, #8
 80058fe:	4610      	mov	r0, r2
 8005900:	4798      	blx	r3
 8005902:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005904:	e029      	b.n	800595a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fa11 	bl	8005d30 <USBD_CtlError>
        err++;
 800590e:	7afb      	ldrb	r3, [r7, #11]
 8005910:	3301      	adds	r3, #1
 8005912:	72fb      	strb	r3, [r7, #11]
      break;
 8005914:	e021      	b.n	800595a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	7c1b      	ldrb	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10d      	bne.n	800593a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f107 0208 	add.w	r2, r7, #8
 800592a:	4610      	mov	r0, r2
 800592c:	4798      	blx	r3
 800592e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	2207      	movs	r2, #7
 8005936:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005938:	e00f      	b.n	800595a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800593a:	6839      	ldr	r1, [r7, #0]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f9f7 	bl	8005d30 <USBD_CtlError>
        err++;
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	3301      	adds	r3, #1
 8005946:	72fb      	strb	r3, [r7, #11]
      break;
 8005948:	e007      	b.n	800595a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f9ef 	bl	8005d30 <USBD_CtlError>
      err++;
 8005952:	7afb      	ldrb	r3, [r7, #11]
 8005954:	3301      	adds	r3, #1
 8005956:	72fb      	strb	r3, [r7, #11]
      break;
 8005958:	bf00      	nop
  }

  if (err != 0U)
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d11e      	bne.n	800599e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	88db      	ldrh	r3, [r3, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d016      	beq.n	8005996 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005968:	893b      	ldrh	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	88da      	ldrh	r2, [r3, #6]
 8005972:	893b      	ldrh	r3, [r7, #8]
 8005974:	4293      	cmp	r3, r2
 8005976:	bf28      	it	cs
 8005978:	4613      	movcs	r3, r2
 800597a:	b29b      	uxth	r3, r3
 800597c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800597e:	893b      	ldrh	r3, [r7, #8]
 8005980:	461a      	mov	r2, r3
 8005982:	68f9      	ldr	r1, [r7, #12]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa44 	bl	8005e12 <USBD_CtlSendData>
 800598a:	e009      	b.n	80059a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f9ce 	bl	8005d30 <USBD_CtlError>
 8005994:	e004      	b.n	80059a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa95 	bl	8005ec6 <USBD_CtlSendStatus>
 800599c:	e000      	b.n	80059a0 <USBD_GetDescriptor+0x2cc>
    return;
 800599e:	bf00      	nop
  }
}
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop

080059a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	889b      	ldrh	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d131      	bne.n	8005a1e <USBD_SetAddress+0x76>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	88db      	ldrh	r3, [r3, #6]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d12d      	bne.n	8005a1e <USBD_SetAddress+0x76>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	885b      	ldrh	r3, [r3, #2]
 80059c6:	2b7f      	cmp	r3, #127	; 0x7f
 80059c8:	d829      	bhi.n	8005a1e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	885b      	ldrh	r3, [r3, #2]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d104      	bne.n	80059ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f9a3 	bl	8005d30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ea:	e01d      	b.n	8005a28 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	7bfa      	ldrb	r2, [r7, #15]
 80059f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	4619      	mov	r1, r3
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fe5f 	bl	80066bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa61 	bl	8005ec6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d004      	beq.n	8005a14 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a12:	e009      	b.n	8005a28 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a1c:	e004      	b.n	8005a28 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f985 	bl	8005d30 <USBD_CtlError>
  }
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	885b      	ldrh	r3, [r3, #2]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4b4c      	ldr	r3, [pc, #304]	; (8005b78 <USBD_SetConfig+0x148>)
 8005a46:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a48:	4b4b      	ldr	r3, [pc, #300]	; (8005b78 <USBD_SetConfig+0x148>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d905      	bls.n	8005a5c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005a50:	6839      	ldr	r1, [r7, #0]
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f96c 	bl	8005d30 <USBD_CtlError>
    return USBD_FAIL;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e088      	b.n	8005b6e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d002      	beq.n	8005a6e <USBD_SetConfig+0x3e>
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d025      	beq.n	8005ab8 <USBD_SetConfig+0x88>
 8005a6c:	e071      	b.n	8005b52 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005a6e:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <USBD_SetConfig+0x148>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d01c      	beq.n	8005ab0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005a76:	4b40      	ldr	r3, [pc, #256]	; (8005b78 <USBD_SetConfig+0x148>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a80:	4b3d      	ldr	r3, [pc, #244]	; (8005b78 <USBD_SetConfig+0x148>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff f949 	bl	8004d1e <USBD_SetClassConfig>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f949 	bl	8005d30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005a9e:	e065      	b.n	8005b6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fa10 	bl	8005ec6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005aae:	e05d      	b.n	8005b6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa08 	bl	8005ec6 <USBD_CtlSendStatus>
      break;
 8005ab6:	e059      	b.n	8005b6c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ab8:	4b2f      	ldr	r3, [pc, #188]	; (8005b78 <USBD_SetConfig+0x148>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d112      	bne.n	8005ae6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <USBD_SetConfig+0x148>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ad2:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <USBD_SetConfig+0x148>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff f93c 	bl	8004d56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f9f1 	bl	8005ec6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ae4:	e042      	b.n	8005b6c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <USBD_SetConfig+0x148>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d02a      	beq.n	8005b4a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff f92a 	bl	8004d56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005b02:	4b1d      	ldr	r3, [pc, #116]	; (8005b78 <USBD_SetConfig+0x148>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <USBD_SetConfig+0x148>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	4619      	mov	r1, r3
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff f903 	bl	8004d1e <USBD_SetClassConfig>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00f      	beq.n	8005b42 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f903 	bl	8005d30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	4619      	mov	r1, r3
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff f90f 	bl	8004d56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005b40:	e014      	b.n	8005b6c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f9bf 	bl	8005ec6 <USBD_CtlSendStatus>
      break;
 8005b48:	e010      	b.n	8005b6c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f9bb 	bl	8005ec6 <USBD_CtlSendStatus>
      break;
 8005b50:	e00c      	b.n	8005b6c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f8eb 	bl	8005d30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b5a:	4b07      	ldr	r3, [pc, #28]	; (8005b78 <USBD_SetConfig+0x148>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f7ff f8f8 	bl	8004d56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
 8005b68:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6a:	bf00      	nop
  }

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000180 	.word	0x20000180

08005b7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	88db      	ldrh	r3, [r3, #6]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d004      	beq.n	8005b98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f8cd 	bl	8005d30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b96:	e023      	b.n	8005be0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	dc02      	bgt.n	8005baa <USBD_GetConfig+0x2e>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dc03      	bgt.n	8005bb0 <USBD_GetConfig+0x34>
 8005ba8:	e015      	b.n	8005bd6 <USBD_GetConfig+0x5a>
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d00b      	beq.n	8005bc6 <USBD_GetConfig+0x4a>
 8005bae:	e012      	b.n	8005bd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	2201      	movs	r2, #1
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f927 	bl	8005e12 <USBD_CtlSendData>
        break;
 8005bc4:	e00c      	b.n	8005be0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f91f 	bl	8005e12 <USBD_CtlSendData>
        break;
 8005bd4:	e004      	b.n	8005be0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8a9 	bl	8005d30 <USBD_CtlError>
        break;
 8005bde:	bf00      	nop
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d81e      	bhi.n	8005c3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	88db      	ldrh	r3, [r3, #6]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d004      	beq.n	8005c12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f890 	bl	8005d30 <USBD_CtlError>
        break;
 8005c10:	e01a      	b.n	8005c48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f043 0202 	orr.w	r2, r3, #2
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	330c      	adds	r3, #12
 8005c32:	2202      	movs	r2, #2
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f8eb 	bl	8005e12 <USBD_CtlSendData>
      break;
 8005c3c:	e004      	b.n	8005c48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f875 	bl	8005d30 <USBD_CtlError>
      break;
 8005c46:	bf00      	nop
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	885b      	ldrh	r3, [r3, #2]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d106      	bne.n	8005c70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f92b 	bl	8005ec6 <USBD_CtlSendStatus>
  }
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d80b      	bhi.n	8005ca8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	885b      	ldrh	r3, [r3, #2]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d10c      	bne.n	8005cb2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f910 	bl	8005ec6 <USBD_CtlSendStatus>
      }
      break;
 8005ca6:	e004      	b.n	8005cb2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f840 	bl	8005d30 <USBD_CtlError>
      break;
 8005cb0:	e000      	b.n	8005cb4 <USBD_ClrFeature+0x3c>
      break;
 8005cb2:	bf00      	nop
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	781a      	ldrb	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fabc 	bl	8005264 <SWAPBYTE>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff faaf 	bl	8005264 <SWAPBYTE>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7ff faa2 	bl	8005264 <SWAPBYTE>
 8005d20:	4603      	mov	r3, r0
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	80da      	strh	r2, [r3, #6]
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fc53 	bl	80065e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005d42:	2100      	movs	r1, #0
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 fc4f 	bl	80065e8 <USBD_LL_StallEP>
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b086      	sub	sp, #24
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d036      	beq.n	8005dd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005d6c:	6938      	ldr	r0, [r7, #16]
 8005d6e:	f000 f836 	bl	8005dde <USBD_GetLen>
 8005d72:	4603      	mov	r3, r0
 8005d74:	3301      	adds	r3, #1
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d80:	7dfb      	ldrb	r3, [r7, #23]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4413      	add	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	4413      	add	r3, r2
 8005d98:	2203      	movs	r2, #3
 8005d9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005da2:	e013      	b.n	8005dcc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	693a      	ldr	r2, [r7, #16]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3301      	adds	r3, #1
 8005db4:	613b      	str	r3, [r7, #16]
    idx++;
 8005db6:	7dfb      	ldrb	r3, [r7, #23]
 8005db8:	3301      	adds	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005dbc:	7dfb      	ldrb	r3, [r7, #23]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]
    idx++;
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e7      	bne.n	8005da4 <USBD_GetString+0x52>
 8005dd4:	e000      	b.n	8005dd8 <USBD_GetString+0x86>
    return;
 8005dd6:	bf00      	nop
  }
}
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b085      	sub	sp, #20
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005dee:	e005      	b.n	8005dfc <USBD_GetLen+0x1e>
  {
    len++;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	3301      	adds	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f5      	bne.n	8005df0 <USBD_GetLen+0x12>
  }

  return len;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	60b9      	str	r1, [r7, #8]
 8005e1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	2100      	movs	r1, #0
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 fc5e 	bl	80066fa <USBD_LL_Transmit>

  return USBD_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	2100      	movs	r1, #0
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc4d 	bl	80066fa <USBD_LL_Transmit>

  return USBD_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	2100      	movs	r1, #0
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fc51 	bl	800673c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fc40 	bl	800673c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fc0c 	bl	80066fa <USBD_LL_Transmit>

  return USBD_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005efc:	2300      	movs	r3, #0
 8005efe:	2200      	movs	r2, #0
 8005f00:	2100      	movs	r1, #0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fc1a 	bl	800673c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4912      	ldr	r1, [pc, #72]	; (8005f64 <MX_USB_DEVICE_Init+0x50>)
 8005f1c:	4812      	ldr	r0, [pc, #72]	; (8005f68 <MX_USB_DEVICE_Init+0x54>)
 8005f1e:	f7fe fe90 	bl	8004c42 <USBD_Init>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d001      	beq.n	8005f2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f28:	f7fa fbd2 	bl	80006d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005f2c:	490f      	ldr	r1, [pc, #60]	; (8005f6c <MX_USB_DEVICE_Init+0x58>)
 8005f2e:	480e      	ldr	r0, [pc, #56]	; (8005f68 <MX_USB_DEVICE_Init+0x54>)
 8005f30:	f7fe feb7 	bl	8004ca2 <USBD_RegisterClass>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f3a:	f7fa fbc9 	bl	80006d0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005f3e:	490c      	ldr	r1, [pc, #48]	; (8005f70 <MX_USB_DEVICE_Init+0x5c>)
 8005f40:	4809      	ldr	r0, [pc, #36]	; (8005f68 <MX_USB_DEVICE_Init+0x54>)
 8005f42:	f7fe fe69 	bl	8004c18 <USBD_CUSTOM_HID_RegisterInterface>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005f4c:	f7fa fbc0 	bl	80006d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f50:	4805      	ldr	r0, [pc, #20]	; (8005f68 <MX_USB_DEVICE_Init+0x54>)
 8005f52:	f7fe fecd 	bl	8004cf0 <USBD_Start>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005f5c:	f7fa fbb8 	bl	80006d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f60:	bf00      	nop
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20000114 	.word	0x20000114
 8005f68:	20000268 	.word	0x20000268
 8005f6c:	2000000c 	.word	0x2000000c
 8005f70:	20000104 	.word	0x20000104

08005f74 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8005f88:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	460a      	mov	r2, r1
 8005f9e:	71fb      	strb	r3, [r7, #7]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005fa4:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <CUSTOM_HID_OutEvent_FS+0x48>)
 8005fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005faa:	60bb      	str	r3, [r7, #8]
  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 8005fac:	480b      	ldr	r0, [pc, #44]	; (8005fdc <CUSTOM_HID_OutEvent_FS+0x48>)
 8005fae:	f7fe fde5 	bl	8004b7c <USBD_CUSTOM_HID_ReceivePacket>
  for (uint8_t i = 0; i < CUSTOM_HID_EPOUT_SIZE; i++) {
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	73fb      	strb	r3, [r7, #15]
 8005fb6:	e008      	b.n	8005fca <CUSTOM_HID_OutEvent_FS+0x36>
 	  USB_RX_Buffer[i] = hhid->Report_buf[i]; //read data from PC
 8005fb8:	7bfa      	ldrb	r2, [r7, #15]
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	5c89      	ldrb	r1, [r1, r2]
 8005fc0:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <CUSTOM_HID_OutEvent_FS+0x4c>)
 8005fc2:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < CUSTOM_HID_EPOUT_SIZE; i++) {
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	73fb      	strb	r3, [r7, #15]
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d9f3      	bls.n	8005fb8 <CUSTOM_HID_OutEvent_FS+0x24>
   }

  return (USBD_OK);
 8005fd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	20000268 	.word	0x20000268
 8005fe0:	200001e4 	.word	0x200001e4

08005fe4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4603      	mov	r3, r0
 8005fec:	6039      	str	r1, [r7, #0]
 8005fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2212      	movs	r2, #18
 8005ff4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005ff6:	4b03      	ldr	r3, [pc, #12]	; (8006004 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	20000130 	.word	0x20000130

08006008 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	6039      	str	r1, [r7, #0]
 8006012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2204      	movs	r2, #4
 8006018:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800601a:	4b03      	ldr	r3, [pc, #12]	; (8006028 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	20000144 	.word	0x20000144

0800602c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d105      	bne.n	800604a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	4907      	ldr	r1, [pc, #28]	; (8006060 <USBD_FS_ProductStrDescriptor+0x34>)
 8006042:	4808      	ldr	r0, [pc, #32]	; (8006064 <USBD_FS_ProductStrDescriptor+0x38>)
 8006044:	f7ff fe85 	bl	8005d52 <USBD_GetString>
 8006048:	e004      	b.n	8006054 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	4904      	ldr	r1, [pc, #16]	; (8006060 <USBD_FS_ProductStrDescriptor+0x34>)
 800604e:	4805      	ldr	r0, [pc, #20]	; (8006064 <USBD_FS_ProductStrDescriptor+0x38>)
 8006050:	f7ff fe7f 	bl	8005d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006054:	4b02      	ldr	r3, [pc, #8]	; (8006060 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000538 	.word	0x20000538
 8006064:	08006888 	.word	0x08006888

08006068 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	6039      	str	r1, [r7, #0]
 8006072:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	4904      	ldr	r1, [pc, #16]	; (8006088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006078:	4804      	ldr	r0, [pc, #16]	; (800608c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800607a:	f7ff fe6a 	bl	8005d52 <USBD_GetString>
  return USBD_StrDesc;
 800607e:	4b02      	ldr	r3, [pc, #8]	; (8006088 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20000538 	.word	0x20000538
 800608c:	080068a8 	.word	0x080068a8

08006090 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	4603      	mov	r3, r0
 8006098:	6039      	str	r1, [r7, #0]
 800609a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	221a      	movs	r2, #26
 80060a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80060a2:	f000 f843 	bl	800612c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80060a6:	4b02      	ldr	r3, [pc, #8]	; (80060b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000148 	.word	0x20000148

080060b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	4603      	mov	r3, r0
 80060bc:	6039      	str	r1, [r7, #0]
 80060be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060c0:	79fb      	ldrb	r3, [r7, #7]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d105      	bne.n	80060d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	4907      	ldr	r1, [pc, #28]	; (80060e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060ca:	4808      	ldr	r0, [pc, #32]	; (80060ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80060cc:	f7ff fe41 	bl	8005d52 <USBD_GetString>
 80060d0:	e004      	b.n	80060dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	4904      	ldr	r1, [pc, #16]	; (80060e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060d6:	4805      	ldr	r0, [pc, #20]	; (80060ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80060d8:	f7ff fe3b 	bl	8005d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060dc:	4b02      	ldr	r3, [pc, #8]	; (80060e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000538 	.word	0x20000538
 80060ec:	080068bc 	.word	0x080068bc

080060f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	6039      	str	r1, [r7, #0]
 80060fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006102:	683a      	ldr	r2, [r7, #0]
 8006104:	4907      	ldr	r1, [pc, #28]	; (8006124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006106:	4808      	ldr	r0, [pc, #32]	; (8006128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006108:	f7ff fe23 	bl	8005d52 <USBD_GetString>
 800610c:	e004      	b.n	8006118 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4904      	ldr	r1, [pc, #16]	; (8006124 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006112:	4805      	ldr	r0, [pc, #20]	; (8006128 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006114:	f7ff fe1d 	bl	8005d52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006118:	4b02      	ldr	r3, [pc, #8]	; (8006124 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000538 	.word	0x20000538
 8006128:	080068d0 	.word	0x080068d0

0800612c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <Get_SerialNum+0x44>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006138:	4b0e      	ldr	r3, [pc, #56]	; (8006174 <Get_SerialNum+0x48>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800613e:	4b0e      	ldr	r3, [pc, #56]	; (8006178 <Get_SerialNum+0x4c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d009      	beq.n	8006166 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006152:	2208      	movs	r2, #8
 8006154:	4909      	ldr	r1, [pc, #36]	; (800617c <Get_SerialNum+0x50>)
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f814 	bl	8006184 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800615c:	2204      	movs	r2, #4
 800615e:	4908      	ldr	r1, [pc, #32]	; (8006180 <Get_SerialNum+0x54>)
 8006160:	68b8      	ldr	r0, [r7, #8]
 8006162:	f000 f80f 	bl	8006184 <IntToUnicode>
  }
}
 8006166:	bf00      	nop
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	1fff7a10 	.word	0x1fff7a10
 8006174:	1fff7a14 	.word	0x1fff7a14
 8006178:	1fff7a18 	.word	0x1fff7a18
 800617c:	2000014a 	.word	0x2000014a
 8006180:	2000015a 	.word	0x2000015a

08006184 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
 800619a:	e027      	b.n	80061ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	0f1b      	lsrs	r3, r3, #28
 80061a0:	2b09      	cmp	r3, #9
 80061a2:	d80b      	bhi.n	80061bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0f1b      	lsrs	r3, r3, #28
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4619      	mov	r1, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	440b      	add	r3, r1
 80061b4:	3230      	adds	r2, #48	; 0x30
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
 80061ba:	e00a      	b.n	80061d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	0f1b      	lsrs	r3, r3, #28
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	7dfb      	ldrb	r3, [r7, #23]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	4619      	mov	r1, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	440b      	add	r3, r1
 80061cc:	3237      	adds	r2, #55	; 0x37
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	3301      	adds	r3, #1
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	4413      	add	r3, r2
 80061e2:	2200      	movs	r2, #0
 80061e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	3301      	adds	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
 80061ec:	7dfa      	ldrb	r2, [r7, #23]
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d3d3      	bcc.n	800619c <IntToUnicode+0x18>
  }
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
	...

08006204 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	609a      	str	r2, [r3, #8]
 8006218:	60da      	str	r2, [r3, #12]
 800621a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006224:	d13a      	bne.n	800629c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006226:	2300      	movs	r3, #0
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	4a1d      	ldr	r2, [pc, #116]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	6313      	str	r3, [r2, #48]	; 0x30
 8006236:	4b1b      	ldr	r3, [pc, #108]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006242:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006248:	2302      	movs	r3, #2
 800624a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624c:	2300      	movs	r3, #0
 800624e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006250:	2303      	movs	r3, #3
 8006252:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006254:	230a      	movs	r3, #10
 8006256:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4619      	mov	r1, r3
 800625e:	4812      	ldr	r0, [pc, #72]	; (80062a8 <HAL_PCD_MspInit+0xa4>)
 8006260:	f7fa fcd8 	bl	8000c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006264:	4b0f      	ldr	r3, [pc, #60]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006268:	4a0e      	ldr	r2, [pc, #56]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 800626a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800626e:	6353      	str	r3, [r2, #52]	; 0x34
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 8006276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 800627a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800627e:	6453      	str	r3, [r2, #68]	; 0x44
 8006280:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <HAL_PCD_MspInit+0xa0>)
 8006282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800628c:	2200      	movs	r2, #0
 800628e:	2100      	movs	r1, #0
 8006290:	2043      	movs	r0, #67	; 0x43
 8006292:	f7fa fc88 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006296:	2043      	movs	r0, #67	; 0x43
 8006298:	f7fa fca1 	bl	8000bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800629c:	bf00      	nop
 800629e:	3728      	adds	r7, #40	; 0x28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40020000 	.word	0x40020000

080062ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f7fe fd5f 	bl	8004d86 <USBD_LL_SetupStage>
}
 80062c8:	bf00      	nop
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	1a9b      	subs	r3, r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	4619      	mov	r1, r3
 80062fa:	f7fe fd99 	bl	8004e30 <USBD_LL_DataOutStage>
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b082      	sub	sp, #8
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	1a9b      	subs	r3, r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	440b      	add	r3, r1
 8006326:	3348      	adds	r3, #72	; 0x48
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	4619      	mov	r1, r3
 800632e:	f7fe fde2 	bl	8004ef6 <USBD_LL_DataInStage>
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fef6 	bl	800513a <USBD_LL_SOF>
}
 800634e:	bf00      	nop
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b084      	sub	sp, #16
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d102      	bne.n	8006370 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
 800636e:	e008      	b.n	8006382 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d102      	bne.n	800637e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	e001      	b.n	8006382 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800637e:	f7fa f9a7 	bl	80006d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006388:	7bfa      	ldrb	r2, [r7, #15]
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe fe96 	bl	80050be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe fe42 	bl	8005022 <USBD_LL_Reset>
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fe fe91 	bl	80050de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <HAL_PCD_SuspendCallback+0x48>)
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	4a03      	ldr	r2, [pc, #12]	; (80063f0 <HAL_PCD_SuspendCallback+0x48>)
 80063e2:	f043 0306 	orr.w	r3, r3, #6
 80063e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fe81 	bl	800510a <USBD_LL_Resume>
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006422:	78fa      	ldrb	r2, [r7, #3]
 8006424:	4611      	mov	r1, r2
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fecf 	bl	80051ca <USBD_LL_IsoOUTIncomplete>
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006446:	78fa      	ldrb	r2, [r7, #3]
 8006448:	4611      	mov	r1, r2
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fe97 	bl	800517e <USBD_LL_IsoINIncomplete>
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fed5 	bl	8005216 <USBD_LL_DevConnected>
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fed2 	bl	800522c <USBD_LL_DevDisconnected>
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d13c      	bne.n	800651a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80064a0:	4a20      	ldr	r2, [pc, #128]	; (8006524 <USBD_LL_Init+0x94>)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <USBD_LL_Init+0x94>)
 80064ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80064b0:	4b1c      	ldr	r3, [pc, #112]	; (8006524 <USBD_LL_Init+0x94>)
 80064b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80064b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80064b8:	4b1a      	ldr	r3, [pc, #104]	; (8006524 <USBD_LL_Init+0x94>)
 80064ba:	2204      	movs	r2, #4
 80064bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80064be:	4b19      	ldr	r3, [pc, #100]	; (8006524 <USBD_LL_Init+0x94>)
 80064c0:	2202      	movs	r2, #2
 80064c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80064c4:	4b17      	ldr	r3, [pc, #92]	; (8006524 <USBD_LL_Init+0x94>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80064ca:	4b16      	ldr	r3, [pc, #88]	; (8006524 <USBD_LL_Init+0x94>)
 80064cc:	2202      	movs	r2, #2
 80064ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064d0:	4b14      	ldr	r3, [pc, #80]	; (8006524 <USBD_LL_Init+0x94>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <USBD_LL_Init+0x94>)
 80064d8:	2200      	movs	r2, #0
 80064da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064dc:	4b11      	ldr	r3, [pc, #68]	; (8006524 <USBD_LL_Init+0x94>)
 80064de:	2200      	movs	r2, #0
 80064e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <USBD_LL_Init+0x94>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <USBD_LL_Init+0x94>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064ee:	480d      	ldr	r0, [pc, #52]	; (8006524 <USBD_LL_Init+0x94>)
 80064f0:	f7fa fd2c 	bl	8000f4c <HAL_PCD_Init>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80064fa:	f7fa f8e9 	bl	80006d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	4808      	ldr	r0, [pc, #32]	; (8006524 <USBD_LL_Init+0x94>)
 8006502:	f7fb fe72 	bl	80021ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006506:	2240      	movs	r2, #64	; 0x40
 8006508:	2100      	movs	r1, #0
 800650a:	4806      	ldr	r0, [pc, #24]	; (8006524 <USBD_LL_Init+0x94>)
 800650c:	f7fb fe26 	bl	800215c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006510:	2280      	movs	r2, #128	; 0x80
 8006512:	2101      	movs	r1, #1
 8006514:	4803      	ldr	r0, [pc, #12]	; (8006524 <USBD_LL_Init+0x94>)
 8006516:	f7fb fe21 	bl	800215c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000738 	.word	0x20000738

08006528 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800653e:	4618      	mov	r0, r3
 8006540:	f7fa fe21 	bl	8001186 <HAL_PCD_Start>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 f930 	bl	80067b0 <USBD_Get_USB_Status>
 8006550:	4603      	mov	r3, r0
 8006552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006554:	7bbb      	ldrb	r3, [r7, #14]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	4608      	mov	r0, r1
 8006568:	4611      	mov	r1, r2
 800656a:	461a      	mov	r2, r3
 800656c:	4603      	mov	r3, r0
 800656e:	70fb      	strb	r3, [r7, #3]
 8006570:	460b      	mov	r3, r1
 8006572:	70bb      	strb	r3, [r7, #2]
 8006574:	4613      	mov	r3, r2
 8006576:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006586:	78bb      	ldrb	r3, [r7, #2]
 8006588:	883a      	ldrh	r2, [r7, #0]
 800658a:	78f9      	ldrb	r1, [r7, #3]
 800658c:	f7fb fa05 	bl	800199a <HAL_PCD_EP_Open>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f90a 	bl	80067b0 <USBD_Get_USB_Status>
 800659c:	4603      	mov	r3, r0
 800659e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	460b      	mov	r3, r1
 80065b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065b6:	2300      	movs	r3, #0
 80065b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065c4:	78fa      	ldrb	r2, [r7, #3]
 80065c6:	4611      	mov	r1, r2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fb fa4e 	bl	8001a6a <HAL_PCD_EP_Close>
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f8eb 	bl	80067b0 <USBD_Get_USB_Status>
 80065da:	4603      	mov	r3, r0
 80065dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065de:	7bbb      	ldrb	r3, [r7, #14]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006602:	78fa      	ldrb	r2, [r7, #3]
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f7fb fb0e 	bl	8001c28 <HAL_PCD_EP_SetStall>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006610:	7bfb      	ldrb	r3, [r7, #15]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f8cc 	bl	80067b0 <USBD_Get_USB_Status>
 8006618:	4603      	mov	r3, r0
 800661a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800661c:	7bbb      	ldrb	r3, [r7, #14]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b084      	sub	sp, #16
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006640:	78fa      	ldrb	r2, [r7, #3]
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f7fb fb53 	bl	8001cf0 <HAL_PCD_EP_ClrStall>
 800664a:	4603      	mov	r3, r0
 800664c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 f8ad 	bl	80067b0 <USBD_Get_USB_Status>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800665a:	7bbb      	ldrb	r3, [r7, #14]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	460b      	mov	r3, r1
 800666e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006676:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	da0b      	bge.n	8006698 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006686:	68f9      	ldr	r1, [r7, #12]
 8006688:	4613      	mov	r3, r2
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	333e      	adds	r3, #62	; 0x3e
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	e00b      	b.n	80066b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	4611      	mov	r1, r2
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fb f938 	bl	8001950 <HAL_PCD_SetAddress>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 f862 	bl	80067b0 <USBD_Get_USB_Status>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	460b      	mov	r3, r1
 8006708:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006718:	7af9      	ldrb	r1, [r7, #11]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	f7fb fa39 	bl	8001b94 <HAL_PCD_EP_Transmit>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f841 	bl	80067b0 <USBD_Get_USB_Status>
 800672e:	4603      	mov	r3, r0
 8006730:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006732:	7dbb      	ldrb	r3, [r7, #22]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	607a      	str	r2, [r7, #4]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	460b      	mov	r3, r1
 800674a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800675a:	7af9      	ldrb	r1, [r7, #11]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	f7fb f9cd 	bl	8001afe <HAL_PCD_EP_Receive>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f820 	bl	80067b0 <USBD_Get_USB_Status>
 8006770:	4603      	mov	r3, r0
 8006772:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006774:	7dbb      	ldrb	r3, [r7, #22]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8006788:	4b03      	ldr	r3, [pc, #12]	; (8006798 <USBD_static_malloc+0x18>)
}
 800678a:	4618      	mov	r0, r3
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	20000184 	.word	0x20000184

0800679c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]

}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d817      	bhi.n	80067f4 <USBD_Get_USB_Status+0x44>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <USBD_Get_USB_Status+0x1c>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067dd 	.word	0x080067dd
 80067d0:	080067e3 	.word	0x080067e3
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067ef 	.word	0x080067ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
    break;
 80067e0:	e00b      	b.n	80067fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067e2:	2303      	movs	r3, #3
 80067e4:	73fb      	strb	r3, [r7, #15]
    break;
 80067e6:	e008      	b.n	80067fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067e8:	2301      	movs	r3, #1
 80067ea:	73fb      	strb	r3, [r7, #15]
    break;
 80067ec:	e005      	b.n	80067fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067ee:	2303      	movs	r3, #3
 80067f0:	73fb      	strb	r3, [r7, #15]
    break;
 80067f2:	e002      	b.n	80067fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80067f4:	2303      	movs	r3, #3
 80067f6:	73fb      	strb	r3, [r7, #15]
    break;
 80067f8:	bf00      	nop
  }
  return usb_status;
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <__libc_init_array>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4d0d      	ldr	r5, [pc, #52]	; (8006840 <__libc_init_array+0x38>)
 800680c:	4c0d      	ldr	r4, [pc, #52]	; (8006844 <__libc_init_array+0x3c>)
 800680e:	1b64      	subs	r4, r4, r5
 8006810:	10a4      	asrs	r4, r4, #2
 8006812:	2600      	movs	r6, #0
 8006814:	42a6      	cmp	r6, r4
 8006816:	d109      	bne.n	800682c <__libc_init_array+0x24>
 8006818:	4d0b      	ldr	r5, [pc, #44]	; (8006848 <__libc_init_array+0x40>)
 800681a:	4c0c      	ldr	r4, [pc, #48]	; (800684c <__libc_init_array+0x44>)
 800681c:	f000 f820 	bl	8006860 <_init>
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	2600      	movs	r6, #0
 8006826:	42a6      	cmp	r6, r4
 8006828:	d105      	bne.n	8006836 <__libc_init_array+0x2e>
 800682a:	bd70      	pop	{r4, r5, r6, pc}
 800682c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006830:	4798      	blx	r3
 8006832:	3601      	adds	r6, #1
 8006834:	e7ee      	b.n	8006814 <__libc_init_array+0xc>
 8006836:	f855 3b04 	ldr.w	r3, [r5], #4
 800683a:	4798      	blx	r3
 800683c:	3601      	adds	r6, #1
 800683e:	e7f2      	b.n	8006826 <__libc_init_array+0x1e>
 8006840:	08006908 	.word	0x08006908
 8006844:	08006908 	.word	0x08006908
 8006848:	08006908 	.word	0x08006908
 800684c:	0800690c 	.word	0x0800690c

08006850 <memset>:
 8006850:	4402      	add	r2, r0
 8006852:	4603      	mov	r3, r0
 8006854:	4293      	cmp	r3, r2
 8006856:	d100      	bne.n	800685a <memset+0xa>
 8006858:	4770      	bx	lr
 800685a:	f803 1b01 	strb.w	r1, [r3], #1
 800685e:	e7f9      	b.n	8006854 <memset+0x4>

08006860 <_init>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr

0800686c <_fini>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr
