
009Sem_binary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f4  080084f4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084fc  080084fc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008500  08008500  00018500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013628  20000078  0800857c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200136a0  0800857c  000236a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da99  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bcd  00000000  00000000  0003db41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00041710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00042d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025206  00000000  00000000  00044188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018029  00000000  00000000  0006938e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db103  00000000  00000000  000813b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c4ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d8  00000000  00000000  0015c510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008250 	.word	0x08008250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008250 	.word	0x08008250

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200135e8 	.word	0x200135e8

08000264 <strlen>:
 8000264:	4603      	mov	r3, r0
 8000266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800026a:	2a00      	cmp	r2, #0
 800026c:	d1fb      	bne.n	8000266 <strlen+0x2>
 800026e:	1a18      	subs	r0, r3, r0
 8000270:	3801      	subs	r0, #1
 8000272:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fbf3 	bl	8000e08 <HAL_Init>

  /* USER CODE BEGIN Init */
  xWork = xSemaphoreCreateBinary();
 8000622:	2203      	movs	r2, #3
 8000624:	2100      	movs	r1, #0
 8000626:	2001      	movs	r0, #1
 8000628:	f002 fa10 	bl	8002a4c <xQueueGenericCreate>
 800062c:	4603      	mov	r3, r0
 800062e:	4a19      	ldr	r2, [pc, #100]	; (8000694 <main+0x7c>)
 8000630:	6013      	str	r3, [r2, #0]
  xWorkQueue = xQueueCreate( 1, sizeof( unsigned int ) );
 8000632:	2200      	movs	r2, #0
 8000634:	2104      	movs	r1, #4
 8000636:	2001      	movs	r0, #1
 8000638:	f002 fa08 	bl	8002a4c <xQueueGenericCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a16      	ldr	r2, [pc, #88]	; (8000698 <main+0x80>)
 8000640:	6013      	str	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f833 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f8e1 	bl	800080c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800064a:	f000 f88b 	bl	8000764 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800064e:	f000 f8b3 	bl	80007b8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if( (xWork != NULL) && (xWorkQueue != NULL) )
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <main+0x7c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d01b      	beq.n	8000692 <main+0x7a>
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <main+0x80>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d017      	beq.n	8000692 <main+0x7a>
  {
	  /* Create the 'Manager' task.  This is the task that will be synchronized with the Employee task.  The Manager task is created with a high priority  */
      xTaskCreate( vManagerTask, "Manager", 500, NULL, 3, NULL );
 8000662:	2300      	movs	r3, #0
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2303      	movs	r3, #3
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000670:	490a      	ldr	r1, [pc, #40]	; (800069c <main+0x84>)
 8000672:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x88>)
 8000674:	f003 f830 	bl	80036d8 <xTaskCreate>

      /* Create a employee task with less priority than manager */
      xTaskCreate( vEmployeeTask, "Employee", 500, NULL, 1, NULL );
 8000678:	2300      	movs	r3, #0
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2301      	movs	r3, #1
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000686:	4907      	ldr	r1, [pc, #28]	; (80006a4 <main+0x8c>)
 8000688:	4807      	ldr	r0, [pc, #28]	; (80006a8 <main+0x90>)
 800068a:	f003 f825 	bl	80036d8 <xTaskCreate>

      /* Start the scheduler so the created tasks start executing. */
      vTaskStartScheduler();
 800068e:	f003 f9bf 	bl	8003a10 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x7a>
 8000694:	20013558 	.word	0x20013558
 8000698:	20013554 	.word	0x20013554
 800069c:	08008268 	.word	0x08008268
 80006a0:	08000879 	.word	0x08000879
 80006a4:	08008270 	.word	0x08008270
 80006a8:	0800093d 	.word	0x0800093d

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	2230      	movs	r2, #48	; 0x30
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f006 fc0c 	bl	8006ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	4b21      	ldr	r3, [pc, #132]	; (800075c <SystemClock_Config+0xb0>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xb0>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6413      	str	r3, [r2, #64]	; 0x40
 80006e0:	4b1e      	ldr	r3, [pc, #120]	; (800075c <SystemClock_Config+0xb0>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <SystemClock_Config+0xb4>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a1a      	ldr	r2, [pc, #104]	; (8000760 <SystemClock_Config+0xb4>)
 80006f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fa:	6013      	str	r3, [r2, #0]
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <SystemClock_Config+0xb4>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000708:	2301      	movs	r3, #1
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000712:	2300      	movs	r3, #0
 8000714:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fe34 	bl	8001388 <HAL_RCC_OscConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000726:	f000 f949 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800072e:	2301      	movs	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f001 f897 	bl	8001878 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000750:	f000 f934 	bl	80009bc <Error_Handler>
  }
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	; 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART1_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000774:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART1_UART_Init+0x4c>)
 800079c:	f001 fd48 	bl	8002230 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f000 f909 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20013510 	.word	0x20013510
 80007b4:	40011000 	.word	0x40011000

080007b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART3_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART3_UART_Init+0x4c>)
 80007f0:	f001 fd1e 	bl	8002230 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f8df 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200134cc 	.word	0x200134cc
 8000808:	40004800 	.word	0x40004800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_GPIO_Init+0x68>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <MX_GPIO_Init+0x68>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_GPIO_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_GPIO_Init+0x68>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_GPIO_Init+0x68>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_GPIO_Init+0x68>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_GPIO_Init+0x68>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <MX_GPIO_Init+0x68>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_GPIO_Init+0x68>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <vManagerTask>:

/* USER CODE BEGIN 4 */
void vManagerTask( void *pvParameters )
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	 portBASE_TYPE xStatus;

   /* The semaphore is created in the 'empty' state, meaning the semaphore must
	 first be given using the xSemaphoreGive() API function before it
	 can subsequently be taken (obtained) */
   xSemaphoreGive( xWork);
 8000880:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <vManagerTask+0x70>)
 8000882:	6818      	ldr	r0, [r3, #0]
 8000884:	2300      	movs	r3, #0
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	f002 f967 	bl	8002b5c <xQueueGenericSend>

   for( ;; )
   {
       /* get a work ticket id(some random number) */
       xWorkTicketId = ( rand() & 0x1FF );
 800088e:	f006 fb2b 	bl	8006ee8 <rand>
 8000892:	4603      	mov	r3, r0
 8000894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000898:	60bb      	str	r3, [r7, #8]

		/* Sends work ticket id to the work queue */
		xStatus = xQueueSend( xWorkQueue, &xWorkTicketId , portMAX_DELAY ); //Post an item on back of the queue
 800089a:	4b14      	ldr	r3, [pc, #80]	; (80008ec <vManagerTask+0x74>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	f107 0108 	add.w	r1, r7, #8
 80008a2:	2300      	movs	r3, #0
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	f002 f958 	bl	8002b5c <xQueueGenericSend>
 80008ac:	60f8      	str	r0, [r7, #12]

		if( xStatus != pdPASS )
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d008      	beq.n	80008c6 <vManagerTask+0x4e>
		{
			sprintf(usr_msg,"Could not send to the queue.\r\n");
 80008b4:	490e      	ldr	r1, [pc, #56]	; (80008f0 <vManagerTask+0x78>)
 80008b6:	480f      	ldr	r0, [pc, #60]	; (80008f4 <vManagerTask+0x7c>)
 80008b8:	f006 fb56 	bl	8006f68 <siprintf>
			debugPrint(&huart1, usr_msg);
 80008bc:	490d      	ldr	r1, [pc, #52]	; (80008f4 <vManagerTask+0x7c>)
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <vManagerTask+0x80>)
 80008c0:	f000 fa5e 	bl	8000d80 <debugPrint>
 80008c4:	e7e3      	b.n	800088e <vManagerTask+0x16>

		}else
		{
			/* Manager notifying the employee by "Giving" semaphore */
			xSemaphoreGive( xWork);
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <vManagerTask+0x70>)
 80008c8:	6818      	ldr	r0, [r3, #0]
 80008ca:	2300      	movs	r3, #0
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	f002 f944 	bl	8002b5c <xQueueGenericSend>
			/* after assigning the work , just yield the processor because nothing to do */
			taskYIELD();
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <vManagerTask+0x84>)
 80008d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	f3bf 8f4f 	dsb	sy
 80008e0:	f3bf 8f6f 	isb	sy
       xWorkTicketId = ( rand() & 0x1FF );
 80008e4:	e7d3      	b.n	800088e <vManagerTask+0x16>
 80008e6:	bf00      	nop
 80008e8:	20013558 	.word	0x20013558
 80008ec:	20013554 	.word	0x20013554
 80008f0:	0800827c 	.word	0x0800827c
 80008f4:	20000094 	.word	0x20000094
 80008f8:	20013510 	.word	0x20013510
 80008fc:	e000ed04 	.word	0xe000ed04

08000900 <EmployeeDoWork>:
		}
   }
}

void EmployeeDoWork(unsigned char TicketId)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	/* implement the work according to TickedID */
	sprintf(usr_msg,"Employee task : Working on Ticked id : %d\r\n",TicketId);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	461a      	mov	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <EmployeeDoWork+0x30>)
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <EmployeeDoWork+0x34>)
 8000912:	f006 fb29 	bl	8006f68 <siprintf>
	debugPrint(&huart1, usr_msg);
 8000916:	4907      	ldr	r1, [pc, #28]	; (8000934 <EmployeeDoWork+0x34>)
 8000918:	4807      	ldr	r0, [pc, #28]	; (8000938 <EmployeeDoWork+0x38>)
 800091a:	f000 fa31 	bl	8000d80 <debugPrint>
	vTaskDelay(TicketId);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f003 f83d 	bl	80039a0 <vTaskDelay>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	0800829c 	.word	0x0800829c
 8000934:	20000094 	.word	0x20000094
 8000938:	20013510 	.word	0x20013510

0800093c <vEmployeeTask>:

static void vEmployeeTask( void *pvParameters )
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xStatus;
    /* As per most tasks, this task is implemented within an infinite loop. */
    for( ;; )
    {
		/* First Employee tries to take the semaphore, if it is available that means there is a task assigned by manager, otherwise employee task will be blocked */
		xSemaphoreTake( xWork, 0 );
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <vEmployeeTask+0x48>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f002 fbfa 	bl	8003144 <xQueueSemaphoreTake>

		/* get the ticket id from the work queue */
		xStatus = xQueueReceive( xWorkQueue, &xWorkTicketId, 0 );
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <vEmployeeTask+0x4c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f107 010b 	add.w	r1, r7, #11
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f002 fae2 	bl	8002f24 <xQueueReceive>
 8000960:	60f8      	str	r0, [r7, #12]

		if( xStatus == pdPASS )
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d104      	bne.n	8000972 <vEmployeeTask+0x36>
		{
		  /* employee may decode the xWorkTicketId in this function to do the work*/
			EmployeeDoWork(xWorkTicketId);
 8000968:	7afb      	ldrb	r3, [r7, #11]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ffc8 	bl	8000900 <EmployeeDoWork>
 8000970:	e7e8      	b.n	8000944 <vEmployeeTask+0x8>
		}
		else
		{
			/* We did not receive anything from the queue.  This must be an error as this task should only run when the manager assigns at least one work. */
			sprintf(usr_msg,"Employee task : Queue is empty , nothing to do.\r\n");
 8000972:	4906      	ldr	r1, [pc, #24]	; (800098c <vEmployeeTask+0x50>)
 8000974:	4806      	ldr	r0, [pc, #24]	; (8000990 <vEmployeeTask+0x54>)
 8000976:	f006 faf7 	bl	8006f68 <siprintf>
			debugPrint(&huart1, usr_msg);
 800097a:	4905      	ldr	r1, [pc, #20]	; (8000990 <vEmployeeTask+0x54>)
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <vEmployeeTask+0x58>)
 800097e:	f000 f9ff 	bl	8000d80 <debugPrint>
		xSemaphoreTake( xWork, 0 );
 8000982:	e7df      	b.n	8000944 <vEmployeeTask+0x8>
 8000984:	20013558 	.word	0x20013558
 8000988:	20013554 	.word	0x20013554
 800098c:	080082c8 	.word	0x080082c8
 8000990:	20000094 	.word	0x20000094
 8000994:	20013510 	.word	0x20013510

08000998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009aa:	f000 fa4f 	bl	8000e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40001000 	.word	0x40001000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	; 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_UART_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12d      	bne.n	8000a96 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
 8000a3e:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a31      	ldr	r2, [pc, #196]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a44:	f043 0310 	orr.w	r3, r3, #16
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f003 0310 	and.w	r3, r3, #16
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a84:	2307      	movs	r3, #7
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481f      	ldr	r0, [pc, #124]	; (8000b0c <HAL_UART_MspInit+0xf4>)
 8000a90:	f000 fade 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a94:	e031      	b.n	8000afa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <HAL_UART_MspInit+0xf8>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d12c      	bne.n	8000afa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aae:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6313      	str	r3, [r2, #48]	; 0x30
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_UART_MspInit+0xf0>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ad8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000aea:	2307      	movs	r3, #7
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_UART_MspInit+0xfc>)
 8000af6:	f000 faab 	bl	8001050 <HAL_GPIO_Init>
}
 8000afa:	bf00      	nop
 8000afc:	3730      	adds	r7, #48	; 0x30
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40011000 	.word	0x40011000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40004800 	.word	0x40004800
 8000b14:	40020400 	.word	0x40020400

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2036      	movs	r0, #54	; 0x36
 8000b2e:	f000 fa65 	bl	8000ffc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b32:	2036      	movs	r0, #54	; 0x36
 8000b34:	f000 fa7e 	bl	8001034 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_InitTick+0xa0>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a1d      	ldr	r2, [pc, #116]	; (8000bb8 <HAL_InitTick+0xa0>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_InitTick+0xa0>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b54:	f107 0210 	add.w	r2, r7, #16
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f001 f886 	bl	8001c70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b64:	f001 f85c 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 8000b68:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_InitTick+0xa4>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_InitTick+0xac>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000b9a:	f001 f89b 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_InitTick+0xa8>)
 8000ba6:	f001 f8ef 	bl	8001d88 <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	2001355c 	.word	0x2001355c
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM6_DAC_IRQHandler+0x10>)
 8000bfa:	f001 f935 	bl	8001e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2001355c 	.word	0x2001355c

08000c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
	return 1;
 8000c0c:	2301      	movs	r3, #1
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <_kill>:

int _kill(int pid, int sig)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c22:	f006 f913 	bl	8006e4c <__errno>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2216      	movs	r2, #22
 8000c2a:	601a      	str	r2, [r3, #0]
	return -1;
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <_exit>:

void _exit (int status)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ffe7 	bl	8000c18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c4a:	e7fe      	b.n	8000c4a <_exit+0x12>

08000c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e00a      	b.n	8000c74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c5e:	f3af 8000 	nop.w
 8000c62:	4601      	mov	r1, r0
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	60ba      	str	r2, [r7, #8]
 8000c6a:	b2ca      	uxtb	r2, r1
 8000c6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	3301      	adds	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	697a      	ldr	r2, [r7, #20]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	dbf0      	blt.n	8000c5e <_read+0x12>
	}

return len;
 8000c7c:	687b      	ldr	r3, [r7, #4]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cae:	605a      	str	r2, [r3, #4]
	return 0;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <_isatty>:

int _isatty(int file)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	b083      	sub	sp, #12
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
	return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf8:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <_sbrk+0x5c>)
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <_sbrk+0x60>)
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <_sbrk+0x64>)
 8000d0e:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <_sbrk+0x68>)
 8000d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d20:	f006 f894 	bl	8006e4c <__errno>
 8000d24:	4603      	mov	r3, r0
 8000d26:	220c      	movs	r2, #12
 8000d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e009      	b.n	8000d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <_sbrk+0x64>)
 8000d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d42:	68fb      	ldr	r3, [r7, #12]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20020000 	.word	0x20020000
 8000d50:	00000400 	.word	0x00000400
 8000d54:	20000190 	.word	0x20000190
 8000d58:	200136a0 	.word	0x200136a0

08000d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <debugPrint>:
 *  Created on: May 22, 2021
 *      Author: minia
 */

#include "uart_task.h"
void debugPrint(UART_HandleTypeDef *huart, char _out[]) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(huart, (uint8_t *) _out, strlen(_out), 10);
 8000d8a:	6838      	ldr	r0, [r7, #0]
 8000d8c:	f7ff fa6a 	bl	8000264 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	230a      	movs	r3, #10
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f001 fa96 	bl	80022ca <HAL_UART_Transmit>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <vApplicationIdleHook>:
 * utility.c
 *
 *  Created on: May 28, 2021
 *      Author: minia
 */
void vApplicationIdleHook(void) {
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dba:	490e      	ldr	r1, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dbc:	4a0e      	ldr	r2, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd0:	4c0b      	ldr	r4, [pc, #44]	; (8000e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffbd 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f006 f839 	bl	8006e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc17 	bl	8000618 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000df8:	08008504 	.word	0x08008504
  ldr r2, =_sbss
 8000dfc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e00:	200136a0 	.word	0x200136a0

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f8d8 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fe6e 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdc4 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	200135a4 	.word	0x200135a4

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200135a4 	.word	0x200135a4

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e16b      	b.n	8001344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 815a 	bne.w	800133e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80b4 	beq.w	800133e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b60      	ldr	r3, [pc, #384]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a5f      	ldr	r2, [pc, #380]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b5d      	ldr	r3, [pc, #372]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a5b      	ldr	r2, [pc, #364]	; (8001360 <HAL_GPIO_Init+0x310>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a52      	ldr	r2, [pc, #328]	; (8001364 <HAL_GPIO_Init+0x314>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x226>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a51      	ldr	r2, [pc, #324]	; (8001368 <HAL_GPIO_Init+0x318>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x222>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a50      	ldr	r2, [pc, #320]	; (800136c <HAL_GPIO_Init+0x31c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x21e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <HAL_GPIO_Init+0x320>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x21a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4e      	ldr	r2, [pc, #312]	; (8001374 <HAL_GPIO_Init+0x324>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x216>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <HAL_GPIO_Init+0x328>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x212>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4c      	ldr	r2, [pc, #304]	; (800137c <HAL_GPIO_Init+0x32c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x20e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4b      	ldr	r2, [pc, #300]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x20a>
 8001256:	2307      	movs	r3, #7
 8001258:	e00e      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125a:	2308      	movs	r3, #8
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125e:	2306      	movs	r3, #6
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x310>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ba:	4a32      	ldr	r2, [pc, #200]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c0:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e4:	4a27      	ldr	r2, [pc, #156]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_GPIO_Init+0x334>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_GPIO_Init+0x334>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <HAL_GPIO_Init+0x334>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f ae90 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	bf00      	nop
 8001350:	3724      	adds	r7, #36	; 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40013800 	.word	0x40013800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021000 	.word	0x40021000
 8001378:	40021400 	.word	0x40021400
 800137c:	40021800 	.word	0x40021800
 8001380:	40021c00 	.word	0x40021c00
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e264      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d075      	beq.n	8001492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	4ba3      	ldr	r3, [pc, #652]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d00c      	beq.n	80013cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4ba0      	ldr	r3, [pc, #640]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d112      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013be:	4b9d      	ldr	r3, [pc, #628]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ca:	d10b      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	4b99      	ldr	r3, [pc, #612]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d05b      	beq.n	8001490 <HAL_RCC_OscConfig+0x108>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d157      	bne.n	8001490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e23f      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ec:	d106      	bne.n	80013fc <HAL_RCC_OscConfig+0x74>
 80013ee:	4b91      	ldr	r3, [pc, #580]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a90      	ldr	r2, [pc, #576]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a8a      	ldr	r2, [pc, #552]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a87      	ldr	r2, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 8001420:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a83      	ldr	r2, [pc, #524]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a80      	ldr	r2, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fd18 	bl	8000e74 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fd14 	bl	8000e74 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e204      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xc0>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fd04 	bl	8000e74 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fd00 	bl	8000e74 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1f0      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	4b65      	ldr	r3, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1c4      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4952      	ldr	r1, [pc, #328]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <HAL_RCC_OscConfig+0x2b0>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fcb9 	bl	8000e74 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fcb5 	bl	8000e74 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1a5      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4940      	ldr	r1, [pc, #256]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <HAL_RCC_OscConfig+0x2b0>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fc98 	bl	8000e74 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fc94 	bl	8000e74 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e184      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d030      	beq.n	80015d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x2b4>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fc78 	bl	8000e74 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fc74 	bl	8000e74 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e164      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x200>
 80015a6:	e015      	b.n	80015d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_RCC_OscConfig+0x2b4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fc61 	bl	8000e74 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc5d 	bl	8000e74 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e14d      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a0 	beq.w	8001722 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x2b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_RCC_OscConfig+0x2b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_RCC_OscConfig+0x2b8>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fc23 	bl	8000e74 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e011      	b.n	8001656 <HAL_RCC_OscConfig+0x2ce>
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	42470000 	.word	0x42470000
 800163c:	42470e80 	.word	0x42470e80
 8001640:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001644:	f7ff fc16 	bl	8000e74 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e106      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b85      	ldr	r3, [pc, #532]	; (800186c <HAL_RCC_OscConfig+0x4e4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x2f0>
 800166a:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a80      	ldr	r2, [pc, #512]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x32a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x312>
 8001680:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a7a      	ldr	r2, [pc, #488]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b78      	ldr	r3, [pc, #480]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a77      	ldr	r2, [pc, #476]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x32a>
 800169a:	4b75      	ldr	r3, [pc, #468]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a74      	ldr	r2, [pc, #464]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b72      	ldr	r3, [pc, #456]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a71      	ldr	r2, [pc, #452]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fbdb 	bl	8000e74 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fbd7 	bl	8000e74 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0c5      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b65      	ldr	r3, [pc, #404]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x33a>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbc5 	bl	8000e74 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fbc1 	bl	8000e74 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0af      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b5a      	ldr	r3, [pc, #360]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a55      	ldr	r2, [pc, #340]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 809b 	beq.w	8001862 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d05c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d141      	bne.n	80017c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_RCC_OscConfig+0x4ec>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb95 	bl	8000e74 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb91 	bl	8000e74 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e081      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	019b      	lsls	r3, r3, #6
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	4937      	ldr	r1, [pc, #220]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001796:	4b37      	ldr	r3, [pc, #220]	; (8001874 <HAL_RCC_OscConfig+0x4ec>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fb6a 	bl	8000e74 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fb66 	bl	8000e74 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e056      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x41c>
 80017c2:	e04e      	b.n	8001862 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <HAL_RCC_OscConfig+0x4ec>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb53 	bl	8000e74 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fb4f 	bl	8000e74 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e03f      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x44a>
 80017f0:	e037      	b.n	8001862 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e032      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <HAL_RCC_OscConfig+0x4e8>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d028      	beq.n	800185e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d121      	bne.n	800185e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d11a      	bne.n	800185e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800182e:	4013      	ands	r3, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001834:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001836:	4293      	cmp	r3, r2
 8001838:	d111      	bne.n	800185e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	3b01      	subs	r3, #1
 8001848:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d107      	bne.n	800185e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800185a:	429a      	cmp	r2, r3
 800185c:	d001      	beq.n	8001862 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40007000 	.word	0x40007000
 8001870:	40023800 	.word	0x40023800
 8001874:	42470060 	.word	0x42470060

08001878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0cc      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b68      	ldr	r3, [pc, #416]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d90c      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b50      	ldr	r3, [pc, #320]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	494d      	ldr	r1, [pc, #308]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d044      	beq.n	8001998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d119      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e07f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d003      	beq.n	8001936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001932:	2b03      	cmp	r3, #3
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b3f      	ldr	r3, [pc, #252]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e06f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e067      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4934      	ldr	r1, [pc, #208]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7ff fa84 	bl	8000e74 <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff fa80 	bl	8000e74 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e04f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b2b      	ldr	r3, [pc, #172]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d20c      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e032      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4916      	ldr	r1, [pc, #88]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	490e      	ldr	r1, [pc, #56]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fe:	f000 f821 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	490a      	ldr	r1, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	5ccb      	ldrb	r3, [r1, r3]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f87a 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00
 8001a34:	40023800 	.word	0x40023800
 8001a38:	08008384 	.word	0x08008384
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000004 	.word	0x20000004

08001a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a48:	b084      	sub	sp, #16
 8001a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a5c:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d00d      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x40>
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	f200 80bd 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x34>
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a76:	e0b7      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b61      	ldr	r3, [pc, #388]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a7a:	60bb      	str	r3, [r7, #8]
       break;
 8001a7c:	e0b7      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7e:	4b61      	ldr	r3, [pc, #388]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a80:	60bb      	str	r3, [r7, #8]
      break;
 8001a82:	e0b4      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a84:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8e:	4b5b      	ldr	r3, [pc, #364]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d04d      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b58      	ldr	r3, [pc, #352]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	ea02 0800 	and.w	r8, r2, r0
 8001ab2:	ea03 0901 	and.w	r9, r3, r1
 8001ab6:	4640      	mov	r0, r8
 8001ab8:	4649      	mov	r1, r9
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	f04f 0300 	mov.w	r3, #0
 8001ac2:	014b      	lsls	r3, r1, #5
 8001ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ac8:	0142      	lsls	r2, r0, #5
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	ebb0 0008 	subs.w	r0, r0, r8
 8001ad2:	eb61 0109 	sbc.w	r1, r1, r9
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	018b      	lsls	r3, r1, #6
 8001ae0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ae4:	0182      	lsls	r2, r0, #6
 8001ae6:	1a12      	subs	r2, r2, r0
 8001ae8:	eb63 0301 	sbc.w	r3, r3, r1
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	00d9      	lsls	r1, r3, #3
 8001af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001afa:	00d0      	lsls	r0, r2, #3
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	eb12 0208 	adds.w	r2, r2, r8
 8001b04:	eb43 0309 	adc.w	r3, r3, r9
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0259      	lsls	r1, r3, #9
 8001b12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001b16:	0250      	lsls	r0, r2, #9
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f04f 0300 	mov.w	r3, #0
 8001b28:	f7fe fbfa 	bl	8000320 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	e04a      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b46:	f04f 0100 	mov.w	r1, #0
 8001b4a:	ea02 0400 	and.w	r4, r2, r0
 8001b4e:	ea03 0501 	and.w	r5, r3, r1
 8001b52:	4620      	mov	r0, r4
 8001b54:	4629      	mov	r1, r5
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	014b      	lsls	r3, r1, #5
 8001b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b64:	0142      	lsls	r2, r0, #5
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	1b00      	subs	r0, r0, r4
 8001b6c:	eb61 0105 	sbc.w	r1, r1, r5
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	018b      	lsls	r3, r1, #6
 8001b7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b7e:	0182      	lsls	r2, r0, #6
 8001b80:	1a12      	subs	r2, r2, r0
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	00d9      	lsls	r1, r3, #3
 8001b90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b94:	00d0      	lsls	r0, r2, #3
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	1912      	adds	r2, r2, r4
 8001b9c:	eb45 0303 	adc.w	r3, r5, r3
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	f04f 0100 	mov.w	r1, #0
 8001ba8:	0299      	lsls	r1, r3, #10
 8001baa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001bae:	0290      	lsls	r0, r2, #10
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	f7fe fbae 	bl	8000320 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	60bb      	str	r3, [r7, #8]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bea:	60bb      	str	r3, [r7, #8]
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	68bb      	ldr	r3, [r7, #8]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	007a1200 	.word	0x007a1200

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	; (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	08008394 	.word	0x08008394

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	; (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	08008394 	.word	0x08008394

08001c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b07      	ldr	r3, [pc, #28]	; (8001cd0 <HAL_RCC_GetClockConfig+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f839 	bl	8001d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 f9d8 	bl	80020c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e04e      	b.n	8001e3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d022      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d01d      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d018      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1e      	ldr	r2, [pc, #120]	; (8001e54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00e      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d009      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d004      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d111      	bne.n	8001e2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d010      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e2a:	e007      	b.n	8001e3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40010000 	.word	0x40010000
 8001e50:	40000400 	.word	0x40000400
 8001e54:	40000800 	.word	0x40000800
 8001e58:	40000c00 	.word	0x40000c00
 8001e5c:	40010400 	.word	0x40010400
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40001800 	.word	0x40001800

08001e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d122      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d11b      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0202 	mvn.w	r2, #2
 8001e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 f8ee 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001eb0:	e005      	b.n	8001ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8e0 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8f1 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d122      	bne.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0204 	mvn.w	r2, #4
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2202      	movs	r2, #2
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f8c4 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8b6 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8c7 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0208 	mvn.w	r2, #8
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f89a 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f88c 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f89d 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b10      	cmp	r3, #16
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0210 	mvn.w	r2, #16
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2208      	movs	r2, #8
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f870 	bl	800208c <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f862 	bl	8002078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f873 	bl	80020a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10e      	bne.n	8001fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0201 	mvn.w	r2, #1
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fcd6 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b80      	cmp	r3, #128	; 0x80
 8001ff8:	d10e      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d107      	bne.n	8002018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f902 	bl	800221c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d10e      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b40      	cmp	r3, #64	; 0x40
 8002032:	d107      	bne.n	8002044 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f838 	bl	80020b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b20      	cmp	r3, #32
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0320 	and.w	r3, r3, #32
 800205c:	2b20      	cmp	r3, #32
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0220 	mvn.w	r2, #32
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8cc 	bl	8002208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a40      	ldr	r2, [pc, #256]	; (80021dc <TIM_Base_SetConfig+0x114>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d013      	beq.n	8002108 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d00f      	beq.n	8002108 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3d      	ldr	r2, [pc, #244]	; (80021e0 <TIM_Base_SetConfig+0x118>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00b      	beq.n	8002108 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3c      	ldr	r2, [pc, #240]	; (80021e4 <TIM_Base_SetConfig+0x11c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d007      	beq.n	8002108 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a3b      	ldr	r2, [pc, #236]	; (80021e8 <TIM_Base_SetConfig+0x120>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d003      	beq.n	8002108 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a3a      	ldr	r2, [pc, #232]	; (80021ec <TIM_Base_SetConfig+0x124>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d108      	bne.n	800211a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800210e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2f      	ldr	r2, [pc, #188]	; (80021dc <TIM_Base_SetConfig+0x114>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d02b      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002128:	d027      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <TIM_Base_SetConfig+0x118>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d023      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <TIM_Base_SetConfig+0x11c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01f      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2a      	ldr	r2, [pc, #168]	; (80021e8 <TIM_Base_SetConfig+0x120>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d01b      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a29      	ldr	r2, [pc, #164]	; (80021ec <TIM_Base_SetConfig+0x124>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d017      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a28      	ldr	r2, [pc, #160]	; (80021f0 <TIM_Base_SetConfig+0x128>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a27      	ldr	r2, [pc, #156]	; (80021f4 <TIM_Base_SetConfig+0x12c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00f      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a26      	ldr	r2, [pc, #152]	; (80021f8 <TIM_Base_SetConfig+0x130>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d00b      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a25      	ldr	r2, [pc, #148]	; (80021fc <TIM_Base_SetConfig+0x134>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d007      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a24      	ldr	r2, [pc, #144]	; (8002200 <TIM_Base_SetConfig+0x138>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d003      	beq.n	800217a <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <TIM_Base_SetConfig+0x13c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d108      	bne.n	800218c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4313      	orrs	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <TIM_Base_SetConfig+0x114>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <TIM_Base_SetConfig+0xf8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a0c      	ldr	r2, [pc, #48]	; (80021ec <TIM_Base_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	691a      	ldr	r2, [r3, #16]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	615a      	str	r2, [r3, #20]
}
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40010000 	.word	0x40010000
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	40010400 	.word	0x40010400
 80021f0:	40014000 	.word	0x40014000
 80021f4:	40014400 	.word	0x40014400
 80021f8:	40014800 	.word	0x40014800
 80021fc:	40001800 	.word	0x40001800
 8002200:	40001c00 	.word	0x40001c00
 8002204:	40002000 	.word	0x40002000

08002208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e03f      	b.n	80022c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fbde 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f905 	bl	8002484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b08a      	sub	sp, #40	; 0x28
 80022ce:	af02      	add	r7, sp, #8
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	4613      	mov	r3, r2
 80022d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d17c      	bne.n	80023e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <HAL_UART_Transmit+0x2c>
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e075      	b.n	80023e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_UART_Transmit+0x3e>
 8002304:	2302      	movs	r3, #2
 8002306:	e06e      	b.n	80023e6 <HAL_UART_Transmit+0x11c>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2221      	movs	r2, #33	; 0x21
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231e:	f7fe fda9 	bl	8000e74 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002338:	d108      	bne.n	800234c <HAL_UART_Transmit+0x82>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d104      	bne.n	800234c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e003      	b.n	8002354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800235c:	e02a      	b.n	80023b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f840 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e036      	b.n	80023e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	3302      	adds	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e007      	b.n	80023a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	781a      	ldrb	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	3301      	adds	r3, #1
 80023a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1cf      	bne.n	800235e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2200      	movs	r2, #0
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f810 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fe:	e02c      	b.n	800245a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d028      	beq.n	800245a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <UART_WaitOnFlagUntilTimeout+0x30>
 800240e:	f7fe fd31 	bl	8000e74 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	429a      	cmp	r2, r3
 800241c:	d21d      	bcs.n	800245a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800242c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0201 	bic.w	r2, r2, #1
 800243c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e00f      	b.n	800247a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4013      	ands	r3, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	429a      	cmp	r2, r3
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	429a      	cmp	r2, r3
 8002476:	d0c3      	beq.n	8002400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002488:	b09f      	sub	sp, #124	; 0x7c
 800248a:	af00      	add	r7, sp, #0
 800248c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	68d9      	ldr	r1, [r3, #12]
 800249c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	ea40 0301 	orr.w	r3, r0, r1
 80024a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80024be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024c8:	f021 010c 	bic.w	r1, r1, #12
 80024cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024d2:	430b      	orrs	r3, r1
 80024d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e2:	6999      	ldr	r1, [r3, #24]
 80024e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	ea40 0301 	orr.w	r3, r0, r1
 80024ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4bc5      	ldr	r3, [pc, #788]	; (8002808 <UART_SetConfig+0x384>)
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d004      	beq.n	8002502 <UART_SetConfig+0x7e>
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4bc3      	ldr	r3, [pc, #780]	; (800280c <UART_SetConfig+0x388>)
 80024fe:	429a      	cmp	r2, r3
 8002500:	d103      	bne.n	800250a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002502:	f7ff fba1 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002506:	6778      	str	r0, [r7, #116]	; 0x74
 8002508:	e002      	b.n	8002510 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800250a:	f7ff fb89 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 800250e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002518:	f040 80b6 	bne.w	8002688 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800251c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251e:	461c      	mov	r4, r3
 8002520:	f04f 0500 	mov.w	r5, #0
 8002524:	4622      	mov	r2, r4
 8002526:	462b      	mov	r3, r5
 8002528:	1891      	adds	r1, r2, r2
 800252a:	6439      	str	r1, [r7, #64]	; 0x40
 800252c:	415b      	adcs	r3, r3
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
 8002530:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002534:	1912      	adds	r2, r2, r4
 8002536:	eb45 0303 	adc.w	r3, r5, r3
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	00d9      	lsls	r1, r3, #3
 8002544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002548:	00d0      	lsls	r0, r2, #3
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	1911      	adds	r1, r2, r4
 8002550:	6639      	str	r1, [r7, #96]	; 0x60
 8002552:	416b      	adcs	r3, r5
 8002554:	667b      	str	r3, [r7, #100]	; 0x64
 8002556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	461a      	mov	r2, r3
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	1891      	adds	r1, r2, r2
 8002562:	63b9      	str	r1, [r7, #56]	; 0x38
 8002564:	415b      	adcs	r3, r3
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800256c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002570:	f7fd fed6 	bl	8000320 <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4ba5      	ldr	r3, [pc, #660]	; (8002810 <UART_SetConfig+0x38c>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011e      	lsls	r6, r3, #4
 8002582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002584:	461c      	mov	r4, r3
 8002586:	f04f 0500 	mov.w	r5, #0
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	1891      	adds	r1, r2, r2
 8002590:	6339      	str	r1, [r7, #48]	; 0x30
 8002592:	415b      	adcs	r3, r3
 8002594:	637b      	str	r3, [r7, #52]	; 0x34
 8002596:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800259a:	1912      	adds	r2, r2, r4
 800259c:	eb45 0303 	adc.w	r3, r5, r3
 80025a0:	f04f 0000 	mov.w	r0, #0
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	00d9      	lsls	r1, r3, #3
 80025aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025ae:	00d0      	lsls	r0, r2, #3
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	1911      	adds	r1, r2, r4
 80025b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80025b8:	416b      	adcs	r3, r5
 80025ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	461a      	mov	r2, r3
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	1891      	adds	r1, r2, r2
 80025c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80025ca:	415b      	adcs	r3, r3
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025d6:	f7fd fea3 	bl	8000320 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4b8c      	ldr	r3, [pc, #560]	; (8002810 <UART_SetConfig+0x38c>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	; 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	4a87      	ldr	r2, [pc, #540]	; (8002810 <UART_SetConfig+0x38c>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002600:	441e      	add	r6, r3
 8002602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002604:	4618      	mov	r0, r3
 8002606:	f04f 0100 	mov.w	r1, #0
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	1894      	adds	r4, r2, r2
 8002610:	623c      	str	r4, [r7, #32]
 8002612:	415b      	adcs	r3, r3
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
 8002616:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800261a:	1812      	adds	r2, r2, r0
 800261c:	eb41 0303 	adc.w	r3, r1, r3
 8002620:	f04f 0400 	mov.w	r4, #0
 8002624:	f04f 0500 	mov.w	r5, #0
 8002628:	00dd      	lsls	r5, r3, #3
 800262a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800262e:	00d4      	lsls	r4, r2, #3
 8002630:	4622      	mov	r2, r4
 8002632:	462b      	mov	r3, r5
 8002634:	1814      	adds	r4, r2, r0
 8002636:	653c      	str	r4, [r7, #80]	; 0x50
 8002638:	414b      	adcs	r3, r1
 800263a:	657b      	str	r3, [r7, #84]	; 0x54
 800263c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	461a      	mov	r2, r3
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	1891      	adds	r1, r2, r2
 8002648:	61b9      	str	r1, [r7, #24]
 800264a:	415b      	adcs	r3, r3
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002652:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002656:	f7fd fe63 	bl	8000320 <__aeabi_uldivmod>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4b6c      	ldr	r3, [pc, #432]	; (8002810 <UART_SetConfig+0x38c>)
 8002660:	fba3 1302 	umull	r1, r3, r3, r2
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	2164      	movs	r1, #100	; 0x64
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	3332      	adds	r3, #50	; 0x32
 8002672:	4a67      	ldr	r2, [pc, #412]	; (8002810 <UART_SetConfig+0x38c>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	095b      	lsrs	r3, r3, #5
 800267a:	f003 0207 	and.w	r2, r3, #7
 800267e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4432      	add	r2, r6
 8002684:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002686:	e0b9      	b.n	80027fc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268a:	461c      	mov	r4, r3
 800268c:	f04f 0500 	mov.w	r5, #0
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	1891      	adds	r1, r2, r2
 8002696:	6139      	str	r1, [r7, #16]
 8002698:	415b      	adcs	r3, r3
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80026a0:	1912      	adds	r2, r2, r4
 80026a2:	eb45 0303 	adc.w	r3, r5, r3
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	00d9      	lsls	r1, r3, #3
 80026b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026b4:	00d0      	lsls	r0, r2, #3
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	eb12 0804 	adds.w	r8, r2, r4
 80026be:	eb43 0905 	adc.w	r9, r3, r5
 80026c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	008b      	lsls	r3, r1, #2
 80026d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026da:	0082      	lsls	r2, r0, #2
 80026dc:	4640      	mov	r0, r8
 80026de:	4649      	mov	r1, r9
 80026e0:	f7fd fe1e 	bl	8000320 <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4b49      	ldr	r3, [pc, #292]	; (8002810 <UART_SetConfig+0x38c>)
 80026ea:	fba3 2302 	umull	r2, r3, r3, r2
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	011e      	lsls	r6, r3, #4
 80026f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f4:	4618      	mov	r0, r3
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	1894      	adds	r4, r2, r2
 8002700:	60bc      	str	r4, [r7, #8]
 8002702:	415b      	adcs	r3, r3
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800270a:	1812      	adds	r2, r2, r0
 800270c:	eb41 0303 	adc.w	r3, r1, r3
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	f04f 0500 	mov.w	r5, #0
 8002718:	00dd      	lsls	r5, r3, #3
 800271a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800271e:	00d4      	lsls	r4, r2, #3
 8002720:	4622      	mov	r2, r4
 8002722:	462b      	mov	r3, r5
 8002724:	1814      	adds	r4, r2, r0
 8002726:	64bc      	str	r4, [r7, #72]	; 0x48
 8002728:	414b      	adcs	r3, r1
 800272a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	008b      	lsls	r3, r1, #2
 8002740:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002744:	0082      	lsls	r2, r0, #2
 8002746:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800274a:	f7fd fde9 	bl	8000320 <__aeabi_uldivmod>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <UART_SetConfig+0x38c>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2164      	movs	r1, #100	; 0x64
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	4a2a      	ldr	r2, [pc, #168]	; (8002810 <UART_SetConfig+0x38c>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002772:	441e      	add	r6, r3
 8002774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002776:	4618      	mov	r0, r3
 8002778:	f04f 0100 	mov.w	r1, #0
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	1894      	adds	r4, r2, r2
 8002782:	603c      	str	r4, [r7, #0]
 8002784:	415b      	adcs	r3, r3
 8002786:	607b      	str	r3, [r7, #4]
 8002788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278c:	1812      	adds	r2, r2, r0
 800278e:	eb41 0303 	adc.w	r3, r1, r3
 8002792:	f04f 0400 	mov.w	r4, #0
 8002796:	f04f 0500 	mov.w	r5, #0
 800279a:	00dd      	lsls	r5, r3, #3
 800279c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027a0:	00d4      	lsls	r4, r2, #3
 80027a2:	4622      	mov	r2, r4
 80027a4:	462b      	mov	r3, r5
 80027a6:	eb12 0a00 	adds.w	sl, r2, r0
 80027aa:	eb43 0b01 	adc.w	fp, r3, r1
 80027ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	008b      	lsls	r3, r1, #2
 80027c2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027c6:	0082      	lsls	r2, r0, #2
 80027c8:	4650      	mov	r0, sl
 80027ca:	4659      	mov	r1, fp
 80027cc:	f7fd fda8 	bl	8000320 <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <UART_SetConfig+0x38c>)
 80027d6:	fba3 1302 	umull	r1, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2164      	movs	r1, #100	; 0x64
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	3332      	adds	r3, #50	; 0x32
 80027e8:	4a09      	ldr	r2, [pc, #36]	; (8002810 <UART_SetConfig+0x38c>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4432      	add	r2, r6
 80027fa:	609a      	str	r2, [r3, #8]
}
 80027fc:	bf00      	nop
 80027fe:	377c      	adds	r7, #124	; 0x7c
 8002800:	46bd      	mov	sp, r7
 8002802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002806:	bf00      	nop
 8002808:	40011000 	.word	0x40011000
 800280c:	40011400 	.word	0x40011400
 8002810:	51eb851f 	.word	0x51eb851f

08002814 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f103 0208 	add.w	r2, r3, #8
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f103 0208 	add.w	r2, r3, #8
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f103 0208 	add.w	r2, r3, #8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	601a      	str	r2, [r3, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d103      	bne.n	80028d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	e00c      	b.n	80028f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3308      	adds	r3, #8
 80028da:	60fb      	str	r3, [r7, #12]
 80028dc:	e002      	b.n	80028e4 <vListInsert+0x2e>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d2f6      	bcs.n	80028de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6892      	ldr	r2, [r2, #8]
 800293e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6852      	ldr	r2, [r2, #4]
 8002948:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	429a      	cmp	r2, r3
 8002952:	d103      	bne.n	800295c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1e5a      	subs	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80029a2:	bf00      	nop
 80029a4:	e7fe      	b.n	80029a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80029a6:	f002 fae7 	bl	8004f78 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	441a      	add	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d6:	3b01      	subs	r3, #1
 80029d8:	68f9      	ldr	r1, [r7, #12]
 80029da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	441a      	add	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	22ff      	movs	r2, #255	; 0xff
 80029f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d114      	bne.n	8002a26 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01a      	beq.n	8002a3a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3310      	adds	r3, #16
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 fa99 	bl	8003f40 <xTaskRemoveFromEventList>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <xQueueGenericReset+0xcc>)
 8002a16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	e009      	b.n	8002a3a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3310      	adds	r3, #16
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fef2 	bl	8002814 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	3324      	adds	r3, #36	; 0x24
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff feed 	bl	8002814 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002a3a:	f002 facd 	bl	8004fd8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	61bb      	str	r3, [r7, #24]
    }
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <xQueueGenericCreate+0x48>
 8002a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d101      	bne.n	8002a98 <xQueueGenericCreate+0x4c>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <xQueueGenericCreate+0x4e>
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10a      	bne.n	8002ab4 <xQueueGenericCreate+0x68>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	617b      	str	r3, [r7, #20]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002aba:	d90a      	bls.n	8002ad2 <xQueueGenericCreate+0x86>
        __asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	613b      	str	r3, [r7, #16]
    }
 8002ace:	bf00      	nop
 8002ad0:	e7fe      	b.n	8002ad0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	3350      	adds	r3, #80	; 0x50
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fb78 	bl	80051cc <pvPortMalloc>
 8002adc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	3350      	adds	r3, #80	; 0x50
 8002aec:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aee:	79fa      	ldrb	r2, [r7, #7]
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	68b9      	ldr	r1, [r7, #8]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f805 	bl	8002b0a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002b00:	6a3b      	ldr	r3, [r7, #32]
    }
 8002b02:	4618      	mov	r0, r3
 8002b04:	3728      	adds	r7, #40	; 0x28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d103      	bne.n	8002b26 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e002      	b.n	8002b2c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b38:	2101      	movs	r1, #1
 8002b3a:	69b8      	ldr	r0, [r7, #24]
 8002b3c:	f7ff ff1e 	bl	800297c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	68f9      	ldr	r1, [r7, #12]
 8002b4e:	2073      	movs	r0, #115	; 0x73
 8002b50:	f003 faba 	bl	80060c8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b090      	sub	sp, #64	; 0x40
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <xQueueGenericSend+0x32>
        __asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002b8a:	bf00      	nop
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d103      	bne.n	8002b9c <xQueueGenericSend+0x40>
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <xQueueGenericSend+0x44>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <xQueueGenericSend+0x46>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <xQueueGenericSend+0x60>
        __asm volatile
 8002ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002baa:	f383 8811 	msr	BASEPRI, r3
 8002bae:	f3bf 8f6f 	isb	sy
 8002bb2:	f3bf 8f4f 	dsb	sy
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002bb8:	bf00      	nop
 8002bba:	e7fe      	b.n	8002bba <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSend+0x6e>
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <xQueueGenericSend+0x72>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <xQueueGenericSend+0x74>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <xQueueGenericSend+0x8e>
        __asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	623b      	str	r3, [r7, #32]
    }
 8002be6:	bf00      	nop
 8002be8:	e7fe      	b.n	8002be8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bea:	f001 fb4b 	bl	8004284 <xTaskGetSchedulerState>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <xQueueGenericSend+0x9e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <xQueueGenericSend+0xa2>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <xQueueGenericSend+0xa4>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10a      	bne.n	8002c1a <xQueueGenericSend+0xbe>
        __asm volatile
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	61fb      	str	r3, [r7, #28]
    }
 8002c16:	bf00      	nop
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c1a:	f002 f9ad 	bl	8004f78 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <xQueueGenericSend+0xd4>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d136      	bne.n	8002c9e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 ffb0 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	460b      	mov	r3, r1
 8002c42:	4601      	mov	r1, r0
 8002c44:	205a      	movs	r0, #90	; 0x5a
 8002c46:	f003 fab5 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	68b9      	ldr	r1, [r7, #8]
 8002c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c50:	f000 fbcc 	bl	80033ec <prvCopyDataToQueue>
 8002c54:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d010      	beq.n	8002c80 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	3324      	adds	r3, #36	; 0x24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f96c 	bl	8003f40 <xTaskRemoveFromEventList>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d013      	beq.n	8002c96 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002c6e:	4b4d      	ldr	r3, [pc, #308]	; (8002da4 <xQueueGenericSend+0x248>)
 8002c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	e00a      	b.n	8002c96 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <xQueueGenericSend+0x248>)
 8002c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002c96:	f002 f99f 	bl	8004fd8 <vPortExitCritical>
                return pdPASS;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e07d      	b.n	8002d9a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d110      	bne.n	8002cc6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ca4:	f002 f998 	bl	8004fd8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002caa:	4618      	mov	r0, r3
 8002cac:	f003 ff74 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4601      	mov	r1, r0
 8002cbc:	205a      	movs	r0, #90	; 0x5a
 8002cbe:	f003 fa79 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e069      	b.n	8002d9a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d106      	bne.n	8002cda <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f001 f99b 	bl	800400c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cda:	f002 f97d 	bl	8004fd8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cde:	f000 fef9 	bl	8003ad4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ce2:	f002 f949 	bl	8004f78 <vPortEnterCritical>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d103      	bne.n	8002cfc <xQueueGenericSend+0x1a0>
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d103      	bne.n	8002d12 <xQueueGenericSend+0x1b6>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d12:	f002 f961 	bl	8004fd8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d16:	1d3a      	adds	r2, r7, #4
 8002d18:	f107 0314 	add.w	r3, r7, #20
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f98a 	bl	8004038 <xTaskCheckForTimeOut>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d124      	bne.n	8002d74 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2c:	f000 fc56 	bl	80035dc <prvIsQueueFull>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d018      	beq.n	8002d68 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	3310      	adds	r3, #16
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 f8ac 	bl	8003e9c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d46:	f000 fbe1 	bl	800350c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002d4a:	f000 fed1 	bl	8003af0 <xTaskResumeAll>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af62 	bne.w	8002c1a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002d56:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <xQueueGenericSend+0x248>)
 8002d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	e758      	b.n	8002c1a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d6a:	f000 fbcf 	bl	800350c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d6e:	f000 febf 	bl	8003af0 <xTaskResumeAll>
 8002d72:	e752      	b.n	8002c1a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d76:	f000 fbc9 	bl	800350c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d7a:	f000 feb9 	bl	8003af0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 ff09 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4601      	mov	r1, r0
 8002d92:	205a      	movs	r0, #90	; 0x5a
 8002d94:	f003 fa0e 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002d98:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3738      	adds	r7, #56	; 0x38
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000ed04 	.word	0xe000ed04

08002da8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b090      	sub	sp, #64	; 0x40
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <xQueueGenericSendFromISR+0x3c>
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <xQueueGenericSendFromISR+0x40>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <xQueueGenericSendFromISR+0x42>
 8002de8:	2300      	movs	r3, #0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10a      	bne.n	8002e04 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d103      	bne.n	8002e12 <xQueueGenericSendFromISR+0x6a>
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <xQueueGenericSendFromISR+0x6e>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <xQueueGenericSendFromISR+0x70>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
    }
 8002e2e:	bf00      	nop
 8002e30:	e7fe      	b.n	8002e30 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e32:	f002 f98b 	bl	800514c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002e36:	f3ef 8211 	mrs	r2, BASEPRI
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	61fa      	str	r2, [r7, #28]
 8002e4c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e50:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d302      	bcc.n	8002e64 <xQueueGenericSendFromISR+0xbc>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d148      	bne.n	8002ef6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fe8e 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002e7c:	4601      	mov	r1, r0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	461a      	mov	r2, r3
 8002e82:	2060      	movs	r0, #96	; 0x60
 8002e84:	f003 f8c6 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e8e:	f000 faad 	bl	80033ec <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002e92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9a:	d112      	bne.n	8002ec2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d025      	beq.n	8002ef0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 f849 	bl	8003f40 <xTaskRemoveFromEventList>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01d      	beq.n	8002ef0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01a      	beq.n	8002ef0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e016      	b.n	8002ef0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002ec2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec8:	d10a      	bne.n	8002ee0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	617b      	str	r3, [r7, #20]
    }
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	b25a      	sxtb	r2, r3
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ef4:	e00b      	b.n	8002f0e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fe4d 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002efe:	4601      	mov	r1, r0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	461a      	mov	r2, r3
 8002f04:	2060      	movs	r0, #96	; 0x60
 8002f06:	f003 f885 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f18:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3740      	adds	r7, #64	; 0x40
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b08f      	sub	sp, #60	; 0x3c
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <xQueueReceive+0x30>
        __asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	623b      	str	r3, [r7, #32]
    }
 8002f50:	bf00      	nop
 8002f52:	e7fe      	b.n	8002f52 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <xQueueReceive+0x3e>
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <xQueueReceive+0x42>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <xQueueReceive+0x44>
 8002f66:	2300      	movs	r3, #0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10a      	bne.n	8002f82 <xQueueReceive+0x5e>
        __asm volatile
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61fb      	str	r3, [r7, #28]
    }
 8002f7e:	bf00      	nop
 8002f80:	e7fe      	b.n	8002f80 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f82:	f001 f97f 	bl	8004284 <xTaskGetSchedulerState>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <xQueueReceive+0x6e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <xQueueReceive+0x72>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <xQueueReceive+0x74>
 8002f96:	2300      	movs	r3, #0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <xQueueReceive+0x8e>
        __asm volatile
 8002f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	61bb      	str	r3, [r7, #24]
    }
 8002fae:	bf00      	nop
 8002fb0:	e7fe      	b.n	8002fb0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002fb2:	f001 ffe1 	bl	8004f78 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d02f      	beq.n	8003022 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fc6:	f000 fa7b 	bl	80034c0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fde3 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f003 fddf 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	9100      	str	r1, [sp, #0]
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	205c      	movs	r0, #92	; 0x5c
 8002fe6:	f003 f8e5 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	1e5a      	subs	r2, r3, #1
 8002fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	3310      	adds	r3, #16
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 ff9e 	bl	8003f40 <xTaskRemoveFromEventList>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800300a:	4b4d      	ldr	r3, [pc, #308]	; (8003140 <xQueueReceive+0x21c>)
 800300c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800301a:	f001 ffdd 	bl	8004fd8 <vPortExitCritical>
                return pdPASS;
 800301e:	2301      	movs	r3, #1
 8003020:	e08a      	b.n	8003138 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d113      	bne.n	8003050 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003028:	f001 ffd6 	bl	8004fd8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	4618      	mov	r0, r3
 8003030:	f003 fdb2 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8003034:	4604      	mov	r4, r0
 8003036:	2000      	movs	r0, #0
 8003038:	f003 fdae 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2101      	movs	r1, #1
 8003042:	9100      	str	r1, [sp, #0]
 8003044:	4621      	mov	r1, r4
 8003046:	205c      	movs	r0, #92	; 0x5c
 8003048:	f003 f8b4 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800304c:	2300      	movs	r3, #0
 800304e:	e073      	b.n	8003138 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	4618      	mov	r0, r3
 800305c:	f000 ffd6 	bl	800400c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003060:	2301      	movs	r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003064:	f001 ffb8 	bl	8004fd8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003068:	f000 fd34 	bl	8003ad4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800306c:	f001 ff84 	bl	8004f78 <vPortEnterCritical>
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003076:	b25b      	sxtb	r3, r3
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d103      	bne.n	8003086 <xQueueReceive+0x162>
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308c:	b25b      	sxtb	r3, r3
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d103      	bne.n	800309c <xQueueReceive+0x178>
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800309c:	f001 ff9c 	bl	8004fd8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030a0:	1d3a      	adds	r2, r7, #4
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	4611      	mov	r1, r2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 ffc5 	bl	8004038 <xTaskCheckForTimeOut>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d124      	bne.n	80030fe <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b6:	f000 fa7b 	bl	80035b0 <prvIsQueueEmpty>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d018      	beq.n	80030f2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	3324      	adds	r3, #36	; 0x24
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fee7 	bl	8003e9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d0:	f000 fa1c 	bl	800350c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030d4:	f000 fd0c 	bl	8003af0 <xTaskResumeAll>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f47f af69 	bne.w	8002fb2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <xQueueReceive+0x21c>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	e75f      	b.n	8002fb2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80030f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f4:	f000 fa0a 	bl	800350c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030f8:	f000 fcfa 	bl	8003af0 <xTaskResumeAll>
 80030fc:	e759      	b.n	8002fb2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80030fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003100:	f000 fa04 	bl	800350c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003104:	f000 fcf4 	bl	8003af0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310a:	f000 fa51 	bl	80035b0 <prvIsQueueEmpty>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	f43f af4e 	beq.w	8002fb2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	4618      	mov	r0, r3
 800311a:	f003 fd3d 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 800311e:	4604      	mov	r4, r0
 8003120:	2000      	movs	r0, #0
 8003122:	f003 fd39 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8003126:	4602      	mov	r2, r0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2101      	movs	r1, #1
 800312c:	9100      	str	r1, [sp, #0]
 800312e:	4621      	mov	r1, r4
 8003130:	205c      	movs	r0, #92	; 0x5c
 8003132:	f003 f83f 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8003136:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003138:	4618      	mov	r0, r3
 800313a:	3734      	adds	r7, #52	; 0x34
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}
 8003140:	e000ed04 	.word	0xe000ed04

08003144 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b091      	sub	sp, #68	; 0x44
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003156:	2300      	movs	r3, #0
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10a      	bne.n	8003176 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	623b      	str	r3, [r7, #32]
    }
 8003172:	bf00      	nop
 8003174:	e7fe      	b.n	8003174 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <xQueueSemaphoreTake+0x50>
        __asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	61fb      	str	r3, [r7, #28]
    }
 8003190:	bf00      	nop
 8003192:	e7fe      	b.n	8003192 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003194:	f001 f876 	bl	8004284 <xTaskGetSchedulerState>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <xQueueSemaphoreTake+0x60>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <xQueueSemaphoreTake+0x64>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <xQueueSemaphoreTake+0x66>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <xQueueSemaphoreTake+0x80>
        __asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	61bb      	str	r3, [r7, #24]
    }
 80031c0:	bf00      	nop
 80031c2:	e7fe      	b.n	80031c2 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80031c4:	f001 fed8 	bl	8004f78 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d034      	beq.n	800323e <xQueueSemaphoreTake+0xfa>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	4618      	mov	r0, r3
 80031d8:	f003 fcde 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 80031dc:	4604      	mov	r4, r0
 80031de:	2000      	movs	r0, #0
 80031e0:	f003 fcda 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 80031e4:	4602      	mov	r2, r0
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2101      	movs	r1, #1
 80031ea:	9100      	str	r1, [sp, #0]
 80031ec:	4621      	mov	r1, r4
 80031ee:	205c      	movs	r0, #92	; 0x5c
 80031f0:	f002 ffe0 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	1e5a      	subs	r2, r3, #1
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d104      	bne.n	800320e <xQueueSemaphoreTake+0xca>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003204:	f001 f9ee 	bl	80045e4 <pvTaskIncrementMutexHeldCount>
 8003208:	4602      	mov	r2, r0
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800320e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00f      	beq.n	8003236 <xQueueSemaphoreTake+0xf2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	3310      	adds	r3, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fe90 	bl	8003f40 <xTaskRemoveFromEventList>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d007      	beq.n	8003236 <xQueueSemaphoreTake+0xf2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003226:	4b64      	ldr	r3, [pc, #400]	; (80033b8 <xQueueSemaphoreTake+0x274>)
 8003228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003236:	f001 fecf 	bl	8004fd8 <vPortExitCritical>
                return pdPASS;
 800323a:	2301      	movs	r3, #1
 800323c:	e0b7      	b.n	80033ae <xQueueSemaphoreTake+0x26a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d121      	bne.n	8003288 <xQueueSemaphoreTake+0x144>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <xQueueSemaphoreTake+0x11c>
        __asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	617b      	str	r3, [r7, #20]
    }
 800325c:	bf00      	nop
 800325e:	e7fe      	b.n	800325e <xQueueSemaphoreTake+0x11a>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003260:	f001 feba 	bl	8004fd8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fc96 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 800326c:	4604      	mov	r4, r0
 800326e:	2000      	movs	r0, #0
 8003270:	f003 fc92 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8003274:	4602      	mov	r2, r0
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2101      	movs	r1, #1
 800327a:	9100      	str	r1, [sp, #0]
 800327c:	4621      	mov	r1, r4
 800327e:	205c      	movs	r0, #92	; 0x5c
 8003280:	f002 ff98 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8003284:	2300      	movs	r3, #0
 8003286:	e092      	b.n	80033ae <xQueueSemaphoreTake+0x26a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <xQueueSemaphoreTake+0x158>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	4618      	mov	r0, r3
 8003294:	f000 feba 	bl	800400c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003298:	2301      	movs	r3, #1
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800329c:	f001 fe9c 	bl	8004fd8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80032a0:	f000 fc18 	bl	8003ad4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80032a4:	f001 fe68 	bl	8004f78 <vPortEnterCritical>
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032ae:	b25b      	sxtb	r3, r3
 80032b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b4:	d103      	bne.n	80032be <xQueueSemaphoreTake+0x17a>
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d103      	bne.n	80032d4 <xQueueSemaphoreTake+0x190>
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032d4:	f001 fe80 	bl	8004fd8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032d8:	463a      	mov	r2, r7
 80032da:	f107 030c 	add.w	r3, r7, #12
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fea9 	bl	8004038 <xTaskCheckForTimeOut>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d132      	bne.n	8003352 <xQueueSemaphoreTake+0x20e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032ee:	f000 f95f 	bl	80035b0 <prvIsQueueEmpty>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d026      	beq.n	8003346 <xQueueSemaphoreTake+0x202>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d109      	bne.n	8003314 <xQueueSemaphoreTake+0x1d0>
                        {
                            taskENTER_CRITICAL();
 8003300:	f001 fe3a 	bl	8004f78 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 ffd9 	bl	80042c0 <xTaskPriorityInherit>
 800330e:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003310:	f001 fe62 	bl	8004fd8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	3324      	adds	r3, #36	; 0x24
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f000 fdbd 	bl	8003e9c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003324:	f000 f8f2 	bl	800350c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003328:	f000 fbe2 	bl	8003af0 <xTaskResumeAll>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	f47f af48 	bne.w	80031c4 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8003334:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <xQueueSemaphoreTake+0x274>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	e73e      	b.n	80031c4 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003348:	f000 f8e0 	bl	800350c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800334c:	f000 fbd0 	bl	8003af0 <xTaskResumeAll>
 8003350:	e738      	b.n	80031c4 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003354:	f000 f8da 	bl	800350c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003358:	f000 fbca 	bl	8003af0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800335c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800335e:	f000 f927 	bl	80035b0 <prvIsQueueEmpty>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f43f af2d 	beq.w	80031c4 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <xQueueSemaphoreTake+0x248>
                        {
                            taskENTER_CRITICAL();
 8003370:	f001 fe02 	bl	8004f78 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003376:	f000 f821 	bl	80033bc <prvGetDisinheritPriorityAfterTimeout>
 800337a:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003382:	4618      	mov	r0, r3
 8003384:	f001 f896 	bl	80044b4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003388:	f001 fe26 	bl	8004fd8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fc02 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8003394:	4604      	mov	r4, r0
 8003396:	2000      	movs	r0, #0
 8003398:	f003 fbfe 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 800339c:	4602      	mov	r2, r0
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2101      	movs	r1, #1
 80033a2:	9100      	str	r1, [sp, #0]
 80033a4:	4621      	mov	r1, r4
 80033a6:	205c      	movs	r0, #92	; 0x5c
 80033a8:	f002 ff04 	bl	80061b4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80033ac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	373c      	adds	r7, #60	; 0x3c
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f1c3 0305 	rsb	r3, r3, #5
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e001      	b.n	80033de <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80033de:	68fb      	ldr	r3, [r7, #12]
    }
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003400:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d14d      	bne.n	80034ae <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 ffcc 	bl	80043b4 <xTaskPriorityDisinherit>
 800341c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	e043      	b.n	80034ae <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d119      	bne.n	8003460 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6858      	ldr	r0, [r3, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	461a      	mov	r2, r3
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	f003 fd40 	bl	8006ebc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	441a      	add	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	429a      	cmp	r2, r3
 8003454:	d32b      	bcc.n	80034ae <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	e026      	b.n	80034ae <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68d8      	ldr	r0, [r3, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	461a      	mov	r2, r3
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	f003 fd26 	bl	8006ebc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	425b      	negs	r3, r3
 800347a:	441a      	add	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d207      	bcs.n	800349c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	425b      	negs	r3, r3
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d105      	bne.n	80034ae <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1c5a      	adds	r2, r3, #1
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80034b6:	697b      	ldr	r3, [r7, #20]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d018      	beq.n	8003504 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	441a      	add	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d303      	bcc.n	80034f4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68d9      	ldr	r1, [r3, #12]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	461a      	mov	r2, r3
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f003 fcdc 	bl	8006ebc <memcpy>
    }
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003514:	f001 fd30 	bl	8004f78 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800351e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003520:	e011      	b.n	8003546 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d012      	beq.n	8003550 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3324      	adds	r3, #36	; 0x24
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fd06 	bl	8003f40 <xTaskRemoveFromEventList>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800353a:	f000 fde3 	bl	8004104 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	3b01      	subs	r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	dce9      	bgt.n	8003522 <prvUnlockQueue+0x16>
 800354e:	e000      	b.n	8003552 <prvUnlockQueue+0x46>
                        break;
 8003550:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	22ff      	movs	r2, #255	; 0xff
 8003556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800355a:	f001 fd3d 	bl	8004fd8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800355e:	f001 fd0b 	bl	8004f78 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003568:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800356a:	e011      	b.n	8003590 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3310      	adds	r3, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fce1 	bl	8003f40 <xTaskRemoveFromEventList>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003584:	f000 fdbe 	bl	8004104 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003588:	7bbb      	ldrb	r3, [r7, #14]
 800358a:	3b01      	subs	r3, #1
 800358c:	b2db      	uxtb	r3, r3
 800358e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003594:	2b00      	cmp	r3, #0
 8003596:	dce9      	bgt.n	800356c <prvUnlockQueue+0x60>
 8003598:	e000      	b.n	800359c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800359a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	22ff      	movs	r2, #255	; 0xff
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80035a4:	f001 fd18 	bl	8004fd8 <vPortExitCritical>
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035b8:	f001 fcde 	bl	8004f78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	e001      	b.n	80035ce <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035ce:	f001 fd03 	bl	8004fd8 <vPortExitCritical>

    return xReturn;
 80035d2:	68fb      	ldr	r3, [r7, #12]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80035e4:	f001 fcc8 	bl	8004f78 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d102      	bne.n	80035fa <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	e001      	b.n	80035fe <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80035fe:	f001 fceb 	bl	8004fd8 <vPortExitCritical>

    return xReturn;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e01e      	b.n	800365a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800361c:	4a13      	ldr	r2, [pc, #76]	; (800366c <vQueueAddToRegistry+0x60>)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d115      	bne.n	8003654 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003628:	4910      	ldr	r1, [pc, #64]	; (800366c <vQueueAddToRegistry+0x60>)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8003632:	4a0e      	ldr	r2, [pc, #56]	; (800366c <vQueueAddToRegistry+0x60>)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4413      	add	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f003 faa9 	bl	8006b98 <SEGGER_SYSVIEW_ShrinkId>
 8003646:	4601      	mov	r1, r0
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	2071      	movs	r0, #113	; 0x71
 800364e:	f002 fce1 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8003652:	e006      	b.n	8003662 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3301      	adds	r3, #1
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b07      	cmp	r3, #7
 800365e:	d9dd      	bls.n	800361c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200135a8 	.word	0x200135a8

08003670 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003680:	f001 fc7a 	bl	8004f78 <vPortEnterCritical>
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800368a:	b25b      	sxtb	r3, r3
 800368c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003690:	d103      	bne.n	800369a <vQueueWaitForMessageRestricted+0x2a>
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d103      	bne.n	80036b0 <vQueueWaitForMessageRestricted+0x40>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036b0:	f001 fc92 	bl	8004fd8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3324      	adds	r3, #36	; 0x24
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fc0d 	bl	8003ee4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff1e 	bl	800350c <prvUnlockQueue>
    }
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af04      	add	r7, sp, #16
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 fd6d 	bl	80051cc <pvPortMalloc>
 80036f2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00e      	beq.n	8003718 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036fa:	2058      	movs	r0, #88	; 0x58
 80036fc:	f001 fd66 	bl	80051cc <pvPortMalloc>
 8003700:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	631a      	str	r2, [r3, #48]	; 0x30
 800370e:	e005      	b.n	800371c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003710:	6978      	ldr	r0, [r7, #20]
 8003712:	f001 fe3b 	bl	800538c <vPortFree>
 8003716:	e001      	b.n	800371c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003722:	88fa      	ldrh	r2, [r7, #6]
 8003724:	2300      	movs	r3, #0
 8003726:	9303      	str	r3, [sp, #12]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	9302      	str	r3, [sp, #8]
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f80e 	bl	800375a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800373e:	69f8      	ldr	r0, [r7, #28]
 8003740:	f000 f8a2 	bl	8003888 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003744:	2301      	movs	r3, #1
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e002      	b.n	8003750 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800374a:	f04f 33ff 	mov.w	r3, #4294967295
 800374e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003750:	69bb      	ldr	r3, [r7, #24]
    }
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b088      	sub	sp, #32
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	607a      	str	r2, [r7, #4]
 8003766:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	461a      	mov	r2, r3
 8003772:	21a5      	movs	r1, #165	; 0xa5
 8003774:	f003 fbb0 	bl	8006ed8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003782:	3b01      	subs	r3, #1
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f023 0307 	bic.w	r3, r3, #7
 8003790:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00a      	beq.n	80037b2 <prvInitialiseNewTask+0x58>
        __asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	617b      	str	r3, [r7, #20]
    }
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01f      	beq.n	80037f8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e012      	b.n	80037e4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	7819      	ldrb	r1, [r3, #0]
 80037c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	3334      	adds	r3, #52	; 0x34
 80037ce:	460a      	mov	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	2b09      	cmp	r3, #9
 80037e8:	d9e9      	bls.n	80037be <prvInitialiseNewTask+0x64>
 80037ea:	e000      	b.n	80037ee <prvInitialiseNewTask+0x94>
            {
                break;
 80037ec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037f6:	e003      	b.n	8003800 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	2b04      	cmp	r3, #4
 8003804:	d901      	bls.n	800380a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003806:	2304      	movs	r3, #4
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003814:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800381c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff f817 	bl	8002854 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	3318      	adds	r3, #24
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f812 	bl	8002854 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003834:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	f1c3 0205 	rsb	r2, r3, #5
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003844:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	3350      	adds	r3, #80	; 0x50
 800384a:	2204      	movs	r2, #4
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f003 fb42 	bl	8006ed8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	3354      	adds	r3, #84	; 0x54
 8003858:	2201      	movs	r2, #1
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f003 fb3b 	bl	8006ed8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	68f9      	ldr	r1, [r7, #12]
 8003866:	69b8      	ldr	r0, [r7, #24]
 8003868:	f001 fa5a 	bl	8004d20 <pxPortInitialiseStack>
 800386c:	4602      	mov	r2, r0
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800387e:	bf00      	nop
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003890:	f001 fb72 	bl	8004f78 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003894:	4b3b      	ldr	r3, [pc, #236]	; (8003984 <prvAddNewTaskToReadyList+0xfc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <prvAddNewTaskToReadyList+0xfc>)
 800389c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800389e:	4b3a      	ldr	r3, [pc, #232]	; (8003988 <prvAddNewTaskToReadyList+0x100>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80038a6:	4a38      	ldr	r2, [pc, #224]	; (8003988 <prvAddNewTaskToReadyList+0x100>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038ac:	4b35      	ldr	r3, [pc, #212]	; (8003984 <prvAddNewTaskToReadyList+0xfc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d110      	bne.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80038b4:	f000 fc4c 	bl	8004150 <prvInitialiseTaskLists>
 80038b8:	e00d      	b.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80038ba:	4b34      	ldr	r3, [pc, #208]	; (800398c <prvAddNewTaskToReadyList+0x104>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038c2:	4b31      	ldr	r3, [pc, #196]	; (8003988 <prvAddNewTaskToReadyList+0x100>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d802      	bhi.n	80038d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80038d0:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <prvAddNewTaskToReadyList+0x100>)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80038d6:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <prvAddNewTaskToReadyList+0x108>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	4a2c      	ldr	r2, [pc, #176]	; (8003990 <prvAddNewTaskToReadyList+0x108>)
 80038de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <prvAddNewTaskToReadyList+0x108>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <prvAddNewTaskToReadyList+0x94>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f003 f82b 	bl	800694c <SEGGER_SYSVIEW_OnTaskCreate>
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	461d      	mov	r5, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	461c      	mov	r4, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	1ae3      	subs	r3, r4, r3
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	462b      	mov	r3, r5
 8003918:	f001 fe56 	bl	80055c8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 f898 	bl	8006a54 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003928:	2201      	movs	r2, #1
 800392a:	409a      	lsls	r2, r3
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <prvAddNewTaskToReadyList+0x10c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <prvAddNewTaskToReadyList+0x10c>)
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4a15      	ldr	r2, [pc, #84]	; (8003998 <prvAddNewTaskToReadyList+0x110>)
 8003944:	441a      	add	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3304      	adds	r3, #4
 800394a:	4619      	mov	r1, r3
 800394c:	4610      	mov	r0, r2
 800394e:	f7fe ff8e 	bl	800286e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003952:	f001 fb41 	bl	8004fd8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <prvAddNewTaskToReadyList+0x104>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00e      	beq.n	800397c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <prvAddNewTaskToReadyList+0x100>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	429a      	cmp	r2, r3
 800396a:	d207      	bcs.n	800397c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <prvAddNewTaskToReadyList+0x114>)
 800396e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bdb0      	pop	{r4, r5, r7, pc}
 8003984:	2000026c 	.word	0x2000026c
 8003988:	20000194 	.word	0x20000194
 800398c:	20000278 	.word	0x20000278
 8003990:	20000288 	.word	0x20000288
 8003994:	20000274 	.word	0x20000274
 8003998:	20000198 	.word	0x20000198
 800399c:	e000ed04 	.word	0xe000ed04

080039a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01b      	beq.n	80039ea <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80039b2:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <vTaskDelay+0x68>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <vTaskDelay+0x30>
        __asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60bb      	str	r3, [r7, #8]
    }
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80039d0:	f000 f880 	bl	8003ad4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	2023      	movs	r0, #35	; 0x23
 80039d8:	f002 fae0 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039dc:	2100      	movs	r1, #0
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fe14 	bl	800460c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80039e4:	f000 f884 	bl	8003af0 <xTaskResumeAll>
 80039e8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d107      	bne.n	8003a00 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <vTaskDelay+0x6c>)
 80039f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	f3bf 8f4f 	dsb	sy
 80039fc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000294 	.word	0x20000294
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003a16:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <vTaskStartScheduler+0xa4>)
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2282      	movs	r2, #130	; 0x82
 8003a22:	4925      	ldr	r1, [pc, #148]	; (8003ab8 <vTaskStartScheduler+0xa8>)
 8003a24:	4825      	ldr	r0, [pc, #148]	; (8003abc <vTaskStartScheduler+0xac>)
 8003a26:	f7ff fe57 	bl	80036d8 <xTaskCreate>
 8003a2a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d102      	bne.n	8003a38 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003a32:	f000 fe63 	bl	80046fc <xTimerCreateTimerTask>
 8003a36:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d124      	bne.n	8003a88 <vTaskStartScheduler+0x78>
        __asm volatile
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	60bb      	str	r3, [r7, #8]
    }
 8003a50:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a52:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <vTaskStartScheduler+0xb0>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <vTaskStartScheduler+0xb4>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a60:	4b19      	ldr	r3, [pc, #100]	; (8003ac8 <vTaskStartScheduler+0xb8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <vTaskStartScheduler+0xbc>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <vTaskStartScheduler+0xa4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d102      	bne.n	8003a78 <vTaskStartScheduler+0x68>
 8003a72:	f002 ff4f 	bl	8006914 <SEGGER_SYSVIEW_OnIdle>
 8003a76:	e004      	b.n	8003a82 <vTaskStartScheduler+0x72>
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <vTaskStartScheduler+0xbc>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f002 ffa7 	bl	80069d0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003a82:	f001 f9d7 	bl	8004e34 <xPortStartScheduler>
 8003a86:	e00e      	b.n	8003aa6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	d10a      	bne.n	8003aa6 <vTaskStartScheduler+0x96>
        __asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	607b      	str	r3, [r7, #4]
    }
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <vTaskStartScheduler+0xc0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000290 	.word	0x20000290
 8003ab8:	080082fc 	.word	0x080082fc
 8003abc:	0800411d 	.word	0x0800411d
 8003ac0:	2000028c 	.word	0x2000028c
 8003ac4:	20000278 	.word	0x20000278
 8003ac8:	20000270 	.word	0x20000270
 8003acc:	20000194 	.word	0x20000194
 8003ad0:	2000000c 	.word	0x2000000c

08003ad4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <vTaskSuspendAll+0x18>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3301      	adds	r3, #1
 8003ade:	4a03      	ldr	r2, [pc, #12]	; (8003aec <vTaskSuspendAll+0x18>)
 8003ae0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003ae2:	bf00      	nop
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000294 	.word	0x20000294

08003af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003afe:	4b43      	ldr	r3, [pc, #268]	; (8003c0c <xTaskResumeAll+0x11c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <xTaskResumeAll+0x2c>
        __asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	603b      	str	r3, [r7, #0]
    }
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003b1c:	f001 fa2c 	bl	8004f78 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003b20:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <xTaskResumeAll+0x11c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	4a39      	ldr	r2, [pc, #228]	; (8003c0c <xTaskResumeAll+0x11c>)
 8003b28:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b2a:	4b38      	ldr	r3, [pc, #224]	; (8003c0c <xTaskResumeAll+0x11c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d165      	bne.n	8003bfe <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <xTaskResumeAll+0x120>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d061      	beq.n	8003bfe <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b3a:	e032      	b.n	8003ba2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <xTaskResumeAll+0x124>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3318      	adds	r3, #24
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe feed 	bl	8002928 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fe fee8 	bl	8002928 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f002 ff7a 	bl	8006a54 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	4b2b      	ldr	r3, [pc, #172]	; (8003c18 <xTaskResumeAll+0x128>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	; (8003c18 <xTaskResumeAll+0x128>)
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <xTaskResumeAll+0x12c>)
 8003b80:	441a      	add	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7fe fe70 	bl	800286e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <xTaskResumeAll+0x130>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d302      	bcc.n	8003ba2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003b9c:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <xTaskResumeAll+0x134>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <xTaskResumeAll+0x124>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1c8      	bne.n	8003b3c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003bb0:	f000 fb4c 	bl	800424c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <xTaskResumeAll+0x138>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d010      	beq.n	8003be2 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003bc0:	f000 f846 	bl	8003c50 <xTaskIncrementTick>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8003bca:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <xTaskResumeAll+0x134>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f1      	bne.n	8003bc0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <xTaskResumeAll+0x138>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003be2:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <xTaskResumeAll+0x134>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <xTaskResumeAll+0x13c>)
 8003bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003bfe:	f001 f9eb 	bl	8004fd8 <vPortExitCritical>

    return xAlreadyYielded;
 8003c02:	68bb      	ldr	r3, [r7, #8]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	20000294 	.word	0x20000294
 8003c10:	2000026c 	.word	0x2000026c
 8003c14:	2000022c 	.word	0x2000022c
 8003c18:	20000274 	.word	0x20000274
 8003c1c:	20000198 	.word	0x20000198
 8003c20:	20000194 	.word	0x20000194
 8003c24:	20000280 	.word	0x20000280
 8003c28:	2000027c 	.word	0x2000027c
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <xTaskGetTickCount+0x1c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000270 	.word	0x20000270

08003c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c5a:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <xTaskIncrementTick+0x14c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 8092 	bne.w	8003d88 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c64:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <xTaskIncrementTick+0x150>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c6c:	4a4c      	ldr	r2, [pc, #304]	; (8003da0 <xTaskIncrementTick+0x150>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d120      	bne.n	8003cba <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c78:	4b4a      	ldr	r3, [pc, #296]	; (8003da4 <xTaskIncrementTick+0x154>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <xTaskIncrementTick+0x48>
        __asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	603b      	str	r3, [r7, #0]
    }
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <xTaskIncrementTick+0x46>
 8003c98:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <xTaskIncrementTick+0x154>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	4b42      	ldr	r3, [pc, #264]	; (8003da8 <xTaskIncrementTick+0x158>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a40      	ldr	r2, [pc, #256]	; (8003da4 <xTaskIncrementTick+0x154>)
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	4a40      	ldr	r2, [pc, #256]	; (8003da8 <xTaskIncrementTick+0x158>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	4b3f      	ldr	r3, [pc, #252]	; (8003dac <xTaskIncrementTick+0x15c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a3e      	ldr	r2, [pc, #248]	; (8003dac <xTaskIncrementTick+0x15c>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	f000 fac9 	bl	800424c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <xTaskIncrementTick+0x160>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d34c      	bcc.n	8003d5e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cc4:	4b37      	ldr	r3, [pc, #220]	; (8003da4 <xTaskIncrementTick+0x154>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d104      	bne.n	8003cd8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cce:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <xTaskIncrementTick+0x160>)
 8003cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd4:	601a      	str	r2, [r3, #0]
                    break;
 8003cd6:	e042      	b.n	8003d5e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <xTaskIncrementTick+0x154>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d203      	bcs.n	8003cf8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003cf0:	4a2f      	ldr	r2, [pc, #188]	; (8003db0 <xTaskIncrementTick+0x160>)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cf6:	e032      	b.n	8003d5e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3304      	adds	r3, #4
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fe13 	bl	8002928 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3318      	adds	r3, #24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fe0a 	bl	8002928 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f002 fe9c 	bl	8006a54 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	2201      	movs	r2, #1
 8003d22:	409a      	lsls	r2, r3
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <xTaskIncrementTick+0x164>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <xTaskIncrementTick+0x164>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d32:	4613      	mov	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <xTaskIncrementTick+0x168>)
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4610      	mov	r0, r2
 8003d46:	f7fe fd92 	bl	800286e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <xTaskIncrementTick+0x16c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d3b5      	bcc.n	8003cc4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d5c:	e7b2      	b.n	8003cc4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d5e:	4b17      	ldr	r3, [pc, #92]	; (8003dbc <xTaskIncrementTick+0x16c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4914      	ldr	r1, [pc, #80]	; (8003db8 <xTaskIncrementTick+0x168>)
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d901      	bls.n	8003d7a <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003d76:	2301      	movs	r3, #1
 8003d78:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003d7a:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <xTaskIncrementTick+0x170>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003d82:	2301      	movs	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e004      	b.n	8003d92 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <xTaskIncrementTick+0x174>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <xTaskIncrementTick+0x174>)
 8003d90:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003d92:	697b      	ldr	r3, [r7, #20]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000294 	.word	0x20000294
 8003da0:	20000270 	.word	0x20000270
 8003da4:	20000224 	.word	0x20000224
 8003da8:	20000228 	.word	0x20000228
 8003dac:	20000284 	.word	0x20000284
 8003db0:	2000028c 	.word	0x2000028c
 8003db4:	20000274 	.word	0x20000274
 8003db8:	20000198 	.word	0x20000198
 8003dbc:	20000194 	.word	0x20000194
 8003dc0:	20000280 	.word	0x20000280
 8003dc4:	2000027c 	.word	0x2000027c

08003dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dce:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <vTaskSwitchContext+0xbc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <vTaskSwitchContext+0xc0>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003ddc:	e04d      	b.n	8003e7a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <vTaskSwitchContext+0xc0>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <vTaskSwitchContext+0xc4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	fab3 f383 	clz	r3, r3
 8003df0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003df2:	7afb      	ldrb	r3, [r7, #11]
 8003df4:	f1c3 031f 	rsb	r3, r3, #31
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	4925      	ldr	r1, [pc, #148]	; (8003e90 <vTaskSwitchContext+0xc8>)
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	607b      	str	r3, [r7, #4]
    }
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <vTaskSwitchContext+0x5a>
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <vTaskSwitchContext+0xc8>)
 8003e30:	4413      	add	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	3308      	adds	r3, #8
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d104      	bne.n	8003e54 <vTaskSwitchContext+0x8c>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <vTaskSwitchContext+0xcc>)
 8003e5c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <vTaskSwitchContext+0xcc>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <vTaskSwitchContext+0xd0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d102      	bne.n	8003e70 <vTaskSwitchContext+0xa8>
 8003e6a:	f002 fd53 	bl	8006914 <SEGGER_SYSVIEW_OnIdle>
}
 8003e6e:	e004      	b.n	8003e7a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <vTaskSwitchContext+0xcc>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f002 fdab 	bl	80069d0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000294 	.word	0x20000294
 8003e88:	20000280 	.word	0x20000280
 8003e8c:	20000274 	.word	0x20000274
 8003e90:	20000198 	.word	0x20000198
 8003e94:	20000194 	.word	0x20000194
 8003e98:	20000290 	.word	0x20000290

08003e9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	60fb      	str	r3, [r7, #12]
    }
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <vTaskPlaceOnEventList+0x44>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	4619      	mov	r1, r3
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fe fcf3 	bl	80028b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	6838      	ldr	r0, [r7, #0]
 8003ed4:	f000 fb9a 	bl	800460c <prvAddCurrentTaskToDelayedList>
}
 8003ed8:	bf00      	nop
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000194 	.word	0x20000194

08003ee4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
 8003f06:	617b      	str	r3, [r7, #20]
    }
 8003f08:	bf00      	nop
 8003f0a:	e7fe      	b.n	8003f0a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f0c:	4b0b      	ldr	r3, [pc, #44]	; (8003f3c <vTaskPlaceOnEventListRestricted+0x58>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3318      	adds	r3, #24
 8003f12:	4619      	mov	r1, r3
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7fe fcaa 	bl	800286e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
 8003f24:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003f26:	2024      	movs	r0, #36	; 0x24
 8003f28:	f002 f81a 	bl	8005f60 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	68b8      	ldr	r0, [r7, #8]
 8003f30:	f000 fb6c 	bl	800460c <prvAddCurrentTaskToDelayedList>
    }
 8003f34:	bf00      	nop
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20000194 	.word	0x20000194

08003f40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	60fb      	str	r3, [r7, #12]
    }
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	3318      	adds	r3, #24
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fcd9 	bl	8002928 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <xTaskRemoveFromEventList+0xb4>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d120      	bne.n	8003fc0 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fcd0 	bl	8002928 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f002 fd62 	bl	8006a54 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <xTaskRemoveFromEventList+0xb8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	4a16      	ldr	r2, [pc, #88]	; (8003ff8 <xTaskRemoveFromEventList+0xb8>)
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <xTaskRemoveFromEventList+0xbc>)
 8003fb0:	441a      	add	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f7fe fc58 	bl	800286e <vListInsertEnd>
 8003fbe:	e005      	b.n	8003fcc <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	480e      	ldr	r0, [pc, #56]	; (8004000 <xTaskRemoveFromEventList+0xc0>)
 8003fc8:	f7fe fc51 	bl	800286e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <xTaskRemoveFromEventList+0xc4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d905      	bls.n	8003fe6 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <xTaskRemoveFromEventList+0xc8>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	e001      	b.n	8003fea <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003fea:	697b      	ldr	r3, [r7, #20]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000294 	.word	0x20000294
 8003ff8:	20000274 	.word	0x20000274
 8003ffc:	20000198 	.word	0x20000198
 8004000:	2000022c 	.word	0x2000022c
 8004004:	20000194 	.word	0x20000194
 8004008:	20000280 	.word	0x20000280

0800400c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <vTaskInternalSetTimeOutState+0x24>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <vTaskInternalSetTimeOutState+0x28>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	605a      	str	r2, [r3, #4]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000284 	.word	0x20000284
 8004034:	20000270 	.word	0x20000270

08004038 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10a      	bne.n	800405e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	613b      	str	r3, [r7, #16]
    }
 800405a:	bf00      	nop
 800405c:	e7fe      	b.n	800405c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
    }
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800407a:	f000 ff7d 	bl	8004f78 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800407e:	4b1f      	ldr	r3, [pc, #124]	; (80040fc <xTaskCheckForTimeOut+0xc4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004096:	d102      	bne.n	800409e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004098:	2300      	movs	r3, #0
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	e026      	b.n	80040ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <xTaskCheckForTimeOut+0xc8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d00a      	beq.n	80040c0 <xTaskCheckForTimeOut+0x88>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d305      	bcc.n	80040c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	e015      	b.n	80040ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d20b      	bcs.n	80040e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad2      	subs	r2, r2, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ff98 	bl	800400c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80040dc:	2300      	movs	r3, #0
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	e004      	b.n	80040ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80040e8:	2301      	movs	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80040ec:	f000 ff74 	bl	8004fd8 <vPortExitCritical>

    return xReturn;
 80040f0:	69fb      	ldr	r3, [r7, #28]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000270 	.word	0x20000270
 8004100:	20000284 	.word	0x20000284

08004104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <vTaskMissedYield+0x14>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000280 	.word	0x20000280

0800411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004124:	f000 f854 	bl	80041d0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b07      	ldr	r3, [pc, #28]	; (8004148 <prvIdleTask+0x2c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d907      	bls.n	8004140 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <prvIdleTask+0x30>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8004140:	f7fc fe31 	bl	8000da6 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8004144:	e7ee      	b.n	8004124 <prvIdleTask+0x8>
 8004146:	bf00      	nop
 8004148:	20000198 	.word	0x20000198
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	e00c      	b.n	8004176 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4a12      	ldr	r2, [pc, #72]	; (80041b0 <prvInitialiseTaskLists+0x60>)
 8004168:	4413      	add	r3, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fb52 	bl	8002814 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3301      	adds	r3, #1
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d9ef      	bls.n	800415c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800417c:	480d      	ldr	r0, [pc, #52]	; (80041b4 <prvInitialiseTaskLists+0x64>)
 800417e:	f7fe fb49 	bl	8002814 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004182:	480d      	ldr	r0, [pc, #52]	; (80041b8 <prvInitialiseTaskLists+0x68>)
 8004184:	f7fe fb46 	bl	8002814 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004188:	480c      	ldr	r0, [pc, #48]	; (80041bc <prvInitialiseTaskLists+0x6c>)
 800418a:	f7fe fb43 	bl	8002814 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800418e:	480c      	ldr	r0, [pc, #48]	; (80041c0 <prvInitialiseTaskLists+0x70>)
 8004190:	f7fe fb40 	bl	8002814 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004194:	480b      	ldr	r0, [pc, #44]	; (80041c4 <prvInitialiseTaskLists+0x74>)
 8004196:	f7fe fb3d 	bl	8002814 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800419a:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <prvInitialiseTaskLists+0x78>)
 800419c:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <prvInitialiseTaskLists+0x64>)
 800419e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041a0:	4b0a      	ldr	r3, [pc, #40]	; (80041cc <prvInitialiseTaskLists+0x7c>)
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <prvInitialiseTaskLists+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000198 	.word	0x20000198
 80041b4:	200001fc 	.word	0x200001fc
 80041b8:	20000210 	.word	0x20000210
 80041bc:	2000022c 	.word	0x2000022c
 80041c0:	20000240 	.word	0x20000240
 80041c4:	20000258 	.word	0x20000258
 80041c8:	20000224 	.word	0x20000224
 80041cc:	20000228 	.word	0x20000228

080041d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d6:	e019      	b.n	800420c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80041d8:	f000 fece 	bl	8004f78 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041dc:	4b10      	ldr	r3, [pc, #64]	; (8004220 <prvCheckTasksWaitingTermination+0x50>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7fe fb9d 	bl	8002928 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80041ee:	4b0d      	ldr	r3, [pc, #52]	; (8004224 <prvCheckTasksWaitingTermination+0x54>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <prvCheckTasksWaitingTermination+0x54>)
 80041f6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <prvCheckTasksWaitingTermination+0x58>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	4a0a      	ldr	r2, [pc, #40]	; (8004228 <prvCheckTasksWaitingTermination+0x58>)
 8004200:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004202:	f000 fee9 	bl	8004fd8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f810 	bl	800422c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <prvCheckTasksWaitingTermination+0x58>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e1      	bne.n	80041d8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000240 	.word	0x20000240
 8004224:	2000026c 	.word	0x2000026c
 8004228:	20000254 	.word	0x20000254

0800422c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	4618      	mov	r0, r3
 800423a:	f001 f8a7 	bl	800538c <vPortFree>
                vPortFree( pxTCB );
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f001 f8a4 	bl	800538c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <prvResetNextTaskUnblockTime+0x30>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <prvResetNextTaskUnblockTime+0x34>)
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004262:	e005      	b.n	8004270 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <prvResetNextTaskUnblockTime+0x30>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a04      	ldr	r2, [pc, #16]	; (8004280 <prvResetNextTaskUnblockTime+0x34>)
 800426e:	6013      	str	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000224 	.word	0x20000224
 8004280:	2000028c 	.word	0x2000028c

08004284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800428a:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <xTaskGetSchedulerState+0x34>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004292:	2301      	movs	r3, #1
 8004294:	607b      	str	r3, [r7, #4]
 8004296:	e008      	b.n	80042aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <xTaskGetSchedulerState+0x38>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80042a0:	2302      	movs	r3, #2
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	e001      	b.n	80042aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80042aa:	687b      	ldr	r3, [r7, #4]
    }
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	20000278 	.word	0x20000278
 80042bc:	20000294 	.word	0x20000294

080042c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042da:	4b33      	ldr	r3, [pc, #204]	; (80043a8 <xTaskPriorityInherit+0xe8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d253      	bcs.n	800438c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db06      	blt.n	80042fa <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ec:	4b2e      	ldr	r3, [pc, #184]	; (80043a8 <xTaskPriorityInherit+0xe8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f2:	f1c3 0205 	rsb	r2, r3, #5
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6959      	ldr	r1, [r3, #20]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a28      	ldr	r2, [pc, #160]	; (80043ac <xTaskPriorityInherit+0xec>)
 800430c:	4413      	add	r3, r2
 800430e:	4299      	cmp	r1, r3
 8004310:	d12f      	bne.n	8004372 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7fe fb06 	bl	8002928 <uxListRemove>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	2201      	movs	r2, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	43da      	mvns	r2, r3
 800432e:	4b20      	ldr	r3, [pc, #128]	; (80043b0 <xTaskPriorityInherit+0xf0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4013      	ands	r3, r2
 8004334:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <xTaskPriorityInherit+0xf0>)
 8004336:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004338:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <xTaskPriorityInherit+0xe8>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004346:	2201      	movs	r2, #1
 8004348:	409a      	lsls	r2, r3
 800434a:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <xTaskPriorityInherit+0xf0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4313      	orrs	r3, r2
 8004350:	4a17      	ldr	r2, [pc, #92]	; (80043b0 <xTaskPriorityInherit+0xf0>)
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4a12      	ldr	r2, [pc, #72]	; (80043ac <xTaskPriorityInherit+0xec>)
 8004362:	441a      	add	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f7fe fa7f 	bl	800286e <vListInsertEnd>
 8004370:	e004      	b.n	800437c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <xTaskPriorityInherit+0xe8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4619      	mov	r1, r3
 8004380:	2049      	movs	r0, #73	; 0x49
 8004382:	f001 fe0b 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
 800438a:	e008      	b.n	800439e <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004390:	4b05      	ldr	r3, [pc, #20]	; (80043a8 <xTaskPriorityInherit+0xe8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	429a      	cmp	r2, r3
 8004398:	d201      	bcs.n	800439e <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800439a:	2301      	movs	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800439e:	68fb      	ldr	r3, [r7, #12]
    }
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000194 	.word	0x20000194
 80043ac:	20000198 	.word	0x20000198
 80043b0:	20000274 	.word	0x20000274

080043b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d068      	beq.n	800449c <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80043ca:	4b37      	ldr	r3, [pc, #220]	; (80044a8 <xTaskPriorityDisinherit+0xf4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d00a      	beq.n	80043ea <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60bb      	str	r3, [r7, #8]
    }
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800440c:	1e5a      	subs	r2, r3, #1
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	429a      	cmp	r2, r3
 800441c:	d03e      	beq.n	800449c <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d13a      	bne.n	800449c <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	3304      	adds	r3, #4
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe fa7c 	bl	8002928 <uxListRemove>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10a      	bne.n	800444c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	2201      	movs	r2, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	43da      	mvns	r2, r3
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <xTaskPriorityDisinherit+0xf8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4013      	ands	r3, r2
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <xTaskPriorityDisinherit+0xf8>)
 800444a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4619      	mov	r1, r3
 8004450:	204a      	movs	r0, #74	; 0x4a
 8004452:	f001 fda3 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	f1c3 0205 	rsb	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	2201      	movs	r2, #1
 8004470:	409a      	lsls	r2, r3
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <xTaskPriorityDisinherit+0xf8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4313      	orrs	r3, r2
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <xTaskPriorityDisinherit+0xf8>)
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	4613      	mov	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4a09      	ldr	r2, [pc, #36]	; (80044b0 <xTaskPriorityDisinherit+0xfc>)
 800448a:	441a      	add	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3304      	adds	r3, #4
 8004490:	4619      	mov	r1, r3
 8004492:	4610      	mov	r0, r2
 8004494:	f7fe f9eb 	bl	800286e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004498:	2301      	movs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800449c:	697b      	ldr	r3, [r7, #20]
    }
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000194 	.word	0x20000194
 80044ac:	20000274 	.word	0x20000274
 80044b0:	20000198 	.word	0x20000198

080044b4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8081 	beq.w	80045d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10a      	bne.n	80044ec <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
    }
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d902      	bls.n	80044fc <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	e002      	b.n	8004502 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004500:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	429a      	cmp	r2, r3
 800450a:	d061      	beq.n	80045d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	429a      	cmp	r2, r3
 8004514:	d15c      	bne.n	80045d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	429a      	cmp	r2, r3
 800451e:	d10a      	bne.n	8004536 <vTaskPriorityDisinheritAfterTimeout+0x82>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60bb      	str	r3, [r7, #8]
    }
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <vTaskPriorityDisinheritAfterTimeout+0x80>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4619      	mov	r1, r3
 800453a:	204a      	movs	r0, #74	; 0x4a
 800453c:	f001 fd2e 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004544:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	699b      	ldr	r3, [r3, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db04      	blt.n	800455e <vTaskPriorityDisinheritAfterTimeout+0xaa>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f1c3 0205 	rsb	r2, r3, #5
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	6959      	ldr	r1, [r3, #20]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4a1b      	ldr	r2, [pc, #108]	; (80045dc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800456e:	4413      	add	r3, r2
 8004570:	4299      	cmp	r1, r3
 8004572:	d12d      	bne.n	80045d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3304      	adds	r3, #4
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe f9d5 	bl	8002928 <uxListRemove>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <vTaskPriorityDisinheritAfterTimeout+0xe6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2201      	movs	r2, #1
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43da      	mvns	r2, r3
 8004590:	4b13      	ldr	r3, [pc, #76]	; (80045e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4013      	ands	r3, r2
 8004596:	4a12      	ldr	r2, [pc, #72]	; (80045e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004598:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4618      	mov	r0, r3
 800459e:	f002 fa59 	bl	8006a54 <SEGGER_SYSVIEW_OnTaskStartReady>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	2201      	movs	r2, #1
 80045a8:	409a      	lsls	r2, r3
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a06      	ldr	r2, [pc, #24]	; (80045dc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80045c2:	441a      	add	r2, r3
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe f94f 	bl	800286e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80045d0:	bf00      	nop
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	20000194 	.word	0x20000194
 80045dc:	20000198 	.word	0x20000198
 80045e0:	20000274 	.word	0x20000274

080045e4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <pvTaskIncrementMutexHeldCount+0x24>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <pvTaskIncrementMutexHeldCount+0x24>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045f6:	3201      	adds	r2, #1
 80045f8:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80045fa:	4b03      	ldr	r3, [pc, #12]	; (8004608 <pvTaskIncrementMutexHeldCount+0x24>)
 80045fc:	681b      	ldr	r3, [r3, #0]
    }
 80045fe:	4618      	mov	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	20000194 	.word	0x20000194

0800460c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004616:	4b32      	ldr	r3, [pc, #200]	; (80046e0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800461c:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe f980 	bl	8002928 <uxListRemove>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10b      	bne.n	8004646 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800462e:	4b2d      	ldr	r3, [pc, #180]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	2201      	movs	r2, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43da      	mvns	r2, r3
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4013      	ands	r3, r2
 8004642:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004644:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464c:	d110      	bne.n	8004670 <prvAddCurrentTaskToDelayedList+0x64>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8004654:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	211b      	movs	r1, #27
 800465a:	4618      	mov	r0, r3
 800465c:	f002 fa3c 	bl	8006ad8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004660:	4b20      	ldr	r3, [pc, #128]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3304      	adds	r3, #4
 8004666:	4619      	mov	r1, r3
 8004668:	4820      	ldr	r0, [pc, #128]	; (80046ec <prvAddCurrentTaskToDelayedList+0xe0>)
 800466a:	f7fe f900 	bl	800286e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800466e:	e032      	b.n	80046d6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	429a      	cmp	r2, r3
 8004686:	d20f      	bcs.n	80046a8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004688:	4b16      	ldr	r3, [pc, #88]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2104      	movs	r1, #4
 800468e:	4618      	mov	r0, r3
 8004690:	f002 fa22 	bl	8006ad8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fe f908 	bl	80028b6 <vListInsert>
}
 80046a6:	e016      	b.n	80046d6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80046a8:	4b0e      	ldr	r3, [pc, #56]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2104      	movs	r1, #4
 80046ae:	4618      	mov	r0, r3
 80046b0:	f002 fa12 	bl	8006ad8 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3304      	adds	r3, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4610      	mov	r0, r2
 80046c2:	f7fe f8f8 	bl	80028b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d202      	bcs.n	80046d6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80046d0:	4a09      	ldr	r2, [pc, #36]	; (80046f8 <prvAddCurrentTaskToDelayedList+0xec>)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6013      	str	r3, [r2, #0]
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20000270 	.word	0x20000270
 80046e4:	20000194 	.word	0x20000194
 80046e8:	20000274 	.word	0x20000274
 80046ec:	20000258 	.word	0x20000258
 80046f0:	20000228 	.word	0x20000228
 80046f4:	20000224 	.word	0x20000224
 80046f8:	2000028c 	.word	0x2000028c

080046fc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004706:	f000 fad5 	bl	8004cb4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <xTimerCreateTimerTask+0x54>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004712:	4b10      	ldr	r3, [pc, #64]	; (8004754 <xTimerCreateTimerTask+0x58>)
 8004714:	9301      	str	r3, [sp, #4]
 8004716:	2302      	movs	r3, #2
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2300      	movs	r3, #0
 800471c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004720:	490d      	ldr	r1, [pc, #52]	; (8004758 <xTimerCreateTimerTask+0x5c>)
 8004722:	480e      	ldr	r0, [pc, #56]	; (800475c <xTimerCreateTimerTask+0x60>)
 8004724:	f7fe ffd8 	bl	80036d8 <xTaskCreate>
 8004728:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	603b      	str	r3, [r7, #0]
    }
 8004742:	bf00      	nop
 8004744:	e7fe      	b.n	8004744 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004746:	687b      	ldr	r3, [r7, #4]
    }
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	200002c8 	.word	0x200002c8
 8004754:	200002cc 	.word	0x200002cc
 8004758:	08008304 	.word	0x08008304
 800475c:	08004895 	.word	0x08004895

08004760 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004760:	b580      	push	{r7, lr}
 8004762:	b08a      	sub	sp, #40	; 0x28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800476e:	2300      	movs	r3, #0
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10a      	bne.n	800478e <xTimerGenericCommand+0x2e>
        __asm volatile
 8004778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477c:	f383 8811 	msr	BASEPRI, r3
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	623b      	str	r3, [r7, #32]
    }
 800478a:	bf00      	nop
 800478c:	e7fe      	b.n	800478c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800478e:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <xTimerGenericCommand+0x98>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d02a      	beq.n	80047ec <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	dc18      	bgt.n	80047da <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047a8:	f7ff fd6c 	bl	8004284 <xTaskGetSchedulerState>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d109      	bne.n	80047c6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047b2:	4b11      	ldr	r3, [pc, #68]	; (80047f8 <xTimerGenericCommand+0x98>)
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	f107 0114 	add.w	r1, r7, #20
 80047ba:	2300      	movs	r3, #0
 80047bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047be:	f7fe f9cd 	bl	8002b5c <xQueueGenericSend>
 80047c2:	6278      	str	r0, [r7, #36]	; 0x24
 80047c4:	e012      	b.n	80047ec <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <xTimerGenericCommand+0x98>)
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	f107 0114 	add.w	r1, r7, #20
 80047ce:	2300      	movs	r3, #0
 80047d0:	2200      	movs	r2, #0
 80047d2:	f7fe f9c3 	bl	8002b5c <xQueueGenericSend>
 80047d6:	6278      	str	r0, [r7, #36]	; 0x24
 80047d8:	e008      	b.n	80047ec <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <xTimerGenericCommand+0x98>)
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	f107 0114 	add.w	r1, r7, #20
 80047e2:	2300      	movs	r3, #0
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	f7fe fadf 	bl	8002da8 <xQueueGenericSendFromISR>
 80047ea:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80047ee:	4618      	mov	r0, r3
 80047f0:	3728      	adds	r7, #40	; 0x28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	200002c8 	.word	0x200002c8

080047fc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004806:	4b22      	ldr	r3, [pc, #136]	; (8004890 <prvProcessExpiredTimer+0x94>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	3304      	adds	r3, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7fe f887 	bl	8002928 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d022      	beq.n	800486e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	18d1      	adds	r1, r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	6978      	ldr	r0, [r7, #20]
 8004836:	f000 f8d1 	bl	80049dc <prvInsertTimerInActiveList>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01f      	beq.n	8004880 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004840:	2300      	movs	r3, #0
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	2100      	movs	r1, #0
 800484a:	6978      	ldr	r0, [r7, #20]
 800484c:	f7ff ff88 	bl	8004760 <xTimerGenericCommand>
 8004850:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d113      	bne.n	8004880 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60fb      	str	r3, [r7, #12]
    }
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	b2da      	uxtb	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	6978      	ldr	r0, [r7, #20]
 8004886:	4798      	blx	r3
    }
 8004888:	bf00      	nop
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	200002c0 	.word	0x200002c0

08004894 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f857 	bl	8004954 <prvGetNextExpireTime>
 80048a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4619      	mov	r1, r3
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f803 	bl	80048b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80048b2:	f000 f8d5 	bl	8004a60 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048b6:	e7f1      	b.n	800489c <prvTimerTask+0x8>

080048b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80048c2:	f7ff f907 	bl	8003ad4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048c6:	f107 0308 	add.w	r3, r7, #8
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f866 	bl	800499c <prvSampleTimeNow>
 80048d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d130      	bne.n	800493a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <prvProcessTimerOrBlockTask+0x3c>
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d806      	bhi.n	80048f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80048e6:	f7ff f903 	bl	8003af0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff85 	bl	80047fc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80048f2:	e024      	b.n	800493e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d008      	beq.n	800490c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <prvProcessTimerOrBlockTask+0x90>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <prvProcessTimerOrBlockTask+0x50>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <prvProcessTimerOrBlockTask+0x52>
 8004908:	2300      	movs	r3, #0
 800490a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800490c:	4b0f      	ldr	r3, [pc, #60]	; (800494c <prvProcessTimerOrBlockTask+0x94>)
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	f7fe fea9 	bl	8003670 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800491e:	f7ff f8e7 	bl	8003af0 <xTaskResumeAll>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <prvProcessTimerOrBlockTask+0x98>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
    }
 8004938:	e001      	b.n	800493e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800493a:	f7ff f8d9 	bl	8003af0 <xTaskResumeAll>
    }
 800493e:	bf00      	nop
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200002c4 	.word	0x200002c4
 800494c:	200002c8 	.word	0x200002c8
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800495c:	4b0e      	ldr	r3, [pc, #56]	; (8004998 <prvGetNextExpireTime+0x44>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <prvGetNextExpireTime+0x16>
 8004966:	2201      	movs	r2, #1
 8004968:	e000      	b.n	800496c <prvGetNextExpireTime+0x18>
 800496a:	2200      	movs	r2, #0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004978:	4b07      	ldr	r3, [pc, #28]	; (8004998 <prvGetNextExpireTime+0x44>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e001      	b.n	8004988 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004988:	68fb      	ldr	r3, [r7, #12]
    }
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	200002c0 	.word	0x200002c0

0800499c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80049a4:	f7ff f944 	bl	8003c30 <xTaskGetTickCount>
 80049a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80049aa:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <prvSampleTimeNow+0x3c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d205      	bcs.n	80049c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80049b4:	f000 f91a 	bl	8004bec <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e002      	b.n	80049c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80049c6:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <prvSampleTimeNow+0x3c>)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80049cc:	68fb      	ldr	r3, [r7, #12]
    }
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200002d0 	.word	0x200002d0

080049dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d812      	bhi.n	8004a28 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d302      	bcc.n	8004a16 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a10:	2301      	movs	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e01b      	b.n	8004a4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <prvInsertTimerInActiveList+0x7c>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fd ff48 	bl	80028b6 <vListInsert>
 8004a26:	e012      	b.n	8004a4e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d206      	bcs.n	8004a3e <prvInsertTimerInActiveList+0x62>
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d302      	bcc.n	8004a3e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e007      	b.n	8004a4e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <prvInsertTimerInActiveList+0x80>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fd ff34 	bl	80028b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004a4e:	697b      	ldr	r3, [r7, #20]
    }
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	200002c4 	.word	0x200002c4
 8004a5c:	200002c0 	.word	0x200002c0

08004a60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	; 0x30
 8004a64:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a66:	e0ae      	b.n	8004bc6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f2c0 80aa 	blt.w	8004bc4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d004      	beq.n	8004a86 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fd ff51 	bl	8002928 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a86:	1d3b      	adds	r3, r7, #4
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff ff87 	bl	800499c <prvSampleTimeNow>
 8004a8e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b09      	cmp	r3, #9
 8004a94:	f200 8097 	bhi.w	8004bc6 <prvProcessReceivedCommands+0x166>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <prvProcessReceivedCommands+0x40>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004ac9 	.word	0x08004ac9
 8004aa8:	08004ac9 	.word	0x08004ac9
 8004aac:	08004b3d 	.word	0x08004b3d
 8004ab0:	08004b51 	.word	0x08004b51
 8004ab4:	08004b9b 	.word	0x08004b9b
 8004ab8:	08004ac9 	.word	0x08004ac9
 8004abc:	08004ac9 	.word	0x08004ac9
 8004ac0:	08004b3d 	.word	0x08004b3d
 8004ac4:	08004b51 	.word	0x08004b51
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	18d1      	adds	r1, r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a3a      	ldr	r2, [r7, #32]
 8004ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ae8:	f7ff ff78 	bl	80049dc <prvInsertTimerInActiveList>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d069      	beq.n	8004bc6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004af8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d05e      	beq.n	8004bc6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	441a      	add	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	2100      	movs	r1, #0
 8004b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b1a:	f7ff fe21 	bl	8004760 <xTimerGenericCommand>
 8004b1e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d14f      	bne.n	8004bc6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	61bb      	str	r3, [r7, #24]
    }
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b42:	f023 0301 	bic.w	r3, r3, #1
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004b4e:	e03a      	b.n	8004bc6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	617b      	str	r3, [r7, #20]
    }
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	18d1      	adds	r1, r2, r3
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	6a3a      	ldr	r2, [r7, #32]
 8004b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b94:	f7ff ff22 	bl	80049dc <prvInsertTimerInActiveList>
                        break;
 8004b98:	e015      	b.n	8004bc6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8004ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004baa:	f000 fbef 	bl	800538c <vPortFree>
 8004bae:	e00a      	b.n	8004bc6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb6:	f023 0301 	bic.w	r3, r3, #1
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004bc2:	e000      	b.n	8004bc6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004bc4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <prvProcessReceivedCommands+0x188>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f107 0108 	add.w	r1, r7, #8
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe f9a7 	bl	8002f24 <xQueueReceive>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f af45 	bne.w	8004a68 <prvProcessReceivedCommands+0x8>
        }
    }
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	200002c8 	.word	0x200002c8

08004bec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bf2:	e048      	b.n	8004c86 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bf4:	4b2d      	ldr	r3, [pc, #180]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfe:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fd fe8b 	bl	8002928 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d02e      	beq.n	8004c86 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4413      	add	r3, r2
 8004c30:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d90e      	bls.n	8004c58 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c46:	4b19      	ldr	r3, [pc, #100]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4610      	mov	r0, r2
 8004c52:	f7fd fe30 	bl	80028b6 <vListInsert>
 8004c56:	e016      	b.n	8004c86 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	2100      	movs	r1, #0
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fd7c 	bl	8004760 <xTimerGenericCommand>
 8004c68:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	603b      	str	r3, [r7, #0]
    }
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1b1      	bne.n	8004bf4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004c90:	4b06      	ldr	r3, [pc, #24]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <prvSwitchTimerLists+0xc4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <prvSwitchTimerLists+0xc0>)
 8004c9c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004c9e:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <prvSwitchTimerLists+0xc4>)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	6013      	str	r3, [r2, #0]
    }
 8004ca4:	bf00      	nop
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	200002c0 	.word	0x200002c0
 8004cb0:	200002c4 	.word	0x200002c4

08004cb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004cb8:	f000 f95e 	bl	8004f78 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004cbc:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <prvCheckForValidListAndQueue+0x54>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004cc4:	4811      	ldr	r0, [pc, #68]	; (8004d0c <prvCheckForValidListAndQueue+0x58>)
 8004cc6:	f7fd fda5 	bl	8002814 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004cca:	4811      	ldr	r0, [pc, #68]	; (8004d10 <prvCheckForValidListAndQueue+0x5c>)
 8004ccc:	f7fd fda2 	bl	8002814 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <prvCheckForValidListAndQueue+0x60>)
 8004cd2:	4a0e      	ldr	r2, [pc, #56]	; (8004d0c <prvCheckForValidListAndQueue+0x58>)
 8004cd4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <prvCheckForValidListAndQueue+0x64>)
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <prvCheckForValidListAndQueue+0x5c>)
 8004cda:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004cdc:	2200      	movs	r2, #0
 8004cde:	210c      	movs	r1, #12
 8004ce0:	200a      	movs	r0, #10
 8004ce2:	f7fd feb3 	bl	8002a4c <xQueueGenericCreate>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <prvCheckForValidListAndQueue+0x54>)
 8004cea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <prvCheckForValidListAndQueue+0x54>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <prvCheckForValidListAndQueue+0x54>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4908      	ldr	r1, [pc, #32]	; (8004d1c <prvCheckForValidListAndQueue+0x68>)
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fc86 	bl	800360c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d00:	f000 f96a 	bl	8004fd8 <vPortExitCritical>
    }
 8004d04:	bf00      	nop
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	200002c8 	.word	0x200002c8
 8004d0c:	20000298 	.word	0x20000298
 8004d10:	200002ac 	.word	0x200002ac
 8004d14:	200002c0 	.word	0x200002c0
 8004d18:	200002c4 	.word	0x200002c4
 8004d1c:	0800830c 	.word	0x0800830c

08004d20 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b04      	subs	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3b04      	subs	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004d50:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <pxPortInitialiseStack+0x64>)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3b14      	subs	r3, #20
 8004d5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3b04      	subs	r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f06f 0202 	mvn.w	r2, #2
 8004d6e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3b20      	subs	r3, #32
 8004d74:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004d76:	68fb      	ldr	r3, [r7, #12]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	08004d89 	.word	0x08004d89

08004d88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004d92:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <prvTaskExitError+0x54>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d00a      	beq.n	8004db2 <prvTaskExitError+0x2a>
        __asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	60fb      	str	r3, [r7, #12]
    }
 8004dae:	bf00      	nop
 8004db0:	e7fe      	b.n	8004db0 <prvTaskExitError+0x28>
        __asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
    }
 8004dc4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004dc6:	bf00      	nop
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0fc      	beq.n	8004dc8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	20000010 	.word	0x20000010

08004de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <pxCurrentTCBConst2>)
 8004de2:	6819      	ldr	r1, [r3, #0]
 8004de4:	6808      	ldr	r0, [r1, #0]
 8004de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	f380 8809 	msr	PSP, r0
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f04f 0000 	mov.w	r0, #0
 8004df6:	f380 8811 	msr	BASEPRI, r0
 8004dfa:	4770      	bx	lr
 8004dfc:	f3af 8000 	nop.w

08004e00 <pxCurrentTCBConst2>:
 8004e00:	20000194 	.word	0x20000194
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004e08:	4808      	ldr	r0, [pc, #32]	; (8004e2c <prvPortStartFirstTask+0x24>)
 8004e0a:	6800      	ldr	r0, [r0, #0]
 8004e0c:	6800      	ldr	r0, [r0, #0]
 8004e0e:	f380 8808 	msr	MSP, r0
 8004e12:	f04f 0000 	mov.w	r0, #0
 8004e16:	f380 8814 	msr	CONTROL, r0
 8004e1a:	b662      	cpsie	i
 8004e1c:	b661      	cpsie	f
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	df00      	svc	0
 8004e28:	bf00      	nop
 8004e2a:	0000      	.short	0x0000
 8004e2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop

08004e34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <xPortStartScheduler+0x120>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a46      	ldr	r2, [pc, #280]	; (8004f58 <xPortStartScheduler+0x124>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10a      	bne.n	8004e5a <xPortStartScheduler+0x26>
        __asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	613b      	str	r3, [r7, #16]
    }
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <xPortStartScheduler+0x120>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3f      	ldr	r2, [pc, #252]	; (8004f5c <xPortStartScheduler+0x128>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d10a      	bne.n	8004e7a <xPortStartScheduler+0x46>
        __asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
    }
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e7a:	4b39      	ldr	r3, [pc, #228]	; (8004f60 <xPortStartScheduler+0x12c>)
 8004e7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	4b31      	ldr	r3, [pc, #196]	; (8004f64 <xPortStartScheduler+0x130>)
 8004ea0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ea2:	4b31      	ldr	r3, [pc, #196]	; (8004f68 <xPortStartScheduler+0x134>)
 8004ea4:	2207      	movs	r2, #7
 8004ea6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ea8:	e009      	b.n	8004ebe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004eaa:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <xPortStartScheduler+0x134>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <xPortStartScheduler+0x134>)
 8004eb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004eb4:	78fb      	ldrb	r3, [r7, #3]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ebe:	78fb      	ldrb	r3, [r7, #3]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d0ef      	beq.n	8004eaa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eca:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <xPortStartScheduler+0x134>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f1c3 0307 	rsb	r3, r3, #7
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d00a      	beq.n	8004eec <xPortStartScheduler+0xb8>
        __asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	60bb      	str	r3, [r7, #8]
    }
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004eec:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <xPortStartScheduler+0x134>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	021b      	lsls	r3, r3, #8
 8004ef2:	4a1d      	ldr	r2, [pc, #116]	; (8004f68 <xPortStartScheduler+0x134>)
 8004ef4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <xPortStartScheduler+0x134>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004efe:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <xPortStartScheduler+0x134>)
 8004f00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <xPortStartScheduler+0x138>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a17      	ldr	r2, [pc, #92]	; (8004f6c <xPortStartScheduler+0x138>)
 8004f10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <xPortStartScheduler+0x138>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a14      	ldr	r2, [pc, #80]	; (8004f6c <xPortStartScheduler+0x138>)
 8004f1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004f22:	f000 f8e3 	bl	80050ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004f26:	4b12      	ldr	r3, [pc, #72]	; (8004f70 <xPortStartScheduler+0x13c>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004f2c:	f000 f902 	bl	8005134 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f30:	4b10      	ldr	r3, [pc, #64]	; (8004f74 <xPortStartScheduler+0x140>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0f      	ldr	r2, [pc, #60]	; (8004f74 <xPortStartScheduler+0x140>)
 8004f36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004f3c:	f7ff ff64 	bl	8004e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004f40:	f7fe ff42 	bl	8003dc8 <vTaskSwitchContext>
    prvTaskExitError();
 8004f44:	f7ff ff20 	bl	8004d88 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	e000ed00 	.word	0xe000ed00
 8004f58:	410fc271 	.word	0x410fc271
 8004f5c:	410fc270 	.word	0x410fc270
 8004f60:	e000e400 	.word	0xe000e400
 8004f64:	200002d4 	.word	0x200002d4
 8004f68:	200002d8 	.word	0x200002d8
 8004f6c:	e000ed20 	.word	0xe000ed20
 8004f70:	20000010 	.word	0x20000010
 8004f74:	e000ef34 	.word	0xe000ef34

08004f78 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
    }
 8004f90:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004f92:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <vPortEnterCritical+0x58>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3301      	adds	r3, #1
 8004f98:	4a0d      	ldr	r2, [pc, #52]	; (8004fd0 <vPortEnterCritical+0x58>)
 8004f9a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <vPortEnterCritical+0x58>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d10f      	bne.n	8004fc4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	; (8004fd4 <vPortEnterCritical+0x5c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00a      	beq.n	8004fc4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	603b      	str	r3, [r7, #0]
    }
 8004fc0:	bf00      	nop
 8004fc2:	e7fe      	b.n	8004fc2 <vPortEnterCritical+0x4a>
    }
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	20000010 	.word	0x20000010
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <vPortExitCritical+0x50>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <vPortExitCritical+0x24>
        __asm volatile
 8004fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fea:	f383 8811 	msr	BASEPRI, r3
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f3bf 8f4f 	dsb	sy
 8004ff6:	607b      	str	r3, [r7, #4]
    }
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ffc:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <vPortExitCritical+0x50>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3b01      	subs	r3, #1
 8005002:	4a09      	ldr	r2, [pc, #36]	; (8005028 <vPortExitCritical+0x50>)
 8005004:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <vPortExitCritical+0x50>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <vPortExitCritical+0x42>
 800500e:	2300      	movs	r3, #0
 8005010:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f383 8811 	msr	BASEPRI, r3
    }
 8005018:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000010 	.word	0x20000010
 800502c:	00000000 	.word	0x00000000

08005030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005030:	f3ef 8009 	mrs	r0, PSP
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <pxCurrentTCBConst>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	f01e 0f10 	tst.w	lr, #16
 8005040:	bf08      	it	eq
 8005042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504a:	6010      	str	r0, [r2, #0]
 800504c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005054:	f380 8811 	msr	BASEPRI, r0
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f7fe feb2 	bl	8003dc8 <vTaskSwitchContext>
 8005064:	f04f 0000 	mov.w	r0, #0
 8005068:	f380 8811 	msr	BASEPRI, r0
 800506c:	bc09      	pop	{r0, r3}
 800506e:	6819      	ldr	r1, [r3, #0]
 8005070:	6808      	ldr	r0, [r1, #0]
 8005072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005076:	f01e 0f10 	tst.w	lr, #16
 800507a:	bf08      	it	eq
 800507c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005080:	f380 8809 	msr	PSP, r0
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	f3af 8000 	nop.w

08005090 <pxCurrentTCBConst>:
 8005090:	20000194 	.word	0x20000194
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop

08005098 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
        __asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	607b      	str	r3, [r7, #4]
    }
 80050b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80050b2:	f001 fbb5 	bl	8006820 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80050b6:	f7fe fdcb 	bl	8003c50 <xTaskIncrementTick>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80050c0:	f001 fc0c 	bl	80068dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050c4:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <SysTick_Handler+0x50>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	e001      	b.n	80050d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80050ce:	f001 fbe9 	bl	80068a4 <SEGGER_SYSVIEW_RecordExitISR>
 80050d2:	2300      	movs	r3, #0
 80050d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	f383 8811 	msr	BASEPRI, r3
    }
 80050dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	; (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	; (800512c <vPortSetupTimerInterrupt+0x40>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	4a09      	ldr	r2, [pc, #36]	; (8005130 <vPortSetupTimerInterrupt+0x44>)
 800510a:	3b01      	subs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800510e:	4b04      	ldr	r3, [pc, #16]	; (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	10624dd3 	.word	0x10624dd3
 8005130:	e000e014 	.word	0xe000e014

08005134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005144 <vPortEnableVFP+0x10>
 8005138:	6801      	ldr	r1, [r0, #0]
 800513a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800513e:	6001      	str	r1, [r0, #0]
 8005140:	4770      	bx	lr
 8005142:	0000      	.short	0x0000
 8005144:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop

0800514c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005152:	f3ef 8305 	mrs	r3, IPSR
 8005156:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b0f      	cmp	r3, #15
 800515c:	d914      	bls.n	8005188 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800515e:	4a17      	ldr	r2, [pc, #92]	; (80051bc <vPortValidateInterruptPriority+0x70>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <vPortValidateInterruptPriority+0x74>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	7afa      	ldrb	r2, [r7, #11]
 800516e:	429a      	cmp	r2, r3
 8005170:	d20a      	bcs.n	8005188 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	607b      	str	r3, [r7, #4]
    }
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005188:	4b0e      	ldr	r3, [pc, #56]	; (80051c4 <vPortValidateInterruptPriority+0x78>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005190:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <vPortValidateInterruptPriority+0x7c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d90a      	bls.n	80051ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	603b      	str	r3, [r7, #0]
    }
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <vPortValidateInterruptPriority+0x60>
    }
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e3f0 	.word	0xe000e3f0
 80051c0:	200002d4 	.word	0x200002d4
 80051c4:	e000ed0c 	.word	0xe000ed0c
 80051c8:	200002d8 	.word	0x200002d8

080051cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80051d8:	f7fe fc7c 	bl	8003ad4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80051dc:	4b65      	ldr	r3, [pc, #404]	; (8005374 <pvPortMalloc+0x1a8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80051e4:	f000 f934 	bl	8005450 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051e8:	4b63      	ldr	r3, [pc, #396]	; (8005378 <pvPortMalloc+0x1ac>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 80a7 	bne.w	8005344 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02d      	beq.n	8005258 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80051fc:	2208      	movs	r2, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d227      	bcs.n	8005258 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d021      	beq.n	800525e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f023 0307 	bic.w	r3, r3, #7
 8005220:	3308      	adds	r3, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d214      	bcs.n	8005252 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f023 0307 	bic.w	r3, r3, #7
 800522e:	3308      	adds	r3, #8
 8005230:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	2b00      	cmp	r3, #0
 800523a:	d010      	beq.n	800525e <pvPortMalloc+0x92>
        __asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	617b      	str	r3, [r7, #20]
    }
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005256:	e002      	b.n	800525e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	607b      	str	r3, [r7, #4]
 800525c:	e000      	b.n	8005260 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800525e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d06e      	beq.n	8005344 <pvPortMalloc+0x178>
 8005266:	4b45      	ldr	r3, [pc, #276]	; (800537c <pvPortMalloc+0x1b0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	429a      	cmp	r2, r3
 800526e:	d869      	bhi.n	8005344 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005270:	4b43      	ldr	r3, [pc, #268]	; (8005380 <pvPortMalloc+0x1b4>)
 8005272:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005274:	4b42      	ldr	r3, [pc, #264]	; (8005380 <pvPortMalloc+0x1b4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800527a:	e004      	b.n	8005286 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	429a      	cmp	r2, r3
 800528e:	d903      	bls.n	8005298 <pvPortMalloc+0xcc>
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f1      	bne.n	800527c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005298:	4b36      	ldr	r3, [pc, #216]	; (8005374 <pvPortMalloc+0x1a8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529e:	429a      	cmp	r2, r3
 80052a0:	d050      	beq.n	8005344 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2208      	movs	r2, #8
 80052a8:	4413      	add	r3, r2
 80052aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	2308      	movs	r3, #8
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d91f      	bls.n	8005304 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <pvPortMalloc+0x120>
        __asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	613b      	str	r3, [r7, #16]
    }
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052fe:	69b8      	ldr	r0, [r7, #24]
 8005300:	f000 f908 	bl	8005514 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005304:	4b1d      	ldr	r3, [pc, #116]	; (800537c <pvPortMalloc+0x1b0>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	4a1b      	ldr	r2, [pc, #108]	; (800537c <pvPortMalloc+0x1b0>)
 8005310:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005312:	4b1a      	ldr	r3, [pc, #104]	; (800537c <pvPortMalloc+0x1b0>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b1b      	ldr	r3, [pc, #108]	; (8005384 <pvPortMalloc+0x1b8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d203      	bcs.n	8005326 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800531e:	4b17      	ldr	r3, [pc, #92]	; (800537c <pvPortMalloc+0x1b0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a18      	ldr	r2, [pc, #96]	; (8005384 <pvPortMalloc+0x1b8>)
 8005324:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <pvPortMalloc+0x1ac>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	431a      	orrs	r2, r3
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <pvPortMalloc+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3301      	adds	r3, #1
 8005340:	4a11      	ldr	r2, [pc, #68]	; (8005388 <pvPortMalloc+0x1bc>)
 8005342:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005344:	f7fe fbd4 	bl	8003af0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <pvPortMalloc+0x19c>
        __asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	60fb      	str	r3, [r7, #12]
    }
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <pvPortMalloc+0x19a>
    return pvReturn;
 8005368:	69fb      	ldr	r3, [r7, #28]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3728      	adds	r7, #40	; 0x28
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	20012ee4 	.word	0x20012ee4
 8005378:	20012ef8 	.word	0x20012ef8
 800537c:	20012ee8 	.word	0x20012ee8
 8005380:	20012edc 	.word	0x20012edc
 8005384:	20012eec 	.word	0x20012eec
 8005388:	20012ef0 	.word	0x20012ef0

0800538c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d04d      	beq.n	800543a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800539e:	2308      	movs	r3, #8
 80053a0:	425b      	negs	r3, r3
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	4413      	add	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685a      	ldr	r2, [r3, #4]
 80053b0:	4b24      	ldr	r3, [pc, #144]	; (8005444 <vPortFree+0xb8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4013      	ands	r3, r2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10a      	bne.n	80053d0 <vPortFree+0x44>
        __asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60fb      	str	r3, [r7, #12]
    }
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00a      	beq.n	80053ee <vPortFree+0x62>
        __asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	60bb      	str	r3, [r7, #8]
    }
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <vPortFree+0xb8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01e      	beq.n	800543a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d11a      	bne.n	800543a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <vPortFree+0xb8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005414:	f7fe fb5e 	bl	8003ad4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <vPortFree+0xbc>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4413      	add	r3, r2
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <vPortFree+0xbc>)
 8005424:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f000 f874 	bl	8005514 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <vPortFree+0xc0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	4a06      	ldr	r2, [pc, #24]	; (800544c <vPortFree+0xc0>)
 8005434:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005436:	f7fe fb5b 	bl	8003af0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800543a:	bf00      	nop
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20012ef8 	.word	0x20012ef8
 8005448:	20012ee8 	.word	0x20012ee8
 800544c:	20012ef4 	.word	0x20012ef4

08005450 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005456:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800545a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800545c:	4b27      	ldr	r3, [pc, #156]	; (80054fc <prvHeapInit+0xac>)
 800545e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00c      	beq.n	8005484 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3307      	adds	r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0307 	bic.w	r3, r3, #7
 8005476:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <prvHeapInit+0xac>)
 8005480:	4413      	add	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005488:	4a1d      	ldr	r2, [pc, #116]	; (8005500 <prvHeapInit+0xb0>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800548e:	4b1c      	ldr	r3, [pc, #112]	; (8005500 <prvHeapInit+0xb0>)
 8005490:	2200      	movs	r2, #0
 8005492:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4413      	add	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800549c:	2208      	movs	r2, #8
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0307 	bic.w	r3, r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4a15      	ldr	r2, [pc, #84]	; (8005504 <prvHeapInit+0xb4>)
 80054b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <prvHeapInit+0xb4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <prvHeapInit+0xb4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054d0:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <prvHeapInit+0xb4>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	; (8005508 <prvHeapInit+0xb8>)
 80054de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a09      	ldr	r2, [pc, #36]	; (800550c <prvHeapInit+0xbc>)
 80054e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <prvHeapInit+0xc0>)
 80054ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054ee:	601a      	str	r2, [r3, #0]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	200002dc 	.word	0x200002dc
 8005500:	20012edc 	.word	0x20012edc
 8005504:	20012ee4 	.word	0x20012ee4
 8005508:	20012eec 	.word	0x20012eec
 800550c:	20012ee8 	.word	0x20012ee8
 8005510:	20012ef8 	.word	0x20012ef8

08005514 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <prvInsertBlockIntoFreeList+0xac>)
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e002      	b.n	8005528 <prvInsertBlockIntoFreeList+0x14>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	429a      	cmp	r2, r3
 8005530:	d8f7      	bhi.n	8005522 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	4413      	add	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d108      	bne.n	8005556 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	441a      	add	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	441a      	add	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d118      	bne.n	800559c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	429a      	cmp	r2, r3
 8005574:	d00d      	beq.n	8005592 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	441a      	add	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	e008      	b.n	80055a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005592:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e003      	b.n	80055a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d002      	beq.n	80055b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20012edc 	.word	0x20012edc
 80055c4:	20012ee4 	.word	0x20012ee4

080055c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80055d6:	2205      	movs	r2, #5
 80055d8:	492b      	ldr	r1, [pc, #172]	; (8005688 <SYSVIEW_AddTask+0xc0>)
 80055da:	68b8      	ldr	r0, [r7, #8]
 80055dc:	f001 fc60 	bl	8006ea0 <memcmp>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d04b      	beq.n	800567e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <SYSVIEW_AddTask+0xc4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b07      	cmp	r3, #7
 80055ec:	d903      	bls.n	80055f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80055ee:	4828      	ldr	r0, [pc, #160]	; (8005690 <SYSVIEW_AddTask+0xc8>)
 80055f0:	f001 fbbe 	bl	8006d70 <SEGGER_SYSVIEW_Warn>
    return;
 80055f4:	e044      	b.n	8005680 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80055f6:	4b25      	ldr	r3, [pc, #148]	; (800568c <SYSVIEW_AddTask+0xc4>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4926      	ldr	r1, [pc, #152]	; (8005694 <SYSVIEW_AddTask+0xcc>)
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800560a:	4b20      	ldr	r3, [pc, #128]	; (800568c <SYSVIEW_AddTask+0xc4>)
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4921      	ldr	r1, [pc, #132]	; (8005694 <SYSVIEW_AddTask+0xcc>)
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	3304      	adds	r3, #4
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <SYSVIEW_AddTask+0xc4>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	491b      	ldr	r1, [pc, #108]	; (8005694 <SYSVIEW_AddTask+0xcc>)
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	3308      	adds	r3, #8
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005636:	4b15      	ldr	r3, [pc, #84]	; (800568c <SYSVIEW_AddTask+0xc4>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4916      	ldr	r1, [pc, #88]	; (8005694 <SYSVIEW_AddTask+0xcc>)
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	330c      	adds	r3, #12
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <SYSVIEW_AddTask+0xc4>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	4910      	ldr	r1, [pc, #64]	; (8005694 <SYSVIEW_AddTask+0xcc>)
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3310      	adds	r3, #16
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <SYSVIEW_AddTask+0xc4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3301      	adds	r3, #1
 8005668:	4a08      	ldr	r2, [pc, #32]	; (800568c <SYSVIEW_AddTask+0xc4>)
 800566a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f80e 	bl	8005698 <SYSVIEW_SendTaskInfo>
 800567c:	e000      	b.n	8005680 <SYSVIEW_AddTask+0xb8>
    return;
 800567e:	bf00      	nop

}
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	08008314 	.word	0x08008314
 800568c:	20012f9c 	.word	0x20012f9c
 8005690:	0800831c 	.word	0x0800831c
 8005694:	20012efc 	.word	0x20012efc

08005698 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80056a6:	f107 0314 	add.w	r3, r7, #20
 80056aa:	2214      	movs	r2, #20
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fc12 	bl	8006ed8 <memset>
  TaskInfo.TaskID     = TaskID;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80056c8:	f107 0314 	add.w	r3, r7, #20
 80056cc:	4618      	mov	r0, r3
 80056ce:	f000 ff7d 	bl	80065cc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80056d2:	bf00      	nop
 80056d4:	3728      	adds	r7, #40	; 0x28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
	...

080056dc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <_DoInit+0x98>)
 80056e4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2203      	movs	r2, #3
 80056ea:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2203      	movs	r2, #3
 80056f0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <_DoInit+0x9c>)
 80056f6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a20      	ldr	r2, [pc, #128]	; (800577c <_DoInit+0xa0>)
 80056fc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005704:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a17      	ldr	r2, [pc, #92]	; (8005778 <_DoInit+0x9c>)
 800571c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a17      	ldr	r2, [pc, #92]	; (8005780 <_DoInit+0xa4>)
 8005722:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2210      	movs	r2, #16
 8005728:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3307      	adds	r3, #7
 8005740:	4a10      	ldr	r2, [pc, #64]	; (8005784 <_DoInit+0xa8>)
 8005742:	6810      	ldr	r0, [r2, #0]
 8005744:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005746:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a0e      	ldr	r2, [pc, #56]	; (8005788 <_DoInit+0xac>)
 800574e:	6810      	ldr	r0, [r2, #0]
 8005750:	6018      	str	r0, [r3, #0]
 8005752:	8891      	ldrh	r1, [r2, #4]
 8005754:	7992      	ldrb	r2, [r2, #6]
 8005756:	8099      	strh	r1, [r3, #4]
 8005758:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800575a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2220      	movs	r2, #32
 8005762:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005764:	f3bf 8f5f 	dmb	sy
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	200135e8 	.word	0x200135e8
 8005778:	0800836c 	.word	0x0800836c
 800577c:	20012fa0 	.word	0x20012fa0
 8005780:	200133a0 	.word	0x200133a0
 8005784:	08008378 	.word	0x08008378
 8005788:	0800837c 	.word	0x0800837c

0800578c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005798:	2300      	movs	r3, #0
 800579a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d905      	bls.n	80057bc <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	e007      	b.n	80057cc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	69b9      	ldr	r1, [r7, #24]
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	1acb      	subs	r3, r1, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	3b01      	subs	r3, #1
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d6:	4293      	cmp	r3, r2
 80057d8:	bf28      	it	cs
 80057da:	4613      	movcs	r3, r2
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80057de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4293      	cmp	r3, r2
 80057e4:	bf28      	it	cs
 80057e6:	4613      	movcs	r3, r2
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80057f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	6978      	ldr	r0, [r7, #20]
 80057fa:	f001 fb5f 	bl	8006ebc <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80057fe:	6a3a      	ldr	r2, [r7, #32]
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	4413      	add	r3, r2
 8005804:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	4413      	add	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005816:	69fa      	ldr	r2, [r7, #28]
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	4413      	add	r3, r2
 800581c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	69fa      	ldr	r2, [r7, #28]
 8005824:	429a      	cmp	r2, r3
 8005826:	d101      	bne.n	800582c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005828:	2300      	movs	r3, #0
 800582a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800582c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1b2      	bne.n	80057a2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800583c:	6a3b      	ldr	r3, [r7, #32]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3728      	adds	r7, #40	; 0x28
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005846:	b580      	push	{r7, lr}
 8005848:	b088      	sub	sp, #32
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	429a      	cmp	r2, r3
 8005868:	d911      	bls.n	800588e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	6938      	ldr	r0, [r7, #16]
 800587a:	f001 fb1f 	bl	8006ebc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800587e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	441a      	add	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800588c:	e01f      	b.n	80058ce <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	6938      	ldr	r0, [r7, #16]
 80058a2:	f001 fb0b 	bl	8006ebc <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	4413      	add	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4619      	mov	r1, r3
 80058be:	6938      	ldr	r0, [r7, #16]
 80058c0:	f001 fafc 	bl	8006ebc <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80058c4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	60da      	str	r2, [r3, #12]
}
 80058ce:	bf00      	nop
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80058d6:	b480      	push	{r7}
 80058d8:	b087      	sub	sp, #28
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d808      	bhi.n	8005904 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	1ad2      	subs	r2, r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	3b01      	subs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	e004      	b.n	800590e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800590e:	697b      	ldr	r3, [r7, #20]
}
 8005910:	4618      	mov	r0, r3
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b08c      	sub	sp, #48	; 0x30
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005928:	4b3e      	ldr	r3, [pc, #248]	; (8005a24 <SEGGER_RTT_ReadNoLock+0x108>)
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <SEGGER_RTT_ReadNoLock+0x1e>
 8005936:	f7ff fed1 	bl	80056dc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	4613      	mov	r3, r2
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	4413      	add	r3, r2
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	3360      	adds	r3, #96	; 0x60
 8005946:	4a37      	ldr	r2, [pc, #220]	; (8005a24 <SEGGER_RTT_ReadNoLock+0x108>)
 8005948:	4413      	add	r3, r2
 800594a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800595c:	2300      	movs	r3, #0
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005960:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	429a      	cmp	r2, r3
 8005966:	d92b      	bls.n	80059c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4293      	cmp	r3, r2
 8005978:	bf28      	it	cs
 800597a:	4613      	movcs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	4413      	add	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	6939      	ldr	r1, [r7, #16]
 800598c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800598e:	f001 fa95 	bl	8006ebc <memcpy>
    NumBytesRead += NumBytesRem;
 8005992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800599a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	4413      	add	r3, r2
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80059aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	4413      	add	r3, r2
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d101      	bne.n	80059c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80059bc:	2300      	movs	r3, #0
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bf28      	it	cs
 80059d0:	4613      	movcs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d019      	beq.n	8005a0e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e0:	4413      	add	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	6939      	ldr	r1, [r7, #16]
 80059e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059ea:	f001 fa67 	bl	8006ebc <memcpy>
    NumBytesRead += NumBytesRem;
 80059ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	4413      	add	r3, r2
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80059f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	4413      	add	r3, r2
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a18:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3730      	adds	r7, #48	; 0x30
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	200135e8 	.word	0x200135e8

08005a28 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b088      	sub	sp, #32
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	4413      	add	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005a46:	4413      	add	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d029      	beq.n	8005aa6 <SEGGER_RTT_WriteNoLock+0x7e>
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d82e      	bhi.n	8005ab4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <SEGGER_RTT_WriteNoLock+0x38>
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d013      	beq.n	8005a86 <SEGGER_RTT_WriteNoLock+0x5e>
 8005a5e:	e029      	b.n	8005ab4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a60:	6978      	ldr	r0, [r7, #20]
 8005a62:	f7ff ff38 	bl	80058d6 <_GetAvailWriteSpace>
 8005a66:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d202      	bcs.n	8005a76 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005a70:	2300      	movs	r3, #0
 8005a72:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005a74:	e021      	b.n	8005aba <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	69b9      	ldr	r1, [r7, #24]
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f7ff fee1 	bl	8005846 <_WriteNoCheck>
    break;
 8005a84:	e019      	b.n	8005aba <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a86:	6978      	ldr	r0, [r7, #20]
 8005a88:	f7ff ff25 	bl	80058d6 <_GetAvailWriteSpace>
 8005a8c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	bf28      	it	cs
 8005a96:	4613      	movcs	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7ff fed1 	bl	8005846 <_WriteNoCheck>
    break;
 8005aa4:	e009      	b.n	8005aba <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	69b9      	ldr	r1, [r7, #24]
 8005aaa:	6978      	ldr	r0, [r7, #20]
 8005aac:	f7ff fe6e 	bl	800578c <_WriteBlocking>
 8005ab0:	61f8      	str	r0, [r7, #28]
    break;
 8005ab2:	e002      	b.n	8005aba <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	61fb      	str	r3, [r7, #28]
    break;
 8005ab8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005aba:	69fb      	ldr	r3, [r7, #28]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	200135e8 	.word	0x200135e8

08005ac8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b088      	sub	sp, #32
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <SEGGER_RTT_Write+0x48>)
 8005ad6:	61fb      	str	r3, [r7, #28]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <SEGGER_RTT_Write+0x1e>
 8005ae2:	f7ff fdfb 	bl	80056dc <_DoInit>
  SEGGER_RTT_LOCK();
 8005ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aea:	f04f 0120 	mov.w	r1, #32
 8005aee:	f381 8811 	msr	BASEPRI, r1
 8005af2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff ff95 	bl	8005a28 <SEGGER_RTT_WriteNoLock>
 8005afe:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005b06:	697b      	ldr	r3, [r7, #20]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200135e8 	.word	0x200135e8

08005b14 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00f      	beq.n	8005b4a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005b2a:	e002      	b.n	8005b32 <_EncodeStr+0x1e>
      Len++;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4413      	add	r3, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f6      	bne.n	8005b2c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d901      	bls.n	8005b4a <_EncodeStr+0x36>
      Len = Limit;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2bfe      	cmp	r3, #254	; 0xfe
 8005b4e:	d806      	bhi.n	8005b5e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	60fa      	str	r2, [r7, #12]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e011      	b.n	8005b82 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	60fa      	str	r2, [r7, #12]
 8005b64:	22ff      	movs	r2, #255	; 0xff
 8005b66:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	60fa      	str	r2, [r7, #12]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	0a19      	lsrs	r1, r3, #8
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	60fa      	str	r2, [r7, #12]
 8005b7e:	b2ca      	uxtb	r2, r1
 8005b80:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005b86:	e00a      	b.n	8005b9e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	1c53      	adds	r3, r2, #1
 8005b8c:	60bb      	str	r3, [r7, #8]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	60f9      	str	r1, [r7, #12]
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	701a      	strb	r2, [r3, #0]
    n++;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3f0      	bcc.n	8005b88 <_EncodeStr+0x74>
  }
  return pPayload;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	3304      	adds	r3, #4
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bd2:	4b36      	ldr	r3, [pc, #216]	; (8005cac <_HandleIncomingPacket+0xe0>)
 8005bd4:	7e1b      	ldrb	r3, [r3, #24]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	1cfb      	adds	r3, r7, #3
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4619      	mov	r1, r3
 8005bde:	f7ff fe9d 	bl	800591c <SEGGER_RTT_ReadNoLock>
 8005be2:	4603      	mov	r3, r0
 8005be4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dd54      	ble.n	8005c96 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	2b80      	cmp	r3, #128	; 0x80
 8005bf0:	d032      	beq.n	8005c58 <_HandleIncomingPacket+0x8c>
 8005bf2:	2b80      	cmp	r3, #128	; 0x80
 8005bf4:	dc42      	bgt.n	8005c7c <_HandleIncomingPacket+0xb0>
 8005bf6:	2b07      	cmp	r3, #7
 8005bf8:	dc16      	bgt.n	8005c28 <_HandleIncomingPacket+0x5c>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	dd3e      	ble.n	8005c7c <_HandleIncomingPacket+0xb0>
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	2b06      	cmp	r3, #6
 8005c02:	d83b      	bhi.n	8005c7c <_HandleIncomingPacket+0xb0>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <_HandleIncomingPacket+0x40>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c2f 	.word	0x08005c2f
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c3b 	.word	0x08005c3b
 8005c18:	08005c41 	.word	0x08005c41
 8005c1c:	08005c47 	.word	0x08005c47
 8005c20:	08005c4d 	.word	0x08005c4d
 8005c24:	08005c53 	.word	0x08005c53
 8005c28:	2b7f      	cmp	r3, #127	; 0x7f
 8005c2a:	d036      	beq.n	8005c9a <_HandleIncomingPacket+0xce>
 8005c2c:	e026      	b.n	8005c7c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c2e:	f000 fb53 	bl	80062d8 <SEGGER_SYSVIEW_Start>
      break;
 8005c32:	e037      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c34:	f000 fc0a 	bl	800644c <SEGGER_SYSVIEW_Stop>
      break;
 8005c38:	e034      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c3a:	f000 fdbf 	bl	80067bc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c3e:	e031      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c40:	f000 fda8 	bl	8006794 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c44:	e02e      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c46:	f000 fc27 	bl	8006498 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c4a:	e02b      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c4c:	f001 f852 	bl	8006cf4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c50:	e028      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c52:	f001 f831 	bl	8006cb8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c56:	e025      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c58:	4b14      	ldr	r3, [pc, #80]	; (8005cac <_HandleIncomingPacket+0xe0>)
 8005c5a:	7e1b      	ldrb	r3, [r3, #24]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	1cfb      	adds	r3, r7, #3
 8005c60:	2201      	movs	r2, #1
 8005c62:	4619      	mov	r1, r3
 8005c64:	f7ff fe5a 	bl	800591c <SEGGER_RTT_ReadNoLock>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	dd15      	ble.n	8005c9e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 ff9f 	bl	8006bb8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005c7a:	e010      	b.n	8005c9e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005c7c:	78fb      	ldrb	r3, [r7, #3]
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	da0e      	bge.n	8005ca2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c84:	4b09      	ldr	r3, [pc, #36]	; (8005cac <_HandleIncomingPacket+0xe0>)
 8005c86:	7e1b      	ldrb	r3, [r3, #24]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	1cfb      	adds	r3, r7, #3
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f7ff fe44 	bl	800591c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c94:	e005      	b.n	8005ca2 <_HandleIncomingPacket+0xd6>
    }
  }
 8005c96:	bf00      	nop
 8005c98:	e004      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
      break;
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <_HandleIncomingPacket+0xd8>
      break;
 8005ca2:	bf00      	nop
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200133b0 	.word	0x200133b0

08005cb0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	; 0x30
 8005cb4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	4b31      	ldr	r3, [pc, #196]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cca:	e00b      	b.n	8005ce4 <_TrySendOverflowPacket+0x34>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	1c59      	adds	r1, r3, #1
 8005cd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	09db      	lsrs	r3, r3, #7
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce8:	d8f0      	bhi.n	8005ccc <_TrySendOverflowPacket+0x1c>
 8005cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]
 8005cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005cfa:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <_TrySendOverflowPacket+0xe0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d00:	4b22      	ldr	r3, [pc, #136]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	e00b      	b.n	8005d2c <_TrySendOverflowPacket+0x7c>
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	09db      	lsrs	r3, r3, #7
 8005d2a:	623b      	str	r3, [r7, #32]
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d30:	d8f0      	bhi.n	8005d14 <_TrySendOverflowPacket+0x64>
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	627a      	str	r2, [r7, #36]	; 0x24
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d42:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	4618      	mov	r0, r3
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	1d3b      	adds	r3, r7, #4
 8005d52:	4619      	mov	r1, r3
 8005d54:	f7fa fa3c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d62:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d68:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e004      	b.n	8005d80 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <_TrySendOverflowPacket+0xdc>)
 8005d7e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005d80:	693b      	ldr	r3, [r7, #16]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3730      	adds	r7, #48	; 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	200133b0 	.word	0x200133b0
 8005d90:	e0001004 	.word	0xe0001004

08005d94 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005da0:	4b6c      	ldr	r3, [pc, #432]	; (8005f54 <_SendPacket+0x1c0>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d010      	beq.n	8005dca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005da8:	4b6a      	ldr	r3, [pc, #424]	; (8005f54 <_SendPacket+0x1c0>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80a3 	beq.w	8005ef8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005db2:	4b68      	ldr	r3, [pc, #416]	; (8005f54 <_SendPacket+0x1c0>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d109      	bne.n	8005dce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005dba:	f7ff ff79 	bl	8005cb0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <_SendPacket+0x1c0>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	f040 809a 	bne.w	8005efc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005dc8:	e001      	b.n	8005dce <_SendPacket+0x3a>
    goto Send;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <_SendPacket+0x3c>
Send:
 8005dce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b1f      	cmp	r3, #31
 8005dd4:	d809      	bhi.n	8005dea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005dd6:	4b5f      	ldr	r3, [pc, #380]	; (8005f54 <_SendPacket+0x1c0>)
 8005dd8:	69da      	ldr	r2, [r3, #28]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 808b 	bne.w	8005f00 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b17      	cmp	r3, #23
 8005dee:	d807      	bhi.n	8005e00 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	e03d      	b.n	8005e7c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e0c:	d912      	bls.n	8005e34 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	09da      	lsrs	r2, r3, #7
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	3a01      	subs	r2, #1
 8005e26:	60fa      	str	r2, [r7, #12]
 8005e28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e006      	b.n	8005e42 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b7f      	cmp	r3, #127	; 0x7f
 8005e46:	d912      	bls.n	8005e6e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	09da      	lsrs	r2, r3, #7
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	3a01      	subs	r2, #1
 8005e60:	60fa      	str	r2, [r7, #12]
 8005e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e006      	b.n	8005e7c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3b01      	subs	r3, #1
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e7c:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <_SendPacket+0x1c4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005e82:	4b34      	ldr	r3, [pc, #208]	; (8005f54 <_SendPacket+0x1c0>)
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	623b      	str	r3, [r7, #32]
 8005e94:	e00b      	b.n	8005eae <_SendPacket+0x11a>
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1c59      	adds	r1, r3, #1
 8005e9e:	6279      	str	r1, [r7, #36]	; 0x24
 8005ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	09db      	lsrs	r3, r3, #7
 8005eac:	623b      	str	r3, [r7, #32]
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb2:	d8f0      	bhi.n	8005e96 <_SendPacket+0x102>
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	627a      	str	r2, [r7, #36]	; 0x24
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005ec4:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <_SendPacket+0x1c0>)
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	f7fa f97c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <_SendPacket+0x1c0>)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	60d3      	str	r3, [r2, #12]
 8005ee8:	e00b      	b.n	8005f02 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005eea:	4b1a      	ldr	r3, [pc, #104]	; (8005f54 <_SendPacket+0x1c0>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	4b18      	ldr	r3, [pc, #96]	; (8005f54 <_SendPacket+0x1c0>)
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e004      	b.n	8005f02 <_SendPacket+0x16e>
    goto SendDone;
 8005ef8:	bf00      	nop
 8005efa:	e002      	b.n	8005f02 <_SendPacket+0x16e>
      goto SendDone;
 8005efc:	bf00      	nop
 8005efe:	e000      	b.n	8005f02 <_SendPacket+0x16e>
      goto SendDone;
 8005f00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f02:	4b14      	ldr	r3, [pc, #80]	; (8005f54 <_SendPacket+0x1c0>)
 8005f04:	7e1b      	ldrb	r3, [r3, #24]
 8005f06:	4619      	mov	r1, r3
 8005f08:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <_SendPacket+0x1c8>)
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	440b      	add	r3, r1
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	336c      	adds	r3, #108	; 0x6c
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <_SendPacket+0x1c0>)
 8005f1a:	7e1b      	ldrb	r3, [r3, #24]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	490f      	ldr	r1, [pc, #60]	; (8005f5c <_SendPacket+0x1c8>)
 8005f20:	4603      	mov	r3, r0
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4403      	add	r3, r0
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	440b      	add	r3, r1
 8005f2a:	3370      	adds	r3, #112	; 0x70
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d00b      	beq.n	8005f4a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f32:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <_SendPacket+0x1c0>)
 8005f34:	789b      	ldrb	r3, [r3, #2]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d107      	bne.n	8005f4a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f3a:	4b06      	ldr	r3, [pc, #24]	; (8005f54 <_SendPacket+0x1c0>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f40:	f7ff fe44 	bl	8005bcc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <_SendPacket+0x1c0>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f4a:	bf00      	nop
 8005f4c:	3728      	adds	r7, #40	; 0x28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	200133b0 	.word	0x200133b0
 8005f58:	e0001004 	.word	0xe0001004
 8005f5c:	200135e8 	.word	0x200135e8

08005f60 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f68:	f3ef 8311 	mrs	r3, BASEPRI
 8005f6c:	f04f 0120 	mov.w	r1, #32
 8005f70:	f381 8811 	msr	BASEPRI, r1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	4808      	ldr	r0, [pc, #32]	; (8005f98 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f78:	f7ff fe1c 	bl	8005bb4 <_PreparePacket>
 8005f7c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	68b8      	ldr	r0, [r7, #8]
 8005f84:	f7ff ff06 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f383 8811 	msr	BASEPRI, r3
}
 8005f8e:	bf00      	nop
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200133e0 	.word	0x200133e0

08005f9c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8005faa:	f04f 0120 	mov.w	r1, #32
 8005fae:	f381 8811 	msr	BASEPRI, r1
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	4816      	ldr	r0, [pc, #88]	; (8006010 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fb6:	f7ff fdfd 	bl	8005bb4 <_PreparePacket>
 8005fba:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e00b      	b.n	8005fe2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	1c59      	adds	r1, r3, #1
 8005fd2:	61f9      	str	r1, [r7, #28]
 8005fd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fd8:	b2d2      	uxtb	r2, r2
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	09db      	lsrs	r3, r3, #7
 8005fe0:	61bb      	str	r3, [r7, #24]
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fe6:	d8f0      	bhi.n	8005fca <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	61fa      	str	r2, [r7, #28]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	6938      	ldr	r0, [r7, #16]
 8005ffe:	f7ff fec9 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f383 8811 	msr	BASEPRI, r3
}
 8006008:	bf00      	nop
 800600a:	3720      	adds	r7, #32
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	200133e0 	.word	0x200133e0

08006014 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b08c      	sub	sp, #48	; 0x30
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006020:	f3ef 8311 	mrs	r3, BASEPRI
 8006024:	f04f 0120 	mov.w	r1, #32
 8006028:	f381 8811 	msr	BASEPRI, r1
 800602c:	61fb      	str	r3, [r7, #28]
 800602e:	4825      	ldr	r0, [pc, #148]	; (80060c4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006030:	f7ff fdc0 	bl	8005bb4 <_PreparePacket>
 8006034:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
 8006042:	e00b      	b.n	800605c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	b2da      	uxtb	r2, r3
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800604e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006058:	09db      	lsrs	r3, r3, #7
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2b7f      	cmp	r3, #127	; 0x7f
 8006060:	d8f0      	bhi.n	8006044 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006070:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	623b      	str	r3, [r7, #32]
 800607a:	e00b      	b.n	8006094 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	1c59      	adds	r1, r3, #1
 8006084:	6279      	str	r1, [r7, #36]	; 0x24
 8006086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	09db      	lsrs	r3, r3, #7
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	2b7f      	cmp	r3, #127	; 0x7f
 8006098:	d8f0      	bhi.n	800607c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	627a      	str	r2, [r7, #36]	; 0x24
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	b2d2      	uxtb	r2, r2
 80060a4:	701a      	strb	r2, [r3, #0]
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	6979      	ldr	r1, [r7, #20]
 80060ae:	69b8      	ldr	r0, [r7, #24]
 80060b0:	f7ff fe70 	bl	8005d94 <_SendPacket>
  RECORD_END();
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	f383 8811 	msr	BASEPRI, r3
}
 80060ba:	bf00      	nop
 80060bc:	3730      	adds	r7, #48	; 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200133e0 	.word	0x200133e0

080060c8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08e      	sub	sp, #56	; 0x38
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060d6:	f3ef 8311 	mrs	r3, BASEPRI
 80060da:	f04f 0120 	mov.w	r1, #32
 80060de:	f381 8811 	msr	BASEPRI, r1
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	4832      	ldr	r0, [pc, #200]	; (80061b0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80060e6:	f7ff fd65 	bl	8005bb4 <_PreparePacket>
 80060ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
 80060f8:	e00b      	b.n	8006112 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80060fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006100:	1c59      	adds	r1, r3, #1
 8006102:	6379      	str	r1, [r7, #52]	; 0x34
 8006104:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	09db      	lsrs	r3, r3, #7
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	2b7f      	cmp	r3, #127	; 0x7f
 8006116:	d8f0      	bhi.n	80060fa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800611a:	1c5a      	adds	r2, r3, #1
 800611c:	637a      	str	r2, [r7, #52]	; 0x34
 800611e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006130:	e00b      	b.n	800614a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006138:	1c59      	adds	r1, r3, #1
 800613a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800613c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006146:	09db      	lsrs	r3, r3, #7
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	2b7f      	cmp	r3, #127	; 0x7f
 800614e:	d8f0      	bhi.n	8006132 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	623b      	str	r3, [r7, #32]
 8006168:	e00b      	b.n	8006182 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	b2da      	uxtb	r2, r3
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	1c59      	adds	r1, r3, #1
 8006172:	6279      	str	r1, [r7, #36]	; 0x24
 8006174:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	09db      	lsrs	r3, r3, #7
 8006180:	623b      	str	r3, [r7, #32]
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2b7f      	cmp	r3, #127	; 0x7f
 8006186:	d8f0      	bhi.n	800616a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	627a      	str	r2, [r7, #36]	; 0x24
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006196:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	69b8      	ldr	r0, [r7, #24]
 800619e:	f7ff fdf9 	bl	8005d94 <_SendPacket>
  RECORD_END();
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f383 8811 	msr	BASEPRI, r3
}
 80061a8:	bf00      	nop
 80061aa:	3738      	adds	r7, #56	; 0x38
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	200133e0 	.word	0x200133e0

080061b4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b090      	sub	sp, #64	; 0x40
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061c2:	f3ef 8311 	mrs	r3, BASEPRI
 80061c6:	f04f 0120 	mov.w	r1, #32
 80061ca:	f381 8811 	msr	BASEPRI, r1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	4840      	ldr	r0, [pc, #256]	; (80062d4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061d2:	f7ff fcef 	bl	8005bb4 <_PreparePacket>
 80061d6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	63fa      	str	r2, [r7, #60]	; 0x3c
 800620a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006212:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
 800621c:	e00b      	b.n	8006236 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	b2da      	uxtb	r2, r3
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	6379      	str	r1, [r7, #52]	; 0x34
 8006228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	09db      	lsrs	r3, r3, #7
 8006234:	633b      	str	r3, [r7, #48]	; 0x30
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	2b7f      	cmp	r3, #127	; 0x7f
 800623a:	d8f0      	bhi.n	800621e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	637a      	str	r2, [r7, #52]	; 0x34
 8006242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
 8006254:	e00b      	b.n	800626e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	1c59      	adds	r1, r3, #1
 800625e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006260:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626a:	09db      	lsrs	r3, r3, #7
 800626c:	62bb      	str	r3, [r7, #40]	; 0x28
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2b7f      	cmp	r3, #127	; 0x7f
 8006272:	d8f0      	bhi.n	8006256 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800627a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
 8006288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628a:	623b      	str	r3, [r7, #32]
 800628c:	e00b      	b.n	80062a6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	6279      	str	r1, [r7, #36]	; 0x24
 8006298:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	701a      	strb	r2, [r3, #0]
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	09db      	lsrs	r3, r3, #7
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	2b7f      	cmp	r3, #127	; 0x7f
 80062aa:	d8f0      	bhi.n	800628e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	627a      	str	r2, [r7, #36]	; 0x24
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	6979      	ldr	r1, [r7, #20]
 80062c0:	69b8      	ldr	r0, [r7, #24]
 80062c2:	f7ff fd67 	bl	8005d94 <_SendPacket>
  RECORD_END();
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	f383 8811 	msr	BASEPRI, r3
}
 80062cc:	bf00      	nop
 80062ce:	3740      	adds	r7, #64	; 0x40
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200133e0 	.word	0x200133e0

080062d8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	; 0x30
 80062dc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062de:	4b58      	ldr	r3, [pc, #352]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062e4:	f3ef 8311 	mrs	r3, BASEPRI
 80062e8:	f04f 0120 	mov.w	r1, #32
 80062ec:	f381 8811 	msr	BASEPRI, r1
 80062f0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80062f2:	4b53      	ldr	r3, [pc, #332]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	220a      	movs	r2, #10
 80062f8:	4952      	ldr	r1, [pc, #328]	; (8006444 <SEGGER_SYSVIEW_Start+0x16c>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7f9 ff68 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006306:	200a      	movs	r0, #10
 8006308:	f7ff fe2a 	bl	8005f60 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800630c:	f3ef 8311 	mrs	r3, BASEPRI
 8006310:	f04f 0120 	mov.w	r1, #32
 8006314:	f381 8811 	msr	BASEPRI, r1
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	484b      	ldr	r0, [pc, #300]	; (8006448 <SEGGER_SYSVIEW_Start+0x170>)
 800631c:	f7ff fc4a 	bl	8005bb4 <_PreparePacket>
 8006320:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632a:	4b45      	ldr	r3, [pc, #276]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006330:	e00b      	b.n	800634a <SEGGER_SYSVIEW_Start+0x72>
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	b2da      	uxtb	r2, r3
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	1c59      	adds	r1, r3, #1
 800633a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800633c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	09db      	lsrs	r3, r3, #7
 8006348:	62bb      	str	r3, [r7, #40]	; 0x28
 800634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634c:	2b7f      	cmp	r3, #127	; 0x7f
 800634e:	d8f0      	bhi.n	8006332 <SEGGER_SYSVIEW_Start+0x5a>
 8006350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	701a      	strb	r2, [r3, #0]
 800635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	627b      	str	r3, [r7, #36]	; 0x24
 8006364:	4b36      	ldr	r3, [pc, #216]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	623b      	str	r3, [r7, #32]
 800636a:	e00b      	b.n	8006384 <SEGGER_SYSVIEW_Start+0xac>
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	6279      	str	r1, [r7, #36]	; 0x24
 8006376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800637a:	b2d2      	uxtb	r2, r2
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	09db      	lsrs	r3, r3, #7
 8006382:	623b      	str	r3, [r7, #32]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	2b7f      	cmp	r3, #127	; 0x7f
 8006388:	d8f0      	bhi.n	800636c <SEGGER_SYSVIEW_Start+0x94>
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	627a      	str	r2, [r7, #36]	; 0x24
 8006390:	6a3a      	ldr	r2, [r7, #32]
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	4b28      	ldr	r3, [pc, #160]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e00b      	b.n	80063be <SEGGER_SYSVIEW_Start+0xe6>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	61f9      	str	r1, [r7, #28]
 80063b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <SEGGER_SYSVIEW_Start+0xce>
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	2300      	movs	r3, #0
 80063da:	613b      	str	r3, [r7, #16]
 80063dc:	e00b      	b.n	80063f6 <SEGGER_SYSVIEW_Start+0x11e>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	1c59      	adds	r1, r3, #1
 80063e6:	6179      	str	r1, [r7, #20]
 80063e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	09db      	lsrs	r3, r3, #7
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b7f      	cmp	r3, #127	; 0x7f
 80063fa:	d8f0      	bhi.n	80063de <SEGGER_SYSVIEW_Start+0x106>
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	617a      	str	r2, [r7, #20]
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	b2d2      	uxtb	r2, r2
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800640c:	2218      	movs	r2, #24
 800640e:	6839      	ldr	r1, [r7, #0]
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff fcbf 	bl	8005d94 <_SendPacket>
      RECORD_END();
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800641c:	4b08      	ldr	r3, [pc, #32]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <SEGGER_SYSVIEW_Start+0x168>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800642a:	f000 f9c7 	bl	80067bc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800642e:	f000 f9b1 	bl	8006794 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006432:	f000 fc5f 	bl	8006cf4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006436:	bf00      	nop
 8006438:	3730      	adds	r7, #48	; 0x30
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	200133b0 	.word	0x200133b0
 8006444:	0800839c 	.word	0x0800839c
 8006448:	200133e0 	.word	0x200133e0

0800644c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006452:	f3ef 8311 	mrs	r3, BASEPRI
 8006456:	f04f 0120 	mov.w	r1, #32
 800645a:	f381 8811 	msr	BASEPRI, r1
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	480b      	ldr	r0, [pc, #44]	; (8006490 <SEGGER_SYSVIEW_Stop+0x44>)
 8006462:	f7ff fba7 	bl	8005bb4 <_PreparePacket>
 8006466:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <SEGGER_SYSVIEW_Stop+0x48>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006470:	220b      	movs	r2, #11
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6838      	ldr	r0, [r7, #0]
 8006476:	f7ff fc8d 	bl	8005d94 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <SEGGER_SYSVIEW_Stop+0x48>)
 800647c:	2200      	movs	r2, #0
 800647e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f383 8811 	msr	BASEPRI, r3
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	200133e0 	.word	0x200133e0
 8006494:	200133b0 	.word	0x200133b0

08006498 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b08c      	sub	sp, #48	; 0x30
 800649c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800649e:	f3ef 8311 	mrs	r3, BASEPRI
 80064a2:	f04f 0120 	mov.w	r1, #32
 80064a6:	f381 8811 	msr	BASEPRI, r1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	4845      	ldr	r0, [pc, #276]	; (80065c4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064ae:	f7ff fb81 	bl	8005bb4 <_PreparePacket>
 80064b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064bc:	4b42      	ldr	r3, [pc, #264]	; (80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c2:	e00b      	b.n	80064dc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	09db      	lsrs	r3, r3, #7
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	2b7f      	cmp	r3, #127	; 0x7f
 80064e0:	d8f0      	bhi.n	80064c4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	4b34      	ldr	r3, [pc, #208]	; (80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	623b      	str	r3, [r7, #32]
 80064fc:	e00b      	b.n	8006516 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	b2da      	uxtb	r2, r3
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	6279      	str	r1, [r7, #36]	; 0x24
 8006508:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	09db      	lsrs	r3, r3, #7
 8006514:	623b      	str	r3, [r7, #32]
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	2b7f      	cmp	r3, #127	; 0x7f
 800651a:	d8f0      	bhi.n	80064fe <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	627a      	str	r2, [r7, #36]	; 0x24
 8006522:	6a3a      	ldr	r2, [r7, #32]
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	e00b      	b.n	8006550 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	1c59      	adds	r1, r3, #1
 8006540:	61f9      	str	r1, [r7, #28]
 8006542:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006546:	b2d2      	uxtb	r2, r2
 8006548:	701a      	strb	r2, [r3, #0]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	09db      	lsrs	r3, r3, #7
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b7f      	cmp	r3, #127	; 0x7f
 8006554:	d8f0      	bhi.n	8006538 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	1c5a      	adds	r2, r3, #1
 800655a:	61fa      	str	r2, [r7, #28]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	2300      	movs	r3, #0
 800656c:	613b      	str	r3, [r7, #16]
 800656e:	e00b      	b.n	8006588 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	b2da      	uxtb	r2, r3
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	6179      	str	r1, [r7, #20]
 800657a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	09db      	lsrs	r3, r3, #7
 8006586:	613b      	str	r3, [r7, #16]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	2b7f      	cmp	r3, #127	; 0x7f
 800658c:	d8f0      	bhi.n	8006570 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	617a      	str	r2, [r7, #20]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800659e:	2218      	movs	r2, #24
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	68b8      	ldr	r0, [r7, #8]
 80065a4:	f7ff fbf6 	bl	8005d94 <_SendPacket>
  RECORD_END();
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	4798      	blx	r3
  }
}
 80065bc:	bf00      	nop
 80065be:	3730      	adds	r7, #48	; 0x30
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	200133e0 	.word	0x200133e0
 80065c8:	200133b0 	.word	0x200133b0

080065cc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b092      	sub	sp, #72	; 0x48
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065d4:	f3ef 8311 	mrs	r3, BASEPRI
 80065d8:	f04f 0120 	mov.w	r1, #32
 80065dc:	f381 8811 	msr	BASEPRI, r1
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	486a      	ldr	r0, [pc, #424]	; (800678c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065e4:	f7ff fae6 	bl	8005bb4 <_PreparePacket>
 80065e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	647b      	str	r3, [r7, #68]	; 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b66      	ldr	r3, [pc, #408]	; (8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	643b      	str	r3, [r7, #64]	; 0x40
 80065fe:	e00b      	b.n	8006618 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006602:	b2da      	uxtb	r2, r3
 8006604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006606:	1c59      	adds	r1, r3, #1
 8006608:	6479      	str	r1, [r7, #68]	; 0x44
 800660a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	701a      	strb	r2, [r3, #0]
 8006612:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006614:	09db      	lsrs	r3, r3, #7
 8006616:	643b      	str	r3, [r7, #64]	; 0x40
 8006618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661a:	2b7f      	cmp	r3, #127	; 0x7f
 800661c:	d8f0      	bhi.n	8006600 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800661e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	647a      	str	r2, [r7, #68]	; 0x44
 8006624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006626:	b2d2      	uxtb	r2, r2
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	63bb      	str	r3, [r7, #56]	; 0x38
 8006638:	e00b      	b.n	8006652 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	b2da      	uxtb	r2, r3
 800663e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006640:	1c59      	adds	r1, r3, #1
 8006642:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006644:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006648:	b2d2      	uxtb	r2, r2
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	09db      	lsrs	r3, r3, #7
 8006650:	63bb      	str	r3, [r7, #56]	; 0x38
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	2b7f      	cmp	r3, #127	; 0x7f
 8006656:	d8f0      	bhi.n	800663a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800665e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006660:	b2d2      	uxtb	r2, r2
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2220      	movs	r2, #32
 800666e:	4619      	mov	r1, r3
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f7ff fa4f 	bl	8005b14 <_EncodeStr>
 8006676:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006678:	2209      	movs	r2, #9
 800667a:	68f9      	ldr	r1, [r7, #12]
 800667c:	6938      	ldr	r0, [r7, #16]
 800667e:	f7ff fb89 	bl	8005d94 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	4b40      	ldr	r3, [pc, #256]	; (8006790 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	633b      	str	r3, [r7, #48]	; 0x30
 8006696:	e00b      	b.n	80066b0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	b2da      	uxtb	r2, r3
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	6379      	str	r1, [r7, #52]	; 0x34
 80066a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ac:	09db      	lsrs	r3, r3, #7
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	2b7f      	cmp	r3, #127	; 0x7f
 80066b4:	d8f0      	bhi.n	8006698 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	637a      	str	r2, [r7, #52]	; 0x34
 80066bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80066d0:	e00b      	b.n	80066ea <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	1c59      	adds	r1, r3, #1
 80066da:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	09db      	lsrs	r3, r3, #7
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	2b7f      	cmp	r3, #127	; 0x7f
 80066ee:	d8f0      	bhi.n	80066d2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	623b      	str	r3, [r7, #32]
 800670a:	e00b      	b.n	8006724 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	b2da      	uxtb	r2, r3
 8006710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	6279      	str	r1, [r7, #36]	; 0x24
 8006716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	623b      	str	r3, [r7, #32]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	2b7f      	cmp	r3, #127	; 0x7f
 8006728:	d8f0      	bhi.n	800670c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	627a      	str	r2, [r7, #36]	; 0x24
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	61fb      	str	r3, [r7, #28]
 800673e:	2300      	movs	r3, #0
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e00b      	b.n	800675c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	61f9      	str	r1, [r7, #28]
 800674e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d8f0      	bhi.n	8006744 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	61fa      	str	r2, [r7, #28]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006772:	2215      	movs	r2, #21
 8006774:	68f9      	ldr	r1, [r7, #12]
 8006776:	6938      	ldr	r0, [r7, #16]
 8006778:	f7ff fb0c 	bl	8005d94 <_SendPacket>
  RECORD_END();
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f383 8811 	msr	BASEPRI, r3
}
 8006782:	bf00      	nop
 8006784:	3748      	adds	r7, #72	; 0x48
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200133e0 	.word	0x200133e0
 8006790:	200133b0 	.word	0x200133b0

08006794 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006798:	4b07      	ldr	r3, [pc, #28]	; (80067b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067aa:	4b03      	ldr	r3, [pc, #12]	; (80067b8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	4798      	blx	r3
  }
}
 80067b2:	bf00      	nop
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200133b0 	.word	0x200133b0

080067bc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d01a      	beq.n	8006800 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80067ca:	4b13      	ldr	r3, [pc, #76]	; (8006818 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d015      	beq.n	8006800 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80067d4:	4b10      	ldr	r3, [pc, #64]	; (8006818 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4798      	blx	r3
 80067dc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067e0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80067e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	000a      	movs	r2, r1
 80067f0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80067f2:	4613      	mov	r3, r2
 80067f4:	461a      	mov	r2, r3
 80067f6:	4621      	mov	r1, r4
 80067f8:	200d      	movs	r0, #13
 80067fa:	f7ff fc0b 	bl	8006014 <SEGGER_SYSVIEW_RecordU32x2>
 80067fe:	e006      	b.n	800680e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4619      	mov	r1, r3
 8006806:	200c      	movs	r0, #12
 8006808:	f7ff fbc8 	bl	8005f9c <SEGGER_SYSVIEW_RecordU32>
  }
}
 800680c:	bf00      	nop
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bd90      	pop	{r4, r7, pc}
 8006816:	bf00      	nop
 8006818:	200133b0 	.word	0x200133b0
 800681c:	e0001004 	.word	0xe0001004

08006820 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006826:	f3ef 8311 	mrs	r3, BASEPRI
 800682a:	f04f 0120 	mov.w	r1, #32
 800682e:	f381 8811 	msr	BASEPRI, r1
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	4819      	ldr	r0, [pc, #100]	; (800689c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006836:	f7ff f9bd 	bl	8005bb4 <_PreparePacket>
 800683a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006840:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006848:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e00b      	b.n	800686c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	b2da      	uxtb	r2, r3
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	6179      	str	r1, [r7, #20]
 800685e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006862:	b2d2      	uxtb	r2, r2
 8006864:	701a      	strb	r2, [r3, #0]
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	09db      	lsrs	r3, r3, #7
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	2b7f      	cmp	r3, #127	; 0x7f
 8006870:	d8f0      	bhi.n	8006854 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	617a      	str	r2, [r7, #20]
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006882:	2202      	movs	r2, #2
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	68b8      	ldr	r0, [r7, #8]
 8006888:	f7ff fa84 	bl	8005d94 <_SendPacket>
  RECORD_END();
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f383 8811 	msr	BASEPRI, r3
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	200133e0 	.word	0x200133e0
 80068a0:	e000ed04 	.word	0xe000ed04

080068a4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068aa:	f3ef 8311 	mrs	r3, BASEPRI
 80068ae:	f04f 0120 	mov.w	r1, #32
 80068b2:	f381 8811 	msr	BASEPRI, r1
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	4807      	ldr	r0, [pc, #28]	; (80068d8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80068ba:	f7ff f97b 	bl	8005bb4 <_PreparePacket>
 80068be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80068c0:	2203      	movs	r2, #3
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f7ff fa65 	bl	8005d94 <_SendPacket>
  RECORD_END();
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f383 8811 	msr	BASEPRI, r3
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	200133e0 	.word	0x200133e0

080068dc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80068e2:	f3ef 8311 	mrs	r3, BASEPRI
 80068e6:	f04f 0120 	mov.w	r1, #32
 80068ea:	f381 8811 	msr	BASEPRI, r1
 80068ee:	607b      	str	r3, [r7, #4]
 80068f0:	4807      	ldr	r0, [pc, #28]	; (8006910 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80068f2:	f7ff f95f 	bl	8005bb4 <_PreparePacket>
 80068f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80068f8:	2212      	movs	r2, #18
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6838      	ldr	r0, [r7, #0]
 80068fe:	f7ff fa49 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f383 8811 	msr	BASEPRI, r3
}
 8006908:	bf00      	nop
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	200133e0 	.word	0x200133e0

08006914 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800691a:	f3ef 8311 	mrs	r3, BASEPRI
 800691e:	f04f 0120 	mov.w	r1, #32
 8006922:	f381 8811 	msr	BASEPRI, r1
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	4807      	ldr	r0, [pc, #28]	; (8006948 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800692a:	f7ff f943 	bl	8005bb4 <_PreparePacket>
 800692e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006930:	2211      	movs	r2, #17
 8006932:	6839      	ldr	r1, [r7, #0]
 8006934:	6838      	ldr	r0, [r7, #0]
 8006936:	f7ff fa2d 	bl	8005d94 <_SendPacket>
  RECORD_END();
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f383 8811 	msr	BASEPRI, r3
}
 8006940:	bf00      	nop
 8006942:	3708      	adds	r7, #8
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200133e0 	.word	0x200133e0

0800694c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006954:	f3ef 8311 	mrs	r3, BASEPRI
 8006958:	f04f 0120 	mov.w	r1, #32
 800695c:	f381 8811 	msr	BASEPRI, r1
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	4819      	ldr	r0, [pc, #100]	; (80069c8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006964:	f7ff f926 	bl	8005bb4 <_PreparePacket>
 8006968:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800696e:	4b17      	ldr	r3, [pc, #92]	; (80069cc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	e00b      	b.n	800699a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	1c59      	adds	r1, r3, #1
 800698a:	61f9      	str	r1, [r7, #28]
 800698c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b7f      	cmp	r3, #127	; 0x7f
 800699e:	d8f0      	bhi.n	8006982 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	61fa      	str	r2, [r7, #28]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80069b0:	2208      	movs	r2, #8
 80069b2:	68f9      	ldr	r1, [r7, #12]
 80069b4:	6938      	ldr	r0, [r7, #16]
 80069b6:	f7ff f9ed 	bl	8005d94 <_SendPacket>
  RECORD_END();
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f383 8811 	msr	BASEPRI, r3
}
 80069c0:	bf00      	nop
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	200133e0 	.word	0x200133e0
 80069cc:	200133b0 	.word	0x200133b0

080069d0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069d8:	f3ef 8311 	mrs	r3, BASEPRI
 80069dc:	f04f 0120 	mov.w	r1, #32
 80069e0:	f381 8811 	msr	BASEPRI, r1
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	4819      	ldr	r0, [pc, #100]	; (8006a4c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80069e8:	f7ff f8e4 	bl	8005bb4 <_PreparePacket>
 80069ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069f2:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	61bb      	str	r3, [r7, #24]
 8006a04:	e00b      	b.n	8006a1e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	1c59      	adds	r1, r3, #1
 8006a0e:	61f9      	str	r1, [r7, #28]
 8006a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	09db      	lsrs	r3, r3, #7
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b7f      	cmp	r3, #127	; 0x7f
 8006a22:	d8f0      	bhi.n	8006a06 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	61fa      	str	r2, [r7, #28]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006a34:	2204      	movs	r2, #4
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	6938      	ldr	r0, [r7, #16]
 8006a3a:	f7ff f9ab 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f383 8811 	msr	BASEPRI, r3
}
 8006a44:	bf00      	nop
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200133e0 	.word	0x200133e0
 8006a50:	200133b0 	.word	0x200133b0

08006a54 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b088      	sub	sp, #32
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a60:	f04f 0120 	mov.w	r1, #32
 8006a64:	f381 8811 	msr	BASEPRI, r1
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	4819      	ldr	r0, [pc, #100]	; (8006ad0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006a6c:	f7ff f8a2 	bl	8005bb4 <_PreparePacket>
 8006a70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a76:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	61fb      	str	r3, [r7, #28]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	e00b      	b.n	8006aa2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	1c59      	adds	r1, r3, #1
 8006a92:	61f9      	str	r1, [r7, #28]
 8006a94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	09db      	lsrs	r3, r3, #7
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa6:	d8f0      	bhi.n	8006a8a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	61fa      	str	r2, [r7, #28]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006ab8:	2206      	movs	r2, #6
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	6938      	ldr	r0, [r7, #16]
 8006abe:	f7ff f969 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f383 8811 	msr	BASEPRI, r3
}
 8006ac8:	bf00      	nop
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	200133e0 	.word	0x200133e0
 8006ad4:	200133b0 	.word	0x200133b0

08006ad8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	; 0x28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae6:	f04f 0120 	mov.w	r1, #32
 8006aea:	f381 8811 	msr	BASEPRI, r1
 8006aee:	617b      	str	r3, [r7, #20]
 8006af0:	4827      	ldr	r0, [pc, #156]	; (8006b90 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006af2:	f7ff f85f 	bl	8005bb4 <_PreparePacket>
 8006af6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	623b      	str	r3, [r7, #32]
 8006b0e:	e00b      	b.n	8006b28 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	1c59      	adds	r1, r3, #1
 8006b18:	6279      	str	r1, [r7, #36]	; 0x24
 8006b1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	09db      	lsrs	r3, r3, #7
 8006b26:	623b      	str	r3, [r7, #32]
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2c:	d8f0      	bhi.n	8006b10 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	1c5a      	adds	r2, r3, #1
 8006b32:	627a      	str	r2, [r7, #36]	; 0x24
 8006b34:	6a3a      	ldr	r2, [r7, #32]
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	61bb      	str	r3, [r7, #24]
 8006b46:	e00b      	b.n	8006b60 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	61f9      	str	r1, [r7, #28]
 8006b52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	09db      	lsrs	r3, r3, #7
 8006b5e:	61bb      	str	r3, [r7, #24]
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b7f      	cmp	r3, #127	; 0x7f
 8006b64:	d8f0      	bhi.n	8006b48 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	61fa      	str	r2, [r7, #28]
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006b76:	2207      	movs	r2, #7
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f7ff f90a 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f383 8811 	msr	BASEPRI, r3
}
 8006b86:	bf00      	nop
 8006b88:	3728      	adds	r7, #40	; 0x28
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200133e0 	.word	0x200133e0
 8006b94:	200133b0 	.word	0x200133b0

08006b98 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	1ad3      	subs	r3, r2, r3
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	200133b0 	.word	0x200133b0

08006bb8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08c      	sub	sp, #48	; 0x30
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006bc2:	4b3b      	ldr	r3, [pc, #236]	; (8006cb0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d06d      	beq.n	8006ca6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006bca:	4b39      	ldr	r3, [pc, #228]	; (8006cb0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd4:	e008      	b.n	8006be8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d007      	beq.n	8006bf2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	3301      	adds	r3, #1
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d3f2      	bcc.n	8006bd6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006bf0:	e000      	b.n	8006bf4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006bf2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d055      	beq.n	8006ca6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006bfe:	f04f 0120 	mov.w	r1, #32
 8006c02:	f381 8811 	msr	BASEPRI, r1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	482a      	ldr	r0, [pc, #168]	; (8006cb4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c0a:	f7fe ffd3 	bl	8005bb4 <_PreparePacket>
 8006c0e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	623b      	str	r3, [r7, #32]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	6279      	str	r1, [r7, #36]	; 0x24
 8006c28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	623b      	str	r3, [r7, #32]
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	2b7f      	cmp	r3, #127	; 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_SendModule+0x66>
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	627a      	str	r2, [r7, #36]	; 0x24
 8006c42:	6a3a      	ldr	r2, [r7, #32]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	61fb      	str	r3, [r7, #28]
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	61bb      	str	r3, [r7, #24]
 8006c56:	e00b      	b.n	8006c70 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	1c59      	adds	r1, r3, #1
 8006c60:	61f9      	str	r1, [r7, #28]
 8006c62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	09db      	lsrs	r3, r3, #7
 8006c6e:	61bb      	str	r3, [r7, #24]
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2b7f      	cmp	r3, #127	; 0x7f
 8006c74:	d8f0      	bhi.n	8006c58 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	61fa      	str	r2, [r7, #28]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7fe ff40 	bl	8005b14 <_EncodeStr>
 8006c94:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006c96:	2216      	movs	r2, #22
 8006c98:	68f9      	ldr	r1, [r7, #12]
 8006c9a:	6938      	ldr	r0, [r7, #16]
 8006c9c:	f7ff f87a 	bl	8005d94 <_SendPacket>
      RECORD_END();
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	3730      	adds	r7, #48	; 0x30
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200133d8 	.word	0x200133d8
 8006cb4:	200133e0 	.word	0x200133e0

08006cb8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006cbe:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00f      	beq.n	8006ce6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f2      	bne.n	8006ccc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ce6:	bf00      	nop
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	200133d8 	.word	0x200133d8

08006cf4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006cfe:	f04f 0120 	mov.w	r1, #32
 8006d02:	f381 8811 	msr	BASEPRI, r1
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	4817      	ldr	r0, [pc, #92]	; (8006d68 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d0a:	f7fe ff53 	bl	8005bb4 <_PreparePacket>
 8006d0e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	4b14      	ldr	r3, [pc, #80]	; (8006d6c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	e00b      	b.n	8006d38 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	1c59      	adds	r1, r3, #1
 8006d28:	6179      	str	r1, [r7, #20]
 8006d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	09db      	lsrs	r3, r3, #7
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3c:	d8f0      	bhi.n	8006d20 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	617a      	str	r2, [r7, #20]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d4e:	221b      	movs	r2, #27
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	68b8      	ldr	r0, [r7, #8]
 8006d54:	f7ff f81e 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f383 8811 	msr	BASEPRI, r3
}
 8006d5e:	bf00      	nop
 8006d60:	3718      	adds	r7, #24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200133e0 	.word	0x200133e0
 8006d6c:	200133dc 	.word	0x200133dc

08006d70 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d78:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7c:	f04f 0120 	mov.w	r1, #32
 8006d80:	f381 8811 	msr	BASEPRI, r1
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	4827      	ldr	r0, [pc, #156]	; (8006e24 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006d88:	f7fe ff14 	bl	8005bb4 <_PreparePacket>
 8006d8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d8e:	2280      	movs	r2, #128	; 0x80
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	6938      	ldr	r0, [r7, #16]
 8006d94:	f7fe febe 	bl	8005b14 <_EncodeStr>
 8006d98:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d9e:	2301      	movs	r3, #1
 8006da0:	623b      	str	r3, [r7, #32]
 8006da2:	e00b      	b.n	8006dbc <SEGGER_SYSVIEW_Warn+0x4c>
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1c59      	adds	r1, r3, #1
 8006dac:	6279      	str	r1, [r7, #36]	; 0x24
 8006dae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	09db      	lsrs	r3, r3, #7
 8006dba:	623b      	str	r3, [r7, #32]
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc0:	d8f0      	bhi.n	8006da4 <SEGGER_SYSVIEW_Warn+0x34>
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	1c5a      	adds	r2, r3, #1
 8006dc6:	627a      	str	r2, [r7, #36]	; 0x24
 8006dc8:	6a3a      	ldr	r2, [r7, #32]
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	701a      	strb	r2, [r3, #0]
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e00b      	b.n	8006df4 <SEGGER_SYSVIEW_Warn+0x84>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	1c59      	adds	r1, r3, #1
 8006de4:	61f9      	str	r1, [r7, #28]
 8006de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	09db      	lsrs	r3, r3, #7
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b7f      	cmp	r3, #127	; 0x7f
 8006df8:	d8f0      	bhi.n	8006ddc <SEGGER_SYSVIEW_Warn+0x6c>
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	61fa      	str	r2, [r7, #28]
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e0a:	221a      	movs	r2, #26
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	6938      	ldr	r0, [r7, #16]
 8006e10:	f7fe ffc0 	bl	8005d94 <_SendPacket>
  RECORD_END();
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f383 8811 	msr	BASEPRI, r3
}
 8006e1a:	bf00      	nop
 8006e1c:	3728      	adds	r7, #40	; 0x28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200133e0 	.word	0x200133e0

08006e28 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	6879      	ldr	r1, [r7, #4]
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	f7fe fe44 	bl	8005ac8 <SEGGER_RTT_Write>
  return len;
 8006e40:	683b      	ldr	r3, [r7, #0]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <__errno>:
 8006e4c:	4b01      	ldr	r3, [pc, #4]	; (8006e54 <__errno+0x8>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	20000014 	.word	0x20000014

08006e58 <__libc_init_array>:
 8006e58:	b570      	push	{r4, r5, r6, lr}
 8006e5a:	4d0d      	ldr	r5, [pc, #52]	; (8006e90 <__libc_init_array+0x38>)
 8006e5c:	4c0d      	ldr	r4, [pc, #52]	; (8006e94 <__libc_init_array+0x3c>)
 8006e5e:	1b64      	subs	r4, r4, r5
 8006e60:	10a4      	asrs	r4, r4, #2
 8006e62:	2600      	movs	r6, #0
 8006e64:	42a6      	cmp	r6, r4
 8006e66:	d109      	bne.n	8006e7c <__libc_init_array+0x24>
 8006e68:	4d0b      	ldr	r5, [pc, #44]	; (8006e98 <__libc_init_array+0x40>)
 8006e6a:	4c0c      	ldr	r4, [pc, #48]	; (8006e9c <__libc_init_array+0x44>)
 8006e6c:	f001 f9f0 	bl	8008250 <_init>
 8006e70:	1b64      	subs	r4, r4, r5
 8006e72:	10a4      	asrs	r4, r4, #2
 8006e74:	2600      	movs	r6, #0
 8006e76:	42a6      	cmp	r6, r4
 8006e78:	d105      	bne.n	8006e86 <__libc_init_array+0x2e>
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e80:	4798      	blx	r3
 8006e82:	3601      	adds	r6, #1
 8006e84:	e7ee      	b.n	8006e64 <__libc_init_array+0xc>
 8006e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8a:	4798      	blx	r3
 8006e8c:	3601      	adds	r6, #1
 8006e8e:	e7f2      	b.n	8006e76 <__libc_init_array+0x1e>
 8006e90:	080084fc 	.word	0x080084fc
 8006e94:	080084fc 	.word	0x080084fc
 8006e98:	080084fc 	.word	0x080084fc
 8006e9c:	08008500 	.word	0x08008500

08006ea0 <memcmp>:
 8006ea0:	b530      	push	{r4, r5, lr}
 8006ea2:	3901      	subs	r1, #1
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	42a2      	cmp	r2, r4
 8006ea8:	d101      	bne.n	8006eae <memcmp+0xe>
 8006eaa:	2000      	movs	r0, #0
 8006eac:	e005      	b.n	8006eba <memcmp+0x1a>
 8006eae:	5d03      	ldrb	r3, [r0, r4]
 8006eb0:	3401      	adds	r4, #1
 8006eb2:	5d0d      	ldrb	r5, [r1, r4]
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	d0f6      	beq.n	8006ea6 <memcmp+0x6>
 8006eb8:	1b58      	subs	r0, r3, r5
 8006eba:	bd30      	pop	{r4, r5, pc}

08006ebc <memcpy>:
 8006ebc:	440a      	add	r2, r1
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec4:	d100      	bne.n	8006ec8 <memcpy+0xc>
 8006ec6:	4770      	bx	lr
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed2:	4291      	cmp	r1, r2
 8006ed4:	d1f9      	bne.n	8006eca <memcpy+0xe>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <memset>:
 8006ed8:	4402      	add	r2, r0
 8006eda:	4603      	mov	r3, r0
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d100      	bne.n	8006ee2 <memset+0xa>
 8006ee0:	4770      	bx	lr
 8006ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee6:	e7f9      	b.n	8006edc <memset+0x4>

08006ee8 <rand>:
 8006ee8:	4b17      	ldr	r3, [pc, #92]	; (8006f48 <rand+0x60>)
 8006eea:	b510      	push	{r4, lr}
 8006eec:	681c      	ldr	r4, [r3, #0]
 8006eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ef0:	b9b3      	cbnz	r3, 8006f20 <rand+0x38>
 8006ef2:	2018      	movs	r0, #24
 8006ef4:	f000 f888 	bl	8007008 <malloc>
 8006ef8:	63a0      	str	r0, [r4, #56]	; 0x38
 8006efa:	b928      	cbnz	r0, 8006f08 <rand+0x20>
 8006efc:	4602      	mov	r2, r0
 8006efe:	4b13      	ldr	r3, [pc, #76]	; (8006f4c <rand+0x64>)
 8006f00:	4813      	ldr	r0, [pc, #76]	; (8006f50 <rand+0x68>)
 8006f02:	214e      	movs	r1, #78	; 0x4e
 8006f04:	f000 f850 	bl	8006fa8 <__assert_func>
 8006f08:	4a12      	ldr	r2, [pc, #72]	; (8006f54 <rand+0x6c>)
 8006f0a:	4b13      	ldr	r3, [pc, #76]	; (8006f58 <rand+0x70>)
 8006f0c:	e9c0 2300 	strd	r2, r3, [r0]
 8006f10:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <rand+0x74>)
 8006f12:	6083      	str	r3, [r0, #8]
 8006f14:	230b      	movs	r3, #11
 8006f16:	8183      	strh	r3, [r0, #12]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006f20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f22:	480f      	ldr	r0, [pc, #60]	; (8006f60 <rand+0x78>)
 8006f24:	690a      	ldr	r2, [r1, #16]
 8006f26:	694b      	ldr	r3, [r1, #20]
 8006f28:	4c0e      	ldr	r4, [pc, #56]	; (8006f64 <rand+0x7c>)
 8006f2a:	4350      	muls	r0, r2
 8006f2c:	fb04 0003 	mla	r0, r4, r3, r0
 8006f30:	fba2 3404 	umull	r3, r4, r2, r4
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	4404      	add	r4, r0
 8006f38:	f144 0000 	adc.w	r0, r4, #0
 8006f3c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8006f40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	bf00      	nop
 8006f48:	20000014 	.word	0x20000014
 8006f4c:	080083ac 	.word	0x080083ac
 8006f50:	080083c3 	.word	0x080083c3
 8006f54:	abcd330e 	.word	0xabcd330e
 8006f58:	e66d1234 	.word	0xe66d1234
 8006f5c:	0005deec 	.word	0x0005deec
 8006f60:	5851f42d 	.word	0x5851f42d
 8006f64:	4c957f2d 	.word	0x4c957f2d

08006f68 <siprintf>:
 8006f68:	b40e      	push	{r1, r2, r3}
 8006f6a:	b500      	push	{lr}
 8006f6c:	b09c      	sub	sp, #112	; 0x70
 8006f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f70:	9002      	str	r0, [sp, #8]
 8006f72:	9006      	str	r0, [sp, #24]
 8006f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f78:	4809      	ldr	r0, [pc, #36]	; (8006fa0 <siprintf+0x38>)
 8006f7a:	9107      	str	r1, [sp, #28]
 8006f7c:	9104      	str	r1, [sp, #16]
 8006f7e:	4909      	ldr	r1, [pc, #36]	; (8006fa4 <siprintf+0x3c>)
 8006f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f84:	9105      	str	r1, [sp, #20]
 8006f86:	6800      	ldr	r0, [r0, #0]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	a902      	add	r1, sp, #8
 8006f8c:	f000 f94a 	bl	8007224 <_svfiprintf_r>
 8006f90:	9b02      	ldr	r3, [sp, #8]
 8006f92:	2200      	movs	r2, #0
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	b01c      	add	sp, #112	; 0x70
 8006f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f9c:	b003      	add	sp, #12
 8006f9e:	4770      	bx	lr
 8006fa0:	20000014 	.word	0x20000014
 8006fa4:	ffff0208 	.word	0xffff0208

08006fa8 <__assert_func>:
 8006fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006faa:	4614      	mov	r4, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <__assert_func+0x2c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	68d8      	ldr	r0, [r3, #12]
 8006fb6:	b14c      	cbz	r4, 8006fcc <__assert_func+0x24>
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <__assert_func+0x30>)
 8006fba:	9100      	str	r1, [sp, #0]
 8006fbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fc0:	4906      	ldr	r1, [pc, #24]	; (8006fdc <__assert_func+0x34>)
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	f000 f80e 	bl	8006fe4 <fiprintf>
 8006fc8:	f000 fdea 	bl	8007ba0 <abort>
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <__assert_func+0x38>)
 8006fce:	461c      	mov	r4, r3
 8006fd0:	e7f3      	b.n	8006fba <__assert_func+0x12>
 8006fd2:	bf00      	nop
 8006fd4:	20000014 	.word	0x20000014
 8006fd8:	08008422 	.word	0x08008422
 8006fdc:	0800842f 	.word	0x0800842f
 8006fe0:	0800845d 	.word	0x0800845d

08006fe4 <fiprintf>:
 8006fe4:	b40e      	push	{r1, r2, r3}
 8006fe6:	b503      	push	{r0, r1, lr}
 8006fe8:	4601      	mov	r1, r0
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <fiprintf+0x20>)
 8006fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	f000 fa3f 	bl	8007478 <_vfiprintf_r>
 8006ffa:	b002      	add	sp, #8
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b003      	add	sp, #12
 8007002:	4770      	bx	lr
 8007004:	20000014 	.word	0x20000014

08007008 <malloc>:
 8007008:	4b02      	ldr	r3, [pc, #8]	; (8007014 <malloc+0xc>)
 800700a:	4601      	mov	r1, r0
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	f000 b853 	b.w	80070b8 <_malloc_r>
 8007012:	bf00      	nop
 8007014:	20000014 	.word	0x20000014

08007018 <_free_r>:
 8007018:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800701a:	2900      	cmp	r1, #0
 800701c:	d048      	beq.n	80070b0 <_free_r+0x98>
 800701e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007022:	9001      	str	r0, [sp, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	f1a1 0404 	sub.w	r4, r1, #4
 800702a:	bfb8      	it	lt
 800702c:	18e4      	addlt	r4, r4, r3
 800702e:	f000 fff7 	bl	8008020 <__malloc_lock>
 8007032:	4a20      	ldr	r2, [pc, #128]	; (80070b4 <_free_r+0x9c>)
 8007034:	9801      	ldr	r0, [sp, #4]
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	4615      	mov	r5, r2
 800703a:	b933      	cbnz	r3, 800704a <_free_r+0x32>
 800703c:	6063      	str	r3, [r4, #4]
 800703e:	6014      	str	r4, [r2, #0]
 8007040:	b003      	add	sp, #12
 8007042:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007046:	f000 bff1 	b.w	800802c <__malloc_unlock>
 800704a:	42a3      	cmp	r3, r4
 800704c:	d90b      	bls.n	8007066 <_free_r+0x4e>
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	1862      	adds	r2, r4, r1
 8007052:	4293      	cmp	r3, r2
 8007054:	bf04      	itt	eq
 8007056:	681a      	ldreq	r2, [r3, #0]
 8007058:	685b      	ldreq	r3, [r3, #4]
 800705a:	6063      	str	r3, [r4, #4]
 800705c:	bf04      	itt	eq
 800705e:	1852      	addeq	r2, r2, r1
 8007060:	6022      	streq	r2, [r4, #0]
 8007062:	602c      	str	r4, [r5, #0]
 8007064:	e7ec      	b.n	8007040 <_free_r+0x28>
 8007066:	461a      	mov	r2, r3
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	b10b      	cbz	r3, 8007070 <_free_r+0x58>
 800706c:	42a3      	cmp	r3, r4
 800706e:	d9fa      	bls.n	8007066 <_free_r+0x4e>
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	1855      	adds	r5, r2, r1
 8007074:	42a5      	cmp	r5, r4
 8007076:	d10b      	bne.n	8007090 <_free_r+0x78>
 8007078:	6824      	ldr	r4, [r4, #0]
 800707a:	4421      	add	r1, r4
 800707c:	1854      	adds	r4, r2, r1
 800707e:	42a3      	cmp	r3, r4
 8007080:	6011      	str	r1, [r2, #0]
 8007082:	d1dd      	bne.n	8007040 <_free_r+0x28>
 8007084:	681c      	ldr	r4, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	6053      	str	r3, [r2, #4]
 800708a:	4421      	add	r1, r4
 800708c:	6011      	str	r1, [r2, #0]
 800708e:	e7d7      	b.n	8007040 <_free_r+0x28>
 8007090:	d902      	bls.n	8007098 <_free_r+0x80>
 8007092:	230c      	movs	r3, #12
 8007094:	6003      	str	r3, [r0, #0]
 8007096:	e7d3      	b.n	8007040 <_free_r+0x28>
 8007098:	6825      	ldr	r5, [r4, #0]
 800709a:	1961      	adds	r1, r4, r5
 800709c:	428b      	cmp	r3, r1
 800709e:	bf04      	itt	eq
 80070a0:	6819      	ldreq	r1, [r3, #0]
 80070a2:	685b      	ldreq	r3, [r3, #4]
 80070a4:	6063      	str	r3, [r4, #4]
 80070a6:	bf04      	itt	eq
 80070a8:	1949      	addeq	r1, r1, r5
 80070aa:	6021      	streq	r1, [r4, #0]
 80070ac:	6054      	str	r4, [r2, #4]
 80070ae:	e7c7      	b.n	8007040 <_free_r+0x28>
 80070b0:	b003      	add	sp, #12
 80070b2:	bd30      	pop	{r4, r5, pc}
 80070b4:	200134c4 	.word	0x200134c4

080070b8 <_malloc_r>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	1ccd      	adds	r5, r1, #3
 80070bc:	f025 0503 	bic.w	r5, r5, #3
 80070c0:	3508      	adds	r5, #8
 80070c2:	2d0c      	cmp	r5, #12
 80070c4:	bf38      	it	cc
 80070c6:	250c      	movcc	r5, #12
 80070c8:	2d00      	cmp	r5, #0
 80070ca:	4606      	mov	r6, r0
 80070cc:	db01      	blt.n	80070d2 <_malloc_r+0x1a>
 80070ce:	42a9      	cmp	r1, r5
 80070d0:	d903      	bls.n	80070da <_malloc_r+0x22>
 80070d2:	230c      	movs	r3, #12
 80070d4:	6033      	str	r3, [r6, #0]
 80070d6:	2000      	movs	r0, #0
 80070d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070da:	f000 ffa1 	bl	8008020 <__malloc_lock>
 80070de:	4921      	ldr	r1, [pc, #132]	; (8007164 <_malloc_r+0xac>)
 80070e0:	680a      	ldr	r2, [r1, #0]
 80070e2:	4614      	mov	r4, r2
 80070e4:	b99c      	cbnz	r4, 800710e <_malloc_r+0x56>
 80070e6:	4f20      	ldr	r7, [pc, #128]	; (8007168 <_malloc_r+0xb0>)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	b923      	cbnz	r3, 80070f6 <_malloc_r+0x3e>
 80070ec:	4621      	mov	r1, r4
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 fc86 	bl	8007a00 <_sbrk_r>
 80070f4:	6038      	str	r0, [r7, #0]
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f000 fc81 	bl	8007a00 <_sbrk_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d123      	bne.n	800714a <_malloc_r+0x92>
 8007102:	230c      	movs	r3, #12
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	4630      	mov	r0, r6
 8007108:	f000 ff90 	bl	800802c <__malloc_unlock>
 800710c:	e7e3      	b.n	80070d6 <_malloc_r+0x1e>
 800710e:	6823      	ldr	r3, [r4, #0]
 8007110:	1b5b      	subs	r3, r3, r5
 8007112:	d417      	bmi.n	8007144 <_malloc_r+0x8c>
 8007114:	2b0b      	cmp	r3, #11
 8007116:	d903      	bls.n	8007120 <_malloc_r+0x68>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	441c      	add	r4, r3
 800711c:	6025      	str	r5, [r4, #0]
 800711e:	e004      	b.n	800712a <_malloc_r+0x72>
 8007120:	6863      	ldr	r3, [r4, #4]
 8007122:	42a2      	cmp	r2, r4
 8007124:	bf0c      	ite	eq
 8007126:	600b      	streq	r3, [r1, #0]
 8007128:	6053      	strne	r3, [r2, #4]
 800712a:	4630      	mov	r0, r6
 800712c:	f000 ff7e 	bl	800802c <__malloc_unlock>
 8007130:	f104 000b 	add.w	r0, r4, #11
 8007134:	1d23      	adds	r3, r4, #4
 8007136:	f020 0007 	bic.w	r0, r0, #7
 800713a:	1ac2      	subs	r2, r0, r3
 800713c:	d0cc      	beq.n	80070d8 <_malloc_r+0x20>
 800713e:	1a1b      	subs	r3, r3, r0
 8007140:	50a3      	str	r3, [r4, r2]
 8007142:	e7c9      	b.n	80070d8 <_malloc_r+0x20>
 8007144:	4622      	mov	r2, r4
 8007146:	6864      	ldr	r4, [r4, #4]
 8007148:	e7cc      	b.n	80070e4 <_malloc_r+0x2c>
 800714a:	1cc4      	adds	r4, r0, #3
 800714c:	f024 0403 	bic.w	r4, r4, #3
 8007150:	42a0      	cmp	r0, r4
 8007152:	d0e3      	beq.n	800711c <_malloc_r+0x64>
 8007154:	1a21      	subs	r1, r4, r0
 8007156:	4630      	mov	r0, r6
 8007158:	f000 fc52 	bl	8007a00 <_sbrk_r>
 800715c:	3001      	adds	r0, #1
 800715e:	d1dd      	bne.n	800711c <_malloc_r+0x64>
 8007160:	e7cf      	b.n	8007102 <_malloc_r+0x4a>
 8007162:	bf00      	nop
 8007164:	200134c4 	.word	0x200134c4
 8007168:	200134c8 	.word	0x200134c8

0800716c <__ssputs_r>:
 800716c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	688e      	ldr	r6, [r1, #8]
 8007172:	429e      	cmp	r6, r3
 8007174:	4682      	mov	sl, r0
 8007176:	460c      	mov	r4, r1
 8007178:	4690      	mov	r8, r2
 800717a:	461f      	mov	r7, r3
 800717c:	d838      	bhi.n	80071f0 <__ssputs_r+0x84>
 800717e:	898a      	ldrh	r2, [r1, #12]
 8007180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007184:	d032      	beq.n	80071ec <__ssputs_r+0x80>
 8007186:	6825      	ldr	r5, [r4, #0]
 8007188:	6909      	ldr	r1, [r1, #16]
 800718a:	eba5 0901 	sub.w	r9, r5, r1
 800718e:	6965      	ldr	r5, [r4, #20]
 8007190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007194:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007198:	3301      	adds	r3, #1
 800719a:	444b      	add	r3, r9
 800719c:	106d      	asrs	r5, r5, #1
 800719e:	429d      	cmp	r5, r3
 80071a0:	bf38      	it	cc
 80071a2:	461d      	movcc	r5, r3
 80071a4:	0553      	lsls	r3, r2, #21
 80071a6:	d531      	bpl.n	800720c <__ssputs_r+0xa0>
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7ff ff85 	bl	80070b8 <_malloc_r>
 80071ae:	4606      	mov	r6, r0
 80071b0:	b950      	cbnz	r0, 80071c8 <__ssputs_r+0x5c>
 80071b2:	230c      	movs	r3, #12
 80071b4:	f8ca 3000 	str.w	r3, [sl]
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071be:	81a3      	strh	r3, [r4, #12]
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c8:	6921      	ldr	r1, [r4, #16]
 80071ca:	464a      	mov	r2, r9
 80071cc:	f7ff fe76 	bl	8006ebc <memcpy>
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071da:	81a3      	strh	r3, [r4, #12]
 80071dc:	6126      	str	r6, [r4, #16]
 80071de:	6165      	str	r5, [r4, #20]
 80071e0:	444e      	add	r6, r9
 80071e2:	eba5 0509 	sub.w	r5, r5, r9
 80071e6:	6026      	str	r6, [r4, #0]
 80071e8:	60a5      	str	r5, [r4, #8]
 80071ea:	463e      	mov	r6, r7
 80071ec:	42be      	cmp	r6, r7
 80071ee:	d900      	bls.n	80071f2 <__ssputs_r+0x86>
 80071f0:	463e      	mov	r6, r7
 80071f2:	4632      	mov	r2, r6
 80071f4:	6820      	ldr	r0, [r4, #0]
 80071f6:	4641      	mov	r1, r8
 80071f8:	f000 fef8 	bl	8007fec <memmove>
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	1b9b      	subs	r3, r3, r6
 8007202:	4432      	add	r2, r6
 8007204:	60a3      	str	r3, [r4, #8]
 8007206:	6022      	str	r2, [r4, #0]
 8007208:	2000      	movs	r0, #0
 800720a:	e7db      	b.n	80071c4 <__ssputs_r+0x58>
 800720c:	462a      	mov	r2, r5
 800720e:	f000 ff13 	bl	8008038 <_realloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	2800      	cmp	r0, #0
 8007216:	d1e1      	bne.n	80071dc <__ssputs_r+0x70>
 8007218:	6921      	ldr	r1, [r4, #16]
 800721a:	4650      	mov	r0, sl
 800721c:	f7ff fefc 	bl	8007018 <_free_r>
 8007220:	e7c7      	b.n	80071b2 <__ssputs_r+0x46>
	...

08007224 <_svfiprintf_r>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	4698      	mov	r8, r3
 800722a:	898b      	ldrh	r3, [r1, #12]
 800722c:	061b      	lsls	r3, r3, #24
 800722e:	b09d      	sub	sp, #116	; 0x74
 8007230:	4607      	mov	r7, r0
 8007232:	460d      	mov	r5, r1
 8007234:	4614      	mov	r4, r2
 8007236:	d50e      	bpl.n	8007256 <_svfiprintf_r+0x32>
 8007238:	690b      	ldr	r3, [r1, #16]
 800723a:	b963      	cbnz	r3, 8007256 <_svfiprintf_r+0x32>
 800723c:	2140      	movs	r1, #64	; 0x40
 800723e:	f7ff ff3b 	bl	80070b8 <_malloc_r>
 8007242:	6028      	str	r0, [r5, #0]
 8007244:	6128      	str	r0, [r5, #16]
 8007246:	b920      	cbnz	r0, 8007252 <_svfiprintf_r+0x2e>
 8007248:	230c      	movs	r3, #12
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e0d1      	b.n	80073f6 <_svfiprintf_r+0x1d2>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	616b      	str	r3, [r5, #20]
 8007256:	2300      	movs	r3, #0
 8007258:	9309      	str	r3, [sp, #36]	; 0x24
 800725a:	2320      	movs	r3, #32
 800725c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007260:	f8cd 800c 	str.w	r8, [sp, #12]
 8007264:	2330      	movs	r3, #48	; 0x30
 8007266:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007410 <_svfiprintf_r+0x1ec>
 800726a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800726e:	f04f 0901 	mov.w	r9, #1
 8007272:	4623      	mov	r3, r4
 8007274:	469a      	mov	sl, r3
 8007276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800727a:	b10a      	cbz	r2, 8007280 <_svfiprintf_r+0x5c>
 800727c:	2a25      	cmp	r2, #37	; 0x25
 800727e:	d1f9      	bne.n	8007274 <_svfiprintf_r+0x50>
 8007280:	ebba 0b04 	subs.w	fp, sl, r4
 8007284:	d00b      	beq.n	800729e <_svfiprintf_r+0x7a>
 8007286:	465b      	mov	r3, fp
 8007288:	4622      	mov	r2, r4
 800728a:	4629      	mov	r1, r5
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff ff6d 	bl	800716c <__ssputs_r>
 8007292:	3001      	adds	r0, #1
 8007294:	f000 80aa 	beq.w	80073ec <_svfiprintf_r+0x1c8>
 8007298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800729a:	445a      	add	r2, fp
 800729c:	9209      	str	r2, [sp, #36]	; 0x24
 800729e:	f89a 3000 	ldrb.w	r3, [sl]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f000 80a2 	beq.w	80073ec <_svfiprintf_r+0x1c8>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b2:	f10a 0a01 	add.w	sl, sl, #1
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	9307      	str	r3, [sp, #28]
 80072ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072be:	931a      	str	r3, [sp, #104]	; 0x68
 80072c0:	4654      	mov	r4, sl
 80072c2:	2205      	movs	r2, #5
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	4851      	ldr	r0, [pc, #324]	; (8007410 <_svfiprintf_r+0x1ec>)
 80072ca:	f7f8 ffd9 	bl	8000280 <memchr>
 80072ce:	9a04      	ldr	r2, [sp, #16]
 80072d0:	b9d8      	cbnz	r0, 800730a <_svfiprintf_r+0xe6>
 80072d2:	06d0      	lsls	r0, r2, #27
 80072d4:	bf44      	itt	mi
 80072d6:	2320      	movmi	r3, #32
 80072d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072dc:	0711      	lsls	r1, r2, #28
 80072de:	bf44      	itt	mi
 80072e0:	232b      	movmi	r3, #43	; 0x2b
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072e6:	f89a 3000 	ldrb.w	r3, [sl]
 80072ea:	2b2a      	cmp	r3, #42	; 0x2a
 80072ec:	d015      	beq.n	800731a <_svfiprintf_r+0xf6>
 80072ee:	9a07      	ldr	r2, [sp, #28]
 80072f0:	4654      	mov	r4, sl
 80072f2:	2000      	movs	r0, #0
 80072f4:	f04f 0c0a 	mov.w	ip, #10
 80072f8:	4621      	mov	r1, r4
 80072fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072fe:	3b30      	subs	r3, #48	; 0x30
 8007300:	2b09      	cmp	r3, #9
 8007302:	d94e      	bls.n	80073a2 <_svfiprintf_r+0x17e>
 8007304:	b1b0      	cbz	r0, 8007334 <_svfiprintf_r+0x110>
 8007306:	9207      	str	r2, [sp, #28]
 8007308:	e014      	b.n	8007334 <_svfiprintf_r+0x110>
 800730a:	eba0 0308 	sub.w	r3, r0, r8
 800730e:	fa09 f303 	lsl.w	r3, r9, r3
 8007312:	4313      	orrs	r3, r2
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	46a2      	mov	sl, r4
 8007318:	e7d2      	b.n	80072c0 <_svfiprintf_r+0x9c>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	1d19      	adds	r1, r3, #4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	9103      	str	r1, [sp, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	bfbb      	ittet	lt
 8007326:	425b      	neglt	r3, r3
 8007328:	f042 0202 	orrlt.w	r2, r2, #2
 800732c:	9307      	strge	r3, [sp, #28]
 800732e:	9307      	strlt	r3, [sp, #28]
 8007330:	bfb8      	it	lt
 8007332:	9204      	strlt	r2, [sp, #16]
 8007334:	7823      	ldrb	r3, [r4, #0]
 8007336:	2b2e      	cmp	r3, #46	; 0x2e
 8007338:	d10c      	bne.n	8007354 <_svfiprintf_r+0x130>
 800733a:	7863      	ldrb	r3, [r4, #1]
 800733c:	2b2a      	cmp	r3, #42	; 0x2a
 800733e:	d135      	bne.n	80073ac <_svfiprintf_r+0x188>
 8007340:	9b03      	ldr	r3, [sp, #12]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	9203      	str	r2, [sp, #12]
 8007348:	2b00      	cmp	r3, #0
 800734a:	bfb8      	it	lt
 800734c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007350:	3402      	adds	r4, #2
 8007352:	9305      	str	r3, [sp, #20]
 8007354:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007420 <_svfiprintf_r+0x1fc>
 8007358:	7821      	ldrb	r1, [r4, #0]
 800735a:	2203      	movs	r2, #3
 800735c:	4650      	mov	r0, sl
 800735e:	f7f8 ff8f 	bl	8000280 <memchr>
 8007362:	b140      	cbz	r0, 8007376 <_svfiprintf_r+0x152>
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	eba0 000a 	sub.w	r0, r0, sl
 800736a:	fa03 f000 	lsl.w	r0, r3, r0
 800736e:	9b04      	ldr	r3, [sp, #16]
 8007370:	4303      	orrs	r3, r0
 8007372:	3401      	adds	r4, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	4826      	ldr	r0, [pc, #152]	; (8007414 <_svfiprintf_r+0x1f0>)
 800737c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007380:	2206      	movs	r2, #6
 8007382:	f7f8 ff7d 	bl	8000280 <memchr>
 8007386:	2800      	cmp	r0, #0
 8007388:	d038      	beq.n	80073fc <_svfiprintf_r+0x1d8>
 800738a:	4b23      	ldr	r3, [pc, #140]	; (8007418 <_svfiprintf_r+0x1f4>)
 800738c:	bb1b      	cbnz	r3, 80073d6 <_svfiprintf_r+0x1b2>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	3307      	adds	r3, #7
 8007392:	f023 0307 	bic.w	r3, r3, #7
 8007396:	3308      	adds	r3, #8
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739c:	4433      	add	r3, r6
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	e767      	b.n	8007272 <_svfiprintf_r+0x4e>
 80073a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073a6:	460c      	mov	r4, r1
 80073a8:	2001      	movs	r0, #1
 80073aa:	e7a5      	b.n	80072f8 <_svfiprintf_r+0xd4>
 80073ac:	2300      	movs	r3, #0
 80073ae:	3401      	adds	r4, #1
 80073b0:	9305      	str	r3, [sp, #20]
 80073b2:	4619      	mov	r1, r3
 80073b4:	f04f 0c0a 	mov.w	ip, #10
 80073b8:	4620      	mov	r0, r4
 80073ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073be:	3a30      	subs	r2, #48	; 0x30
 80073c0:	2a09      	cmp	r2, #9
 80073c2:	d903      	bls.n	80073cc <_svfiprintf_r+0x1a8>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0c5      	beq.n	8007354 <_svfiprintf_r+0x130>
 80073c8:	9105      	str	r1, [sp, #20]
 80073ca:	e7c3      	b.n	8007354 <_svfiprintf_r+0x130>
 80073cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d0:	4604      	mov	r4, r0
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7f0      	b.n	80073b8 <_svfiprintf_r+0x194>
 80073d6:	ab03      	add	r3, sp, #12
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	462a      	mov	r2, r5
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <_svfiprintf_r+0x1f8>)
 80073de:	a904      	add	r1, sp, #16
 80073e0:	4638      	mov	r0, r7
 80073e2:	f3af 8000 	nop.w
 80073e6:	1c42      	adds	r2, r0, #1
 80073e8:	4606      	mov	r6, r0
 80073ea:	d1d6      	bne.n	800739a <_svfiprintf_r+0x176>
 80073ec:	89ab      	ldrh	r3, [r5, #12]
 80073ee:	065b      	lsls	r3, r3, #25
 80073f0:	f53f af2c 	bmi.w	800724c <_svfiprintf_r+0x28>
 80073f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073f6:	b01d      	add	sp, #116	; 0x74
 80073f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fc:	ab03      	add	r3, sp, #12
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	462a      	mov	r2, r5
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <_svfiprintf_r+0x1f8>)
 8007404:	a904      	add	r1, sp, #16
 8007406:	4638      	mov	r0, r7
 8007408:	f000 f9d4 	bl	80077b4 <_printf_i>
 800740c:	e7eb      	b.n	80073e6 <_svfiprintf_r+0x1c2>
 800740e:	bf00      	nop
 8007410:	0800845e 	.word	0x0800845e
 8007414:	08008468 	.word	0x08008468
 8007418:	00000000 	.word	0x00000000
 800741c:	0800716d 	.word	0x0800716d
 8007420:	08008464 	.word	0x08008464

08007424 <__sfputc_r>:
 8007424:	6893      	ldr	r3, [r2, #8]
 8007426:	3b01      	subs	r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	b410      	push	{r4}
 800742c:	6093      	str	r3, [r2, #8]
 800742e:	da08      	bge.n	8007442 <__sfputc_r+0x1e>
 8007430:	6994      	ldr	r4, [r2, #24]
 8007432:	42a3      	cmp	r3, r4
 8007434:	db01      	blt.n	800743a <__sfputc_r+0x16>
 8007436:	290a      	cmp	r1, #10
 8007438:	d103      	bne.n	8007442 <__sfputc_r+0x1e>
 800743a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743e:	f000 baef 	b.w	8007a20 <__swbuf_r>
 8007442:	6813      	ldr	r3, [r2, #0]
 8007444:	1c58      	adds	r0, r3, #1
 8007446:	6010      	str	r0, [r2, #0]
 8007448:	7019      	strb	r1, [r3, #0]
 800744a:	4608      	mov	r0, r1
 800744c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007450:	4770      	bx	lr

08007452 <__sfputs_r>:
 8007452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007454:	4606      	mov	r6, r0
 8007456:	460f      	mov	r7, r1
 8007458:	4614      	mov	r4, r2
 800745a:	18d5      	adds	r5, r2, r3
 800745c:	42ac      	cmp	r4, r5
 800745e:	d101      	bne.n	8007464 <__sfputs_r+0x12>
 8007460:	2000      	movs	r0, #0
 8007462:	e007      	b.n	8007474 <__sfputs_r+0x22>
 8007464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007468:	463a      	mov	r2, r7
 800746a:	4630      	mov	r0, r6
 800746c:	f7ff ffda 	bl	8007424 <__sfputc_r>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d1f3      	bne.n	800745c <__sfputs_r+0xa>
 8007474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007478 <_vfiprintf_r>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	460d      	mov	r5, r1
 800747e:	b09d      	sub	sp, #116	; 0x74
 8007480:	4614      	mov	r4, r2
 8007482:	4698      	mov	r8, r3
 8007484:	4606      	mov	r6, r0
 8007486:	b118      	cbz	r0, 8007490 <_vfiprintf_r+0x18>
 8007488:	6983      	ldr	r3, [r0, #24]
 800748a:	b90b      	cbnz	r3, 8007490 <_vfiprintf_r+0x18>
 800748c:	f000 fcaa 	bl	8007de4 <__sinit>
 8007490:	4b89      	ldr	r3, [pc, #548]	; (80076b8 <_vfiprintf_r+0x240>)
 8007492:	429d      	cmp	r5, r3
 8007494:	d11b      	bne.n	80074ce <_vfiprintf_r+0x56>
 8007496:	6875      	ldr	r5, [r6, #4]
 8007498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800749a:	07d9      	lsls	r1, r3, #31
 800749c:	d405      	bmi.n	80074aa <_vfiprintf_r+0x32>
 800749e:	89ab      	ldrh	r3, [r5, #12]
 80074a0:	059a      	lsls	r2, r3, #22
 80074a2:	d402      	bmi.n	80074aa <_vfiprintf_r+0x32>
 80074a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074a6:	f000 fd3b 	bl	8007f20 <__retarget_lock_acquire_recursive>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	071b      	lsls	r3, r3, #28
 80074ae:	d501      	bpl.n	80074b4 <_vfiprintf_r+0x3c>
 80074b0:	692b      	ldr	r3, [r5, #16]
 80074b2:	b9eb      	cbnz	r3, 80074f0 <_vfiprintf_r+0x78>
 80074b4:	4629      	mov	r1, r5
 80074b6:	4630      	mov	r0, r6
 80074b8:	f000 fb04 	bl	8007ac4 <__swsetup_r>
 80074bc:	b1c0      	cbz	r0, 80074f0 <_vfiprintf_r+0x78>
 80074be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074c0:	07dc      	lsls	r4, r3, #31
 80074c2:	d50e      	bpl.n	80074e2 <_vfiprintf_r+0x6a>
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	b01d      	add	sp, #116	; 0x74
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ce:	4b7b      	ldr	r3, [pc, #492]	; (80076bc <_vfiprintf_r+0x244>)
 80074d0:	429d      	cmp	r5, r3
 80074d2:	d101      	bne.n	80074d8 <_vfiprintf_r+0x60>
 80074d4:	68b5      	ldr	r5, [r6, #8]
 80074d6:	e7df      	b.n	8007498 <_vfiprintf_r+0x20>
 80074d8:	4b79      	ldr	r3, [pc, #484]	; (80076c0 <_vfiprintf_r+0x248>)
 80074da:	429d      	cmp	r5, r3
 80074dc:	bf08      	it	eq
 80074de:	68f5      	ldreq	r5, [r6, #12]
 80074e0:	e7da      	b.n	8007498 <_vfiprintf_r+0x20>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	0598      	lsls	r0, r3, #22
 80074e6:	d4ed      	bmi.n	80074c4 <_vfiprintf_r+0x4c>
 80074e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ea:	f000 fd1a 	bl	8007f22 <__retarget_lock_release_recursive>
 80074ee:	e7e9      	b.n	80074c4 <_vfiprintf_r+0x4c>
 80074f0:	2300      	movs	r3, #0
 80074f2:	9309      	str	r3, [sp, #36]	; 0x24
 80074f4:	2320      	movs	r3, #32
 80074f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fe:	2330      	movs	r3, #48	; 0x30
 8007500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80076c4 <_vfiprintf_r+0x24c>
 8007504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007508:	f04f 0901 	mov.w	r9, #1
 800750c:	4623      	mov	r3, r4
 800750e:	469a      	mov	sl, r3
 8007510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007514:	b10a      	cbz	r2, 800751a <_vfiprintf_r+0xa2>
 8007516:	2a25      	cmp	r2, #37	; 0x25
 8007518:	d1f9      	bne.n	800750e <_vfiprintf_r+0x96>
 800751a:	ebba 0b04 	subs.w	fp, sl, r4
 800751e:	d00b      	beq.n	8007538 <_vfiprintf_r+0xc0>
 8007520:	465b      	mov	r3, fp
 8007522:	4622      	mov	r2, r4
 8007524:	4629      	mov	r1, r5
 8007526:	4630      	mov	r0, r6
 8007528:	f7ff ff93 	bl	8007452 <__sfputs_r>
 800752c:	3001      	adds	r0, #1
 800752e:	f000 80aa 	beq.w	8007686 <_vfiprintf_r+0x20e>
 8007532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007534:	445a      	add	r2, fp
 8007536:	9209      	str	r2, [sp, #36]	; 0x24
 8007538:	f89a 3000 	ldrb.w	r3, [sl]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80a2 	beq.w	8007686 <_vfiprintf_r+0x20e>
 8007542:	2300      	movs	r3, #0
 8007544:	f04f 32ff 	mov.w	r2, #4294967295
 8007548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800754c:	f10a 0a01 	add.w	sl, sl, #1
 8007550:	9304      	str	r3, [sp, #16]
 8007552:	9307      	str	r3, [sp, #28]
 8007554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007558:	931a      	str	r3, [sp, #104]	; 0x68
 800755a:	4654      	mov	r4, sl
 800755c:	2205      	movs	r2, #5
 800755e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007562:	4858      	ldr	r0, [pc, #352]	; (80076c4 <_vfiprintf_r+0x24c>)
 8007564:	f7f8 fe8c 	bl	8000280 <memchr>
 8007568:	9a04      	ldr	r2, [sp, #16]
 800756a:	b9d8      	cbnz	r0, 80075a4 <_vfiprintf_r+0x12c>
 800756c:	06d1      	lsls	r1, r2, #27
 800756e:	bf44      	itt	mi
 8007570:	2320      	movmi	r3, #32
 8007572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007576:	0713      	lsls	r3, r2, #28
 8007578:	bf44      	itt	mi
 800757a:	232b      	movmi	r3, #43	; 0x2b
 800757c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007580:	f89a 3000 	ldrb.w	r3, [sl]
 8007584:	2b2a      	cmp	r3, #42	; 0x2a
 8007586:	d015      	beq.n	80075b4 <_vfiprintf_r+0x13c>
 8007588:	9a07      	ldr	r2, [sp, #28]
 800758a:	4654      	mov	r4, sl
 800758c:	2000      	movs	r0, #0
 800758e:	f04f 0c0a 	mov.w	ip, #10
 8007592:	4621      	mov	r1, r4
 8007594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007598:	3b30      	subs	r3, #48	; 0x30
 800759a:	2b09      	cmp	r3, #9
 800759c:	d94e      	bls.n	800763c <_vfiprintf_r+0x1c4>
 800759e:	b1b0      	cbz	r0, 80075ce <_vfiprintf_r+0x156>
 80075a0:	9207      	str	r2, [sp, #28]
 80075a2:	e014      	b.n	80075ce <_vfiprintf_r+0x156>
 80075a4:	eba0 0308 	sub.w	r3, r0, r8
 80075a8:	fa09 f303 	lsl.w	r3, r9, r3
 80075ac:	4313      	orrs	r3, r2
 80075ae:	9304      	str	r3, [sp, #16]
 80075b0:	46a2      	mov	sl, r4
 80075b2:	e7d2      	b.n	800755a <_vfiprintf_r+0xe2>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	1d19      	adds	r1, r3, #4
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	9103      	str	r1, [sp, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	bfbb      	ittet	lt
 80075c0:	425b      	neglt	r3, r3
 80075c2:	f042 0202 	orrlt.w	r2, r2, #2
 80075c6:	9307      	strge	r3, [sp, #28]
 80075c8:	9307      	strlt	r3, [sp, #28]
 80075ca:	bfb8      	it	lt
 80075cc:	9204      	strlt	r2, [sp, #16]
 80075ce:	7823      	ldrb	r3, [r4, #0]
 80075d0:	2b2e      	cmp	r3, #46	; 0x2e
 80075d2:	d10c      	bne.n	80075ee <_vfiprintf_r+0x176>
 80075d4:	7863      	ldrb	r3, [r4, #1]
 80075d6:	2b2a      	cmp	r3, #42	; 0x2a
 80075d8:	d135      	bne.n	8007646 <_vfiprintf_r+0x1ce>
 80075da:	9b03      	ldr	r3, [sp, #12]
 80075dc:	1d1a      	adds	r2, r3, #4
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	9203      	str	r2, [sp, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfb8      	it	lt
 80075e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80075ea:	3402      	adds	r4, #2
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80076d4 <_vfiprintf_r+0x25c>
 80075f2:	7821      	ldrb	r1, [r4, #0]
 80075f4:	2203      	movs	r2, #3
 80075f6:	4650      	mov	r0, sl
 80075f8:	f7f8 fe42 	bl	8000280 <memchr>
 80075fc:	b140      	cbz	r0, 8007610 <_vfiprintf_r+0x198>
 80075fe:	2340      	movs	r3, #64	; 0x40
 8007600:	eba0 000a 	sub.w	r0, r0, sl
 8007604:	fa03 f000 	lsl.w	r0, r3, r0
 8007608:	9b04      	ldr	r3, [sp, #16]
 800760a:	4303      	orrs	r3, r0
 800760c:	3401      	adds	r4, #1
 800760e:	9304      	str	r3, [sp, #16]
 8007610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007614:	482c      	ldr	r0, [pc, #176]	; (80076c8 <_vfiprintf_r+0x250>)
 8007616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800761a:	2206      	movs	r2, #6
 800761c:	f7f8 fe30 	bl	8000280 <memchr>
 8007620:	2800      	cmp	r0, #0
 8007622:	d03f      	beq.n	80076a4 <_vfiprintf_r+0x22c>
 8007624:	4b29      	ldr	r3, [pc, #164]	; (80076cc <_vfiprintf_r+0x254>)
 8007626:	bb1b      	cbnz	r3, 8007670 <_vfiprintf_r+0x1f8>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	3307      	adds	r3, #7
 800762c:	f023 0307 	bic.w	r3, r3, #7
 8007630:	3308      	adds	r3, #8
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007636:	443b      	add	r3, r7
 8007638:	9309      	str	r3, [sp, #36]	; 0x24
 800763a:	e767      	b.n	800750c <_vfiprintf_r+0x94>
 800763c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007640:	460c      	mov	r4, r1
 8007642:	2001      	movs	r0, #1
 8007644:	e7a5      	b.n	8007592 <_vfiprintf_r+0x11a>
 8007646:	2300      	movs	r3, #0
 8007648:	3401      	adds	r4, #1
 800764a:	9305      	str	r3, [sp, #20]
 800764c:	4619      	mov	r1, r3
 800764e:	f04f 0c0a 	mov.w	ip, #10
 8007652:	4620      	mov	r0, r4
 8007654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007658:	3a30      	subs	r2, #48	; 0x30
 800765a:	2a09      	cmp	r2, #9
 800765c:	d903      	bls.n	8007666 <_vfiprintf_r+0x1ee>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0c5      	beq.n	80075ee <_vfiprintf_r+0x176>
 8007662:	9105      	str	r1, [sp, #20]
 8007664:	e7c3      	b.n	80075ee <_vfiprintf_r+0x176>
 8007666:	fb0c 2101 	mla	r1, ip, r1, r2
 800766a:	4604      	mov	r4, r0
 800766c:	2301      	movs	r3, #1
 800766e:	e7f0      	b.n	8007652 <_vfiprintf_r+0x1da>
 8007670:	ab03      	add	r3, sp, #12
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	462a      	mov	r2, r5
 8007676:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <_vfiprintf_r+0x258>)
 8007678:	a904      	add	r1, sp, #16
 800767a:	4630      	mov	r0, r6
 800767c:	f3af 8000 	nop.w
 8007680:	4607      	mov	r7, r0
 8007682:	1c78      	adds	r0, r7, #1
 8007684:	d1d6      	bne.n	8007634 <_vfiprintf_r+0x1bc>
 8007686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007688:	07d9      	lsls	r1, r3, #31
 800768a:	d405      	bmi.n	8007698 <_vfiprintf_r+0x220>
 800768c:	89ab      	ldrh	r3, [r5, #12]
 800768e:	059a      	lsls	r2, r3, #22
 8007690:	d402      	bmi.n	8007698 <_vfiprintf_r+0x220>
 8007692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007694:	f000 fc45 	bl	8007f22 <__retarget_lock_release_recursive>
 8007698:	89ab      	ldrh	r3, [r5, #12]
 800769a:	065b      	lsls	r3, r3, #25
 800769c:	f53f af12 	bmi.w	80074c4 <_vfiprintf_r+0x4c>
 80076a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076a2:	e711      	b.n	80074c8 <_vfiprintf_r+0x50>
 80076a4:	ab03      	add	r3, sp, #12
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	462a      	mov	r2, r5
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <_vfiprintf_r+0x258>)
 80076ac:	a904      	add	r1, sp, #16
 80076ae:	4630      	mov	r0, r6
 80076b0:	f000 f880 	bl	80077b4 <_printf_i>
 80076b4:	e7e4      	b.n	8007680 <_vfiprintf_r+0x208>
 80076b6:	bf00      	nop
 80076b8:	080084b4 	.word	0x080084b4
 80076bc:	080084d4 	.word	0x080084d4
 80076c0:	08008494 	.word	0x08008494
 80076c4:	0800845e 	.word	0x0800845e
 80076c8:	08008468 	.word	0x08008468
 80076cc:	00000000 	.word	0x00000000
 80076d0:	08007453 	.word	0x08007453
 80076d4:	08008464 	.word	0x08008464

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4616      	mov	r6, r2
 80076de:	4699      	mov	r9, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfb8      	it	lt
 80076ec:	4613      	movlt	r3, r2
 80076ee:	6033      	str	r3, [r6, #0]
 80076f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f4:	4607      	mov	r7, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	b10a      	cbz	r2, 80076fe <_printf_common+0x26>
 80076fa:	3301      	adds	r3, #1
 80076fc:	6033      	str	r3, [r6, #0]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	0699      	lsls	r1, r3, #26
 8007702:	bf42      	ittt	mi
 8007704:	6833      	ldrmi	r3, [r6, #0]
 8007706:	3302      	addmi	r3, #2
 8007708:	6033      	strmi	r3, [r6, #0]
 800770a:	6825      	ldr	r5, [r4, #0]
 800770c:	f015 0506 	ands.w	r5, r5, #6
 8007710:	d106      	bne.n	8007720 <_printf_common+0x48>
 8007712:	f104 0a19 	add.w	sl, r4, #25
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	6832      	ldr	r2, [r6, #0]
 800771a:	1a9b      	subs	r3, r3, r2
 800771c:	42ab      	cmp	r3, r5
 800771e:	dc26      	bgt.n	800776e <_printf_common+0x96>
 8007720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007724:	1e13      	subs	r3, r2, #0
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	bf18      	it	ne
 800772a:	2301      	movne	r3, #1
 800772c:	0692      	lsls	r2, r2, #26
 800772e:	d42b      	bmi.n	8007788 <_printf_common+0xb0>
 8007730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007734:	4649      	mov	r1, r9
 8007736:	4638      	mov	r0, r7
 8007738:	47c0      	blx	r8
 800773a:	3001      	adds	r0, #1
 800773c:	d01e      	beq.n	800777c <_printf_common+0xa4>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	68e5      	ldr	r5, [r4, #12]
 8007742:	6832      	ldr	r2, [r6, #0]
 8007744:	f003 0306 	and.w	r3, r3, #6
 8007748:	2b04      	cmp	r3, #4
 800774a:	bf08      	it	eq
 800774c:	1aad      	subeq	r5, r5, r2
 800774e:	68a3      	ldr	r3, [r4, #8]
 8007750:	6922      	ldr	r2, [r4, #16]
 8007752:	bf0c      	ite	eq
 8007754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007758:	2500      	movne	r5, #0
 800775a:	4293      	cmp	r3, r2
 800775c:	bfc4      	itt	gt
 800775e:	1a9b      	subgt	r3, r3, r2
 8007760:	18ed      	addgt	r5, r5, r3
 8007762:	2600      	movs	r6, #0
 8007764:	341a      	adds	r4, #26
 8007766:	42b5      	cmp	r5, r6
 8007768:	d11a      	bne.n	80077a0 <_printf_common+0xc8>
 800776a:	2000      	movs	r0, #0
 800776c:	e008      	b.n	8007780 <_printf_common+0xa8>
 800776e:	2301      	movs	r3, #1
 8007770:	4652      	mov	r2, sl
 8007772:	4649      	mov	r1, r9
 8007774:	4638      	mov	r0, r7
 8007776:	47c0      	blx	r8
 8007778:	3001      	adds	r0, #1
 800777a:	d103      	bne.n	8007784 <_printf_common+0xac>
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007784:	3501      	adds	r5, #1
 8007786:	e7c6      	b.n	8007716 <_printf_common+0x3e>
 8007788:	18e1      	adds	r1, r4, r3
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	2030      	movs	r0, #48	; 0x30
 800778e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007792:	4422      	add	r2, r4
 8007794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800779c:	3302      	adds	r3, #2
 800779e:	e7c7      	b.n	8007730 <_printf_common+0x58>
 80077a0:	2301      	movs	r3, #1
 80077a2:	4622      	mov	r2, r4
 80077a4:	4649      	mov	r1, r9
 80077a6:	4638      	mov	r0, r7
 80077a8:	47c0      	blx	r8
 80077aa:	3001      	adds	r0, #1
 80077ac:	d0e6      	beq.n	800777c <_printf_common+0xa4>
 80077ae:	3601      	adds	r6, #1
 80077b0:	e7d9      	b.n	8007766 <_printf_common+0x8e>
	...

080077b4 <_printf_i>:
 80077b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	460c      	mov	r4, r1
 80077ba:	4691      	mov	r9, r2
 80077bc:	7e27      	ldrb	r7, [r4, #24]
 80077be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077c0:	2f78      	cmp	r7, #120	; 0x78
 80077c2:	4680      	mov	r8, r0
 80077c4:	469a      	mov	sl, r3
 80077c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077ca:	d807      	bhi.n	80077dc <_printf_i+0x28>
 80077cc:	2f62      	cmp	r7, #98	; 0x62
 80077ce:	d80a      	bhi.n	80077e6 <_printf_i+0x32>
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f000 80d8 	beq.w	8007986 <_printf_i+0x1d2>
 80077d6:	2f58      	cmp	r7, #88	; 0x58
 80077d8:	f000 80a3 	beq.w	8007922 <_printf_i+0x16e>
 80077dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077e4:	e03a      	b.n	800785c <_printf_i+0xa8>
 80077e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077ea:	2b15      	cmp	r3, #21
 80077ec:	d8f6      	bhi.n	80077dc <_printf_i+0x28>
 80077ee:	a001      	add	r0, pc, #4	; (adr r0, 80077f4 <_printf_i+0x40>)
 80077f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	08007861 	.word	0x08007861
 80077fc:	080077dd 	.word	0x080077dd
 8007800:	080077dd 	.word	0x080077dd
 8007804:	080077dd 	.word	0x080077dd
 8007808:	080077dd 	.word	0x080077dd
 800780c:	08007861 	.word	0x08007861
 8007810:	080077dd 	.word	0x080077dd
 8007814:	080077dd 	.word	0x080077dd
 8007818:	080077dd 	.word	0x080077dd
 800781c:	080077dd 	.word	0x080077dd
 8007820:	0800796d 	.word	0x0800796d
 8007824:	08007891 	.word	0x08007891
 8007828:	0800794f 	.word	0x0800794f
 800782c:	080077dd 	.word	0x080077dd
 8007830:	080077dd 	.word	0x080077dd
 8007834:	0800798f 	.word	0x0800798f
 8007838:	080077dd 	.word	0x080077dd
 800783c:	08007891 	.word	0x08007891
 8007840:	080077dd 	.word	0x080077dd
 8007844:	080077dd 	.word	0x080077dd
 8007848:	08007957 	.word	0x08007957
 800784c:	680b      	ldr	r3, [r1, #0]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	600a      	str	r2, [r1, #0]
 8007854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800785c:	2301      	movs	r3, #1
 800785e:	e0a3      	b.n	80079a8 <_printf_i+0x1f4>
 8007860:	6825      	ldr	r5, [r4, #0]
 8007862:	6808      	ldr	r0, [r1, #0]
 8007864:	062e      	lsls	r6, r5, #24
 8007866:	f100 0304 	add.w	r3, r0, #4
 800786a:	d50a      	bpl.n	8007882 <_printf_i+0xce>
 800786c:	6805      	ldr	r5, [r0, #0]
 800786e:	600b      	str	r3, [r1, #0]
 8007870:	2d00      	cmp	r5, #0
 8007872:	da03      	bge.n	800787c <_printf_i+0xc8>
 8007874:	232d      	movs	r3, #45	; 0x2d
 8007876:	426d      	negs	r5, r5
 8007878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787c:	485e      	ldr	r0, [pc, #376]	; (80079f8 <_printf_i+0x244>)
 800787e:	230a      	movs	r3, #10
 8007880:	e019      	b.n	80078b6 <_printf_i+0x102>
 8007882:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007886:	6805      	ldr	r5, [r0, #0]
 8007888:	600b      	str	r3, [r1, #0]
 800788a:	bf18      	it	ne
 800788c:	b22d      	sxthne	r5, r5
 800788e:	e7ef      	b.n	8007870 <_printf_i+0xbc>
 8007890:	680b      	ldr	r3, [r1, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	1d18      	adds	r0, r3, #4
 8007896:	6008      	str	r0, [r1, #0]
 8007898:	0628      	lsls	r0, r5, #24
 800789a:	d501      	bpl.n	80078a0 <_printf_i+0xec>
 800789c:	681d      	ldr	r5, [r3, #0]
 800789e:	e002      	b.n	80078a6 <_printf_i+0xf2>
 80078a0:	0669      	lsls	r1, r5, #25
 80078a2:	d5fb      	bpl.n	800789c <_printf_i+0xe8>
 80078a4:	881d      	ldrh	r5, [r3, #0]
 80078a6:	4854      	ldr	r0, [pc, #336]	; (80079f8 <_printf_i+0x244>)
 80078a8:	2f6f      	cmp	r7, #111	; 0x6f
 80078aa:	bf0c      	ite	eq
 80078ac:	2308      	moveq	r3, #8
 80078ae:	230a      	movne	r3, #10
 80078b0:	2100      	movs	r1, #0
 80078b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078b6:	6866      	ldr	r6, [r4, #4]
 80078b8:	60a6      	str	r6, [r4, #8]
 80078ba:	2e00      	cmp	r6, #0
 80078bc:	bfa2      	ittt	ge
 80078be:	6821      	ldrge	r1, [r4, #0]
 80078c0:	f021 0104 	bicge.w	r1, r1, #4
 80078c4:	6021      	strge	r1, [r4, #0]
 80078c6:	b90d      	cbnz	r5, 80078cc <_printf_i+0x118>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	d04d      	beq.n	8007968 <_printf_i+0x1b4>
 80078cc:	4616      	mov	r6, r2
 80078ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80078d2:	fb03 5711 	mls	r7, r3, r1, r5
 80078d6:	5dc7      	ldrb	r7, [r0, r7]
 80078d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078dc:	462f      	mov	r7, r5
 80078de:	42bb      	cmp	r3, r7
 80078e0:	460d      	mov	r5, r1
 80078e2:	d9f4      	bls.n	80078ce <_printf_i+0x11a>
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d10b      	bne.n	8007900 <_printf_i+0x14c>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	07df      	lsls	r7, r3, #31
 80078ec:	d508      	bpl.n	8007900 <_printf_i+0x14c>
 80078ee:	6923      	ldr	r3, [r4, #16]
 80078f0:	6861      	ldr	r1, [r4, #4]
 80078f2:	4299      	cmp	r1, r3
 80078f4:	bfde      	ittt	le
 80078f6:	2330      	movle	r3, #48	; 0x30
 80078f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007900:	1b92      	subs	r2, r2, r6
 8007902:	6122      	str	r2, [r4, #16]
 8007904:	f8cd a000 	str.w	sl, [sp]
 8007908:	464b      	mov	r3, r9
 800790a:	aa03      	add	r2, sp, #12
 800790c:	4621      	mov	r1, r4
 800790e:	4640      	mov	r0, r8
 8007910:	f7ff fee2 	bl	80076d8 <_printf_common>
 8007914:	3001      	adds	r0, #1
 8007916:	d14c      	bne.n	80079b2 <_printf_i+0x1fe>
 8007918:	f04f 30ff 	mov.w	r0, #4294967295
 800791c:	b004      	add	sp, #16
 800791e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007922:	4835      	ldr	r0, [pc, #212]	; (80079f8 <_printf_i+0x244>)
 8007924:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	680e      	ldr	r6, [r1, #0]
 800792c:	061f      	lsls	r7, r3, #24
 800792e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007932:	600e      	str	r6, [r1, #0]
 8007934:	d514      	bpl.n	8007960 <_printf_i+0x1ac>
 8007936:	07d9      	lsls	r1, r3, #31
 8007938:	bf44      	itt	mi
 800793a:	f043 0320 	orrmi.w	r3, r3, #32
 800793e:	6023      	strmi	r3, [r4, #0]
 8007940:	b91d      	cbnz	r5, 800794a <_printf_i+0x196>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	f023 0320 	bic.w	r3, r3, #32
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	2310      	movs	r3, #16
 800794c:	e7b0      	b.n	80078b0 <_printf_i+0xfc>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	f043 0320 	orr.w	r3, r3, #32
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	2378      	movs	r3, #120	; 0x78
 8007958:	4828      	ldr	r0, [pc, #160]	; (80079fc <_printf_i+0x248>)
 800795a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800795e:	e7e3      	b.n	8007928 <_printf_i+0x174>
 8007960:	065e      	lsls	r6, r3, #25
 8007962:	bf48      	it	mi
 8007964:	b2ad      	uxthmi	r5, r5
 8007966:	e7e6      	b.n	8007936 <_printf_i+0x182>
 8007968:	4616      	mov	r6, r2
 800796a:	e7bb      	b.n	80078e4 <_printf_i+0x130>
 800796c:	680b      	ldr	r3, [r1, #0]
 800796e:	6826      	ldr	r6, [r4, #0]
 8007970:	6960      	ldr	r0, [r4, #20]
 8007972:	1d1d      	adds	r5, r3, #4
 8007974:	600d      	str	r5, [r1, #0]
 8007976:	0635      	lsls	r5, r6, #24
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	d501      	bpl.n	8007980 <_printf_i+0x1cc>
 800797c:	6018      	str	r0, [r3, #0]
 800797e:	e002      	b.n	8007986 <_printf_i+0x1d2>
 8007980:	0671      	lsls	r1, r6, #25
 8007982:	d5fb      	bpl.n	800797c <_printf_i+0x1c8>
 8007984:	8018      	strh	r0, [r3, #0]
 8007986:	2300      	movs	r3, #0
 8007988:	6123      	str	r3, [r4, #16]
 800798a:	4616      	mov	r6, r2
 800798c:	e7ba      	b.n	8007904 <_printf_i+0x150>
 800798e:	680b      	ldr	r3, [r1, #0]
 8007990:	1d1a      	adds	r2, r3, #4
 8007992:	600a      	str	r2, [r1, #0]
 8007994:	681e      	ldr	r6, [r3, #0]
 8007996:	6862      	ldr	r2, [r4, #4]
 8007998:	2100      	movs	r1, #0
 800799a:	4630      	mov	r0, r6
 800799c:	f7f8 fc70 	bl	8000280 <memchr>
 80079a0:	b108      	cbz	r0, 80079a6 <_printf_i+0x1f2>
 80079a2:	1b80      	subs	r0, r0, r6
 80079a4:	6060      	str	r0, [r4, #4]
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	6123      	str	r3, [r4, #16]
 80079aa:	2300      	movs	r3, #0
 80079ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079b0:	e7a8      	b.n	8007904 <_printf_i+0x150>
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	4632      	mov	r2, r6
 80079b6:	4649      	mov	r1, r9
 80079b8:	4640      	mov	r0, r8
 80079ba:	47d0      	blx	sl
 80079bc:	3001      	adds	r0, #1
 80079be:	d0ab      	beq.n	8007918 <_printf_i+0x164>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	d413      	bmi.n	80079ee <_printf_i+0x23a>
 80079c6:	68e0      	ldr	r0, [r4, #12]
 80079c8:	9b03      	ldr	r3, [sp, #12]
 80079ca:	4298      	cmp	r0, r3
 80079cc:	bfb8      	it	lt
 80079ce:	4618      	movlt	r0, r3
 80079d0:	e7a4      	b.n	800791c <_printf_i+0x168>
 80079d2:	2301      	movs	r3, #1
 80079d4:	4632      	mov	r2, r6
 80079d6:	4649      	mov	r1, r9
 80079d8:	4640      	mov	r0, r8
 80079da:	47d0      	blx	sl
 80079dc:	3001      	adds	r0, #1
 80079de:	d09b      	beq.n	8007918 <_printf_i+0x164>
 80079e0:	3501      	adds	r5, #1
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	9903      	ldr	r1, [sp, #12]
 80079e6:	1a5b      	subs	r3, r3, r1
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	dcf2      	bgt.n	80079d2 <_printf_i+0x21e>
 80079ec:	e7eb      	b.n	80079c6 <_printf_i+0x212>
 80079ee:	2500      	movs	r5, #0
 80079f0:	f104 0619 	add.w	r6, r4, #25
 80079f4:	e7f5      	b.n	80079e2 <_printf_i+0x22e>
 80079f6:	bf00      	nop
 80079f8:	0800846f 	.word	0x0800846f
 80079fc:	08008480 	.word	0x08008480

08007a00 <_sbrk_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d06      	ldr	r5, [pc, #24]	; (8007a1c <_sbrk_r+0x1c>)
 8007a04:	2300      	movs	r3, #0
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	f7f9 f970 	bl	8000cf0 <_sbrk>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_sbrk_r+0x1a>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_sbrk_r+0x1a>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	2001369c 	.word	0x2001369c

08007a20 <__swbuf_r>:
 8007a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a22:	460e      	mov	r6, r1
 8007a24:	4614      	mov	r4, r2
 8007a26:	4605      	mov	r5, r0
 8007a28:	b118      	cbz	r0, 8007a32 <__swbuf_r+0x12>
 8007a2a:	6983      	ldr	r3, [r0, #24]
 8007a2c:	b90b      	cbnz	r3, 8007a32 <__swbuf_r+0x12>
 8007a2e:	f000 f9d9 	bl	8007de4 <__sinit>
 8007a32:	4b21      	ldr	r3, [pc, #132]	; (8007ab8 <__swbuf_r+0x98>)
 8007a34:	429c      	cmp	r4, r3
 8007a36:	d12b      	bne.n	8007a90 <__swbuf_r+0x70>
 8007a38:	686c      	ldr	r4, [r5, #4]
 8007a3a:	69a3      	ldr	r3, [r4, #24]
 8007a3c:	60a3      	str	r3, [r4, #8]
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	071a      	lsls	r2, r3, #28
 8007a42:	d52f      	bpl.n	8007aa4 <__swbuf_r+0x84>
 8007a44:	6923      	ldr	r3, [r4, #16]
 8007a46:	b36b      	cbz	r3, 8007aa4 <__swbuf_r+0x84>
 8007a48:	6923      	ldr	r3, [r4, #16]
 8007a4a:	6820      	ldr	r0, [r4, #0]
 8007a4c:	1ac0      	subs	r0, r0, r3
 8007a4e:	6963      	ldr	r3, [r4, #20]
 8007a50:	b2f6      	uxtb	r6, r6
 8007a52:	4283      	cmp	r3, r0
 8007a54:	4637      	mov	r7, r6
 8007a56:	dc04      	bgt.n	8007a62 <__swbuf_r+0x42>
 8007a58:	4621      	mov	r1, r4
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	f000 f92e 	bl	8007cbc <_fflush_r>
 8007a60:	bb30      	cbnz	r0, 8007ab0 <__swbuf_r+0x90>
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	3b01      	subs	r3, #1
 8007a66:	60a3      	str	r3, [r4, #8]
 8007a68:	6823      	ldr	r3, [r4, #0]
 8007a6a:	1c5a      	adds	r2, r3, #1
 8007a6c:	6022      	str	r2, [r4, #0]
 8007a6e:	701e      	strb	r6, [r3, #0]
 8007a70:	6963      	ldr	r3, [r4, #20]
 8007a72:	3001      	adds	r0, #1
 8007a74:	4283      	cmp	r3, r0
 8007a76:	d004      	beq.n	8007a82 <__swbuf_r+0x62>
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	07db      	lsls	r3, r3, #31
 8007a7c:	d506      	bpl.n	8007a8c <__swbuf_r+0x6c>
 8007a7e:	2e0a      	cmp	r6, #10
 8007a80:	d104      	bne.n	8007a8c <__swbuf_r+0x6c>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f919 	bl	8007cbc <_fflush_r>
 8007a8a:	b988      	cbnz	r0, 8007ab0 <__swbuf_r+0x90>
 8007a8c:	4638      	mov	r0, r7
 8007a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <__swbuf_r+0x9c>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d101      	bne.n	8007a9a <__swbuf_r+0x7a>
 8007a96:	68ac      	ldr	r4, [r5, #8]
 8007a98:	e7cf      	b.n	8007a3a <__swbuf_r+0x1a>
 8007a9a:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <__swbuf_r+0xa0>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	bf08      	it	eq
 8007aa0:	68ec      	ldreq	r4, [r5, #12]
 8007aa2:	e7ca      	b.n	8007a3a <__swbuf_r+0x1a>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 f80c 	bl	8007ac4 <__swsetup_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0cb      	beq.n	8007a48 <__swbuf_r+0x28>
 8007ab0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ab4:	e7ea      	b.n	8007a8c <__swbuf_r+0x6c>
 8007ab6:	bf00      	nop
 8007ab8:	080084b4 	.word	0x080084b4
 8007abc:	080084d4 	.word	0x080084d4
 8007ac0:	08008494 	.word	0x08008494

08007ac4 <__swsetup_r>:
 8007ac4:	4b32      	ldr	r3, [pc, #200]	; (8007b90 <__swsetup_r+0xcc>)
 8007ac6:	b570      	push	{r4, r5, r6, lr}
 8007ac8:	681d      	ldr	r5, [r3, #0]
 8007aca:	4606      	mov	r6, r0
 8007acc:	460c      	mov	r4, r1
 8007ace:	b125      	cbz	r5, 8007ada <__swsetup_r+0x16>
 8007ad0:	69ab      	ldr	r3, [r5, #24]
 8007ad2:	b913      	cbnz	r3, 8007ada <__swsetup_r+0x16>
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 f985 	bl	8007de4 <__sinit>
 8007ada:	4b2e      	ldr	r3, [pc, #184]	; (8007b94 <__swsetup_r+0xd0>)
 8007adc:	429c      	cmp	r4, r3
 8007ade:	d10f      	bne.n	8007b00 <__swsetup_r+0x3c>
 8007ae0:	686c      	ldr	r4, [r5, #4]
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ae8:	0719      	lsls	r1, r3, #28
 8007aea:	d42c      	bmi.n	8007b46 <__swsetup_r+0x82>
 8007aec:	06dd      	lsls	r5, r3, #27
 8007aee:	d411      	bmi.n	8007b14 <__swsetup_r+0x50>
 8007af0:	2309      	movs	r3, #9
 8007af2:	6033      	str	r3, [r6, #0]
 8007af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007af8:	81a3      	strh	r3, [r4, #12]
 8007afa:	f04f 30ff 	mov.w	r0, #4294967295
 8007afe:	e03e      	b.n	8007b7e <__swsetup_r+0xba>
 8007b00:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <__swsetup_r+0xd4>)
 8007b02:	429c      	cmp	r4, r3
 8007b04:	d101      	bne.n	8007b0a <__swsetup_r+0x46>
 8007b06:	68ac      	ldr	r4, [r5, #8]
 8007b08:	e7eb      	b.n	8007ae2 <__swsetup_r+0x1e>
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <__swsetup_r+0xd8>)
 8007b0c:	429c      	cmp	r4, r3
 8007b0e:	bf08      	it	eq
 8007b10:	68ec      	ldreq	r4, [r5, #12]
 8007b12:	e7e6      	b.n	8007ae2 <__swsetup_r+0x1e>
 8007b14:	0758      	lsls	r0, r3, #29
 8007b16:	d512      	bpl.n	8007b3e <__swsetup_r+0x7a>
 8007b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b1a:	b141      	cbz	r1, 8007b2e <__swsetup_r+0x6a>
 8007b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b20:	4299      	cmp	r1, r3
 8007b22:	d002      	beq.n	8007b2a <__swsetup_r+0x66>
 8007b24:	4630      	mov	r0, r6
 8007b26:	f7ff fa77 	bl	8007018 <_free_r>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b34:	81a3      	strh	r3, [r4, #12]
 8007b36:	2300      	movs	r3, #0
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	f043 0308 	orr.w	r3, r3, #8
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	b94b      	cbnz	r3, 8007b5e <__swsetup_r+0x9a>
 8007b4a:	89a3      	ldrh	r3, [r4, #12]
 8007b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b54:	d003      	beq.n	8007b5e <__swsetup_r+0x9a>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 fa07 	bl	8007f6c <__smakebuf_r>
 8007b5e:	89a0      	ldrh	r0, [r4, #12]
 8007b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b64:	f010 0301 	ands.w	r3, r0, #1
 8007b68:	d00a      	beq.n	8007b80 <__swsetup_r+0xbc>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60a3      	str	r3, [r4, #8]
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	425b      	negs	r3, r3
 8007b72:	61a3      	str	r3, [r4, #24]
 8007b74:	6923      	ldr	r3, [r4, #16]
 8007b76:	b943      	cbnz	r3, 8007b8a <__swsetup_r+0xc6>
 8007b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b7c:	d1ba      	bne.n	8007af4 <__swsetup_r+0x30>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	0781      	lsls	r1, r0, #30
 8007b82:	bf58      	it	pl
 8007b84:	6963      	ldrpl	r3, [r4, #20]
 8007b86:	60a3      	str	r3, [r4, #8]
 8007b88:	e7f4      	b.n	8007b74 <__swsetup_r+0xb0>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e7f7      	b.n	8007b7e <__swsetup_r+0xba>
 8007b8e:	bf00      	nop
 8007b90:	20000014 	.word	0x20000014
 8007b94:	080084b4 	.word	0x080084b4
 8007b98:	080084d4 	.word	0x080084d4
 8007b9c:	08008494 	.word	0x08008494

08007ba0 <abort>:
 8007ba0:	b508      	push	{r3, lr}
 8007ba2:	2006      	movs	r0, #6
 8007ba4:	f000 fa96 	bl	80080d4 <raise>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f7f9 f845 	bl	8000c38 <_exit>
	...

08007bb0 <__sflush_r>:
 8007bb0:	898a      	ldrh	r2, [r1, #12]
 8007bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	0710      	lsls	r0, r2, #28
 8007bba:	460c      	mov	r4, r1
 8007bbc:	d458      	bmi.n	8007c70 <__sflush_r+0xc0>
 8007bbe:	684b      	ldr	r3, [r1, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc05      	bgt.n	8007bd0 <__sflush_r+0x20>
 8007bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	dc02      	bgt.n	8007bd0 <__sflush_r+0x20>
 8007bca:	2000      	movs	r0, #0
 8007bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bd2:	2e00      	cmp	r6, #0
 8007bd4:	d0f9      	beq.n	8007bca <__sflush_r+0x1a>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bdc:	682f      	ldr	r7, [r5, #0]
 8007bde:	602b      	str	r3, [r5, #0]
 8007be0:	d032      	beq.n	8007c48 <__sflush_r+0x98>
 8007be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007be4:	89a3      	ldrh	r3, [r4, #12]
 8007be6:	075a      	lsls	r2, r3, #29
 8007be8:	d505      	bpl.n	8007bf6 <__sflush_r+0x46>
 8007bea:	6863      	ldr	r3, [r4, #4]
 8007bec:	1ac0      	subs	r0, r0, r3
 8007bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bf0:	b10b      	cbz	r3, 8007bf6 <__sflush_r+0x46>
 8007bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bf4:	1ac0      	subs	r0, r0, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfc:	6a21      	ldr	r1, [r4, #32]
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b0      	blx	r6
 8007c02:	1c43      	adds	r3, r0, #1
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	d106      	bne.n	8007c16 <__sflush_r+0x66>
 8007c08:	6829      	ldr	r1, [r5, #0]
 8007c0a:	291d      	cmp	r1, #29
 8007c0c:	d82c      	bhi.n	8007c68 <__sflush_r+0xb8>
 8007c0e:	4a2a      	ldr	r2, [pc, #168]	; (8007cb8 <__sflush_r+0x108>)
 8007c10:	40ca      	lsrs	r2, r1
 8007c12:	07d6      	lsls	r6, r2, #31
 8007c14:	d528      	bpl.n	8007c68 <__sflush_r+0xb8>
 8007c16:	2200      	movs	r2, #0
 8007c18:	6062      	str	r2, [r4, #4]
 8007c1a:	04d9      	lsls	r1, r3, #19
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	d504      	bpl.n	8007c2c <__sflush_r+0x7c>
 8007c22:	1c42      	adds	r2, r0, #1
 8007c24:	d101      	bne.n	8007c2a <__sflush_r+0x7a>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	b903      	cbnz	r3, 8007c2c <__sflush_r+0x7c>
 8007c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	602f      	str	r7, [r5, #0]
 8007c30:	2900      	cmp	r1, #0
 8007c32:	d0ca      	beq.n	8007bca <__sflush_r+0x1a>
 8007c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c38:	4299      	cmp	r1, r3
 8007c3a:	d002      	beq.n	8007c42 <__sflush_r+0x92>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f7ff f9eb 	bl	8007018 <_free_r>
 8007c42:	2000      	movs	r0, #0
 8007c44:	6360      	str	r0, [r4, #52]	; 0x34
 8007c46:	e7c1      	b.n	8007bcc <__sflush_r+0x1c>
 8007c48:	6a21      	ldr	r1, [r4, #32]
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b0      	blx	r6
 8007c50:	1c41      	adds	r1, r0, #1
 8007c52:	d1c7      	bne.n	8007be4 <__sflush_r+0x34>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0c4      	beq.n	8007be4 <__sflush_r+0x34>
 8007c5a:	2b1d      	cmp	r3, #29
 8007c5c:	d001      	beq.n	8007c62 <__sflush_r+0xb2>
 8007c5e:	2b16      	cmp	r3, #22
 8007c60:	d101      	bne.n	8007c66 <__sflush_r+0xb6>
 8007c62:	602f      	str	r7, [r5, #0]
 8007c64:	e7b1      	b.n	8007bca <__sflush_r+0x1a>
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	e7ad      	b.n	8007bcc <__sflush_r+0x1c>
 8007c70:	690f      	ldr	r7, [r1, #16]
 8007c72:	2f00      	cmp	r7, #0
 8007c74:	d0a9      	beq.n	8007bca <__sflush_r+0x1a>
 8007c76:	0793      	lsls	r3, r2, #30
 8007c78:	680e      	ldr	r6, [r1, #0]
 8007c7a:	bf08      	it	eq
 8007c7c:	694b      	ldreq	r3, [r1, #20]
 8007c7e:	600f      	str	r7, [r1, #0]
 8007c80:	bf18      	it	ne
 8007c82:	2300      	movne	r3, #0
 8007c84:	eba6 0807 	sub.w	r8, r6, r7
 8007c88:	608b      	str	r3, [r1, #8]
 8007c8a:	f1b8 0f00 	cmp.w	r8, #0
 8007c8e:	dd9c      	ble.n	8007bca <__sflush_r+0x1a>
 8007c90:	6a21      	ldr	r1, [r4, #32]
 8007c92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c94:	4643      	mov	r3, r8
 8007c96:	463a      	mov	r2, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	47b0      	blx	r6
 8007c9c:	2800      	cmp	r0, #0
 8007c9e:	dc06      	bgt.n	8007cae <__sflush_r+0xfe>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	e78e      	b.n	8007bcc <__sflush_r+0x1c>
 8007cae:	4407      	add	r7, r0
 8007cb0:	eba8 0800 	sub.w	r8, r8, r0
 8007cb4:	e7e9      	b.n	8007c8a <__sflush_r+0xda>
 8007cb6:	bf00      	nop
 8007cb8:	20400001 	.word	0x20400001

08007cbc <_fflush_r>:
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	690b      	ldr	r3, [r1, #16]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b913      	cbnz	r3, 8007ccc <_fflush_r+0x10>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	4628      	mov	r0, r5
 8007cca:	bd38      	pop	{r3, r4, r5, pc}
 8007ccc:	b118      	cbz	r0, 8007cd6 <_fflush_r+0x1a>
 8007cce:	6983      	ldr	r3, [r0, #24]
 8007cd0:	b90b      	cbnz	r3, 8007cd6 <_fflush_r+0x1a>
 8007cd2:	f000 f887 	bl	8007de4 <__sinit>
 8007cd6:	4b14      	ldr	r3, [pc, #80]	; (8007d28 <_fflush_r+0x6c>)
 8007cd8:	429c      	cmp	r4, r3
 8007cda:	d11b      	bne.n	8007d14 <_fflush_r+0x58>
 8007cdc:	686c      	ldr	r4, [r5, #4]
 8007cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d0ef      	beq.n	8007cc6 <_fflush_r+0xa>
 8007ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ce8:	07d0      	lsls	r0, r2, #31
 8007cea:	d404      	bmi.n	8007cf6 <_fflush_r+0x3a>
 8007cec:	0599      	lsls	r1, r3, #22
 8007cee:	d402      	bmi.n	8007cf6 <_fflush_r+0x3a>
 8007cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cf2:	f000 f915 	bl	8007f20 <__retarget_lock_acquire_recursive>
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f7ff ff59 	bl	8007bb0 <__sflush_r>
 8007cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d00:	07da      	lsls	r2, r3, #31
 8007d02:	4605      	mov	r5, r0
 8007d04:	d4e0      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d06:	89a3      	ldrh	r3, [r4, #12]
 8007d08:	059b      	lsls	r3, r3, #22
 8007d0a:	d4dd      	bmi.n	8007cc8 <_fflush_r+0xc>
 8007d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d0e:	f000 f908 	bl	8007f22 <__retarget_lock_release_recursive>
 8007d12:	e7d9      	b.n	8007cc8 <_fflush_r+0xc>
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <_fflush_r+0x70>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d101      	bne.n	8007d1e <_fflush_r+0x62>
 8007d1a:	68ac      	ldr	r4, [r5, #8]
 8007d1c:	e7df      	b.n	8007cde <_fflush_r+0x22>
 8007d1e:	4b04      	ldr	r3, [pc, #16]	; (8007d30 <_fflush_r+0x74>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	bf08      	it	eq
 8007d24:	68ec      	ldreq	r4, [r5, #12]
 8007d26:	e7da      	b.n	8007cde <_fflush_r+0x22>
 8007d28:	080084b4 	.word	0x080084b4
 8007d2c:	080084d4 	.word	0x080084d4
 8007d30:	08008494 	.word	0x08008494

08007d34 <std>:
 8007d34:	2300      	movs	r3, #0
 8007d36:	b510      	push	{r4, lr}
 8007d38:	4604      	mov	r4, r0
 8007d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d42:	6083      	str	r3, [r0, #8]
 8007d44:	8181      	strh	r1, [r0, #12]
 8007d46:	6643      	str	r3, [r0, #100]	; 0x64
 8007d48:	81c2      	strh	r2, [r0, #14]
 8007d4a:	6183      	str	r3, [r0, #24]
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	2208      	movs	r2, #8
 8007d50:	305c      	adds	r0, #92	; 0x5c
 8007d52:	f7ff f8c1 	bl	8006ed8 <memset>
 8007d56:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <std+0x38>)
 8007d58:	6263      	str	r3, [r4, #36]	; 0x24
 8007d5a:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <std+0x3c>)
 8007d5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <std+0x40>)
 8007d60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d62:	4b05      	ldr	r3, [pc, #20]	; (8007d78 <std+0x44>)
 8007d64:	6224      	str	r4, [r4, #32]
 8007d66:	6323      	str	r3, [r4, #48]	; 0x30
 8007d68:	bd10      	pop	{r4, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0800810d 	.word	0x0800810d
 8007d70:	0800812f 	.word	0x0800812f
 8007d74:	08008167 	.word	0x08008167
 8007d78:	0800818b 	.word	0x0800818b

08007d7c <_cleanup_r>:
 8007d7c:	4901      	ldr	r1, [pc, #4]	; (8007d84 <_cleanup_r+0x8>)
 8007d7e:	f000 b8af 	b.w	8007ee0 <_fwalk_reent>
 8007d82:	bf00      	nop
 8007d84:	08007cbd 	.word	0x08007cbd

08007d88 <__sfmoreglue>:
 8007d88:	b570      	push	{r4, r5, r6, lr}
 8007d8a:	1e4a      	subs	r2, r1, #1
 8007d8c:	2568      	movs	r5, #104	; 0x68
 8007d8e:	4355      	muls	r5, r2
 8007d90:	460e      	mov	r6, r1
 8007d92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d96:	f7ff f98f 	bl	80070b8 <_malloc_r>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	b140      	cbz	r0, 8007db0 <__sfmoreglue+0x28>
 8007d9e:	2100      	movs	r1, #0
 8007da0:	e9c0 1600 	strd	r1, r6, [r0]
 8007da4:	300c      	adds	r0, #12
 8007da6:	60a0      	str	r0, [r4, #8]
 8007da8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dac:	f7ff f894 	bl	8006ed8 <memset>
 8007db0:	4620      	mov	r0, r4
 8007db2:	bd70      	pop	{r4, r5, r6, pc}

08007db4 <__sfp_lock_acquire>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_acquire+0x8>)
 8007db6:	f000 b8b3 	b.w	8007f20 <__retarget_lock_acquire_recursive>
 8007dba:	bf00      	nop
 8007dbc:	20013698 	.word	0x20013698

08007dc0 <__sfp_lock_release>:
 8007dc0:	4801      	ldr	r0, [pc, #4]	; (8007dc8 <__sfp_lock_release+0x8>)
 8007dc2:	f000 b8ae 	b.w	8007f22 <__retarget_lock_release_recursive>
 8007dc6:	bf00      	nop
 8007dc8:	20013698 	.word	0x20013698

08007dcc <__sinit_lock_acquire>:
 8007dcc:	4801      	ldr	r0, [pc, #4]	; (8007dd4 <__sinit_lock_acquire+0x8>)
 8007dce:	f000 b8a7 	b.w	8007f20 <__retarget_lock_acquire_recursive>
 8007dd2:	bf00      	nop
 8007dd4:	20013693 	.word	0x20013693

08007dd8 <__sinit_lock_release>:
 8007dd8:	4801      	ldr	r0, [pc, #4]	; (8007de0 <__sinit_lock_release+0x8>)
 8007dda:	f000 b8a2 	b.w	8007f22 <__retarget_lock_release_recursive>
 8007dde:	bf00      	nop
 8007de0:	20013693 	.word	0x20013693

08007de4 <__sinit>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4604      	mov	r4, r0
 8007de8:	f7ff fff0 	bl	8007dcc <__sinit_lock_acquire>
 8007dec:	69a3      	ldr	r3, [r4, #24]
 8007dee:	b11b      	cbz	r3, 8007df8 <__sinit+0x14>
 8007df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007df4:	f7ff bff0 	b.w	8007dd8 <__sinit_lock_release>
 8007df8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007dfc:	6523      	str	r3, [r4, #80]	; 0x50
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <__sinit+0x68>)
 8007e00:	4a13      	ldr	r2, [pc, #76]	; (8007e50 <__sinit+0x6c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e06:	42a3      	cmp	r3, r4
 8007e08:	bf04      	itt	eq
 8007e0a:	2301      	moveq	r3, #1
 8007e0c:	61a3      	streq	r3, [r4, #24]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 f820 	bl	8007e54 <__sfp>
 8007e14:	6060      	str	r0, [r4, #4]
 8007e16:	4620      	mov	r0, r4
 8007e18:	f000 f81c 	bl	8007e54 <__sfp>
 8007e1c:	60a0      	str	r0, [r4, #8]
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 f818 	bl	8007e54 <__sfp>
 8007e24:	2200      	movs	r2, #0
 8007e26:	60e0      	str	r0, [r4, #12]
 8007e28:	2104      	movs	r1, #4
 8007e2a:	6860      	ldr	r0, [r4, #4]
 8007e2c:	f7ff ff82 	bl	8007d34 <std>
 8007e30:	68a0      	ldr	r0, [r4, #8]
 8007e32:	2201      	movs	r2, #1
 8007e34:	2109      	movs	r1, #9
 8007e36:	f7ff ff7d 	bl	8007d34 <std>
 8007e3a:	68e0      	ldr	r0, [r4, #12]
 8007e3c:	2202      	movs	r2, #2
 8007e3e:	2112      	movs	r1, #18
 8007e40:	f7ff ff78 	bl	8007d34 <std>
 8007e44:	2301      	movs	r3, #1
 8007e46:	61a3      	str	r3, [r4, #24]
 8007e48:	e7d2      	b.n	8007df0 <__sinit+0xc>
 8007e4a:	bf00      	nop
 8007e4c:	080083a8 	.word	0x080083a8
 8007e50:	08007d7d 	.word	0x08007d7d

08007e54 <__sfp>:
 8007e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e56:	4607      	mov	r7, r0
 8007e58:	f7ff ffac 	bl	8007db4 <__sfp_lock_acquire>
 8007e5c:	4b1e      	ldr	r3, [pc, #120]	; (8007ed8 <__sfp+0x84>)
 8007e5e:	681e      	ldr	r6, [r3, #0]
 8007e60:	69b3      	ldr	r3, [r6, #24]
 8007e62:	b913      	cbnz	r3, 8007e6a <__sfp+0x16>
 8007e64:	4630      	mov	r0, r6
 8007e66:	f7ff ffbd 	bl	8007de4 <__sinit>
 8007e6a:	3648      	adds	r6, #72	; 0x48
 8007e6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	d503      	bpl.n	8007e7c <__sfp+0x28>
 8007e74:	6833      	ldr	r3, [r6, #0]
 8007e76:	b30b      	cbz	r3, 8007ebc <__sfp+0x68>
 8007e78:	6836      	ldr	r6, [r6, #0]
 8007e7a:	e7f7      	b.n	8007e6c <__sfp+0x18>
 8007e7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e80:	b9d5      	cbnz	r5, 8007eb8 <__sfp+0x64>
 8007e82:	4b16      	ldr	r3, [pc, #88]	; (8007edc <__sfp+0x88>)
 8007e84:	60e3      	str	r3, [r4, #12]
 8007e86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e8a:	6665      	str	r5, [r4, #100]	; 0x64
 8007e8c:	f000 f847 	bl	8007f1e <__retarget_lock_init_recursive>
 8007e90:	f7ff ff96 	bl	8007dc0 <__sfp_lock_release>
 8007e94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e9c:	6025      	str	r5, [r4, #0]
 8007e9e:	61a5      	str	r5, [r4, #24]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ea8:	f7ff f816 	bl	8006ed8 <memset>
 8007eac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007eb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb8:	3468      	adds	r4, #104	; 0x68
 8007eba:	e7d9      	b.n	8007e70 <__sfp+0x1c>
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	4638      	mov	r0, r7
 8007ec0:	f7ff ff62 	bl	8007d88 <__sfmoreglue>
 8007ec4:	4604      	mov	r4, r0
 8007ec6:	6030      	str	r0, [r6, #0]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d1d5      	bne.n	8007e78 <__sfp+0x24>
 8007ecc:	f7ff ff78 	bl	8007dc0 <__sfp_lock_release>
 8007ed0:	230c      	movs	r3, #12
 8007ed2:	603b      	str	r3, [r7, #0]
 8007ed4:	e7ee      	b.n	8007eb4 <__sfp+0x60>
 8007ed6:	bf00      	nop
 8007ed8:	080083a8 	.word	0x080083a8
 8007edc:	ffff0001 	.word	0xffff0001

08007ee0 <_fwalk_reent>:
 8007ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	4688      	mov	r8, r1
 8007ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007eec:	2700      	movs	r7, #0
 8007eee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ef2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ef6:	d505      	bpl.n	8007f04 <_fwalk_reent+0x24>
 8007ef8:	6824      	ldr	r4, [r4, #0]
 8007efa:	2c00      	cmp	r4, #0
 8007efc:	d1f7      	bne.n	8007eee <_fwalk_reent+0xe>
 8007efe:	4638      	mov	r0, r7
 8007f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f04:	89ab      	ldrh	r3, [r5, #12]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d907      	bls.n	8007f1a <_fwalk_reent+0x3a>
 8007f0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	d003      	beq.n	8007f1a <_fwalk_reent+0x3a>
 8007f12:	4629      	mov	r1, r5
 8007f14:	4630      	mov	r0, r6
 8007f16:	47c0      	blx	r8
 8007f18:	4307      	orrs	r7, r0
 8007f1a:	3568      	adds	r5, #104	; 0x68
 8007f1c:	e7e9      	b.n	8007ef2 <_fwalk_reent+0x12>

08007f1e <__retarget_lock_init_recursive>:
 8007f1e:	4770      	bx	lr

08007f20 <__retarget_lock_acquire_recursive>:
 8007f20:	4770      	bx	lr

08007f22 <__retarget_lock_release_recursive>:
 8007f22:	4770      	bx	lr

08007f24 <__swhatbuf_r>:
 8007f24:	b570      	push	{r4, r5, r6, lr}
 8007f26:	460e      	mov	r6, r1
 8007f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2c:	2900      	cmp	r1, #0
 8007f2e:	b096      	sub	sp, #88	; 0x58
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	da07      	bge.n	8007f46 <__swhatbuf_r+0x22>
 8007f36:	2300      	movs	r3, #0
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	89b3      	ldrh	r3, [r6, #12]
 8007f3c:	061a      	lsls	r2, r3, #24
 8007f3e:	d410      	bmi.n	8007f62 <__swhatbuf_r+0x3e>
 8007f40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f44:	e00e      	b.n	8007f64 <__swhatbuf_r+0x40>
 8007f46:	466a      	mov	r2, sp
 8007f48:	f000 f934 	bl	80081b4 <_fstat_r>
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	dbf2      	blt.n	8007f36 <__swhatbuf_r+0x12>
 8007f50:	9a01      	ldr	r2, [sp, #4]
 8007f52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f5a:	425a      	negs	r2, r3
 8007f5c:	415a      	adcs	r2, r3
 8007f5e:	602a      	str	r2, [r5, #0]
 8007f60:	e7ee      	b.n	8007f40 <__swhatbuf_r+0x1c>
 8007f62:	2340      	movs	r3, #64	; 0x40
 8007f64:	2000      	movs	r0, #0
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	b016      	add	sp, #88	; 0x58
 8007f6a:	bd70      	pop	{r4, r5, r6, pc}

08007f6c <__smakebuf_r>:
 8007f6c:	898b      	ldrh	r3, [r1, #12]
 8007f6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f70:	079d      	lsls	r5, r3, #30
 8007f72:	4606      	mov	r6, r0
 8007f74:	460c      	mov	r4, r1
 8007f76:	d507      	bpl.n	8007f88 <__smakebuf_r+0x1c>
 8007f78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	2301      	movs	r3, #1
 8007f82:	6163      	str	r3, [r4, #20]
 8007f84:	b002      	add	sp, #8
 8007f86:	bd70      	pop	{r4, r5, r6, pc}
 8007f88:	ab01      	add	r3, sp, #4
 8007f8a:	466a      	mov	r2, sp
 8007f8c:	f7ff ffca 	bl	8007f24 <__swhatbuf_r>
 8007f90:	9900      	ldr	r1, [sp, #0]
 8007f92:	4605      	mov	r5, r0
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff f88f 	bl	80070b8 <_malloc_r>
 8007f9a:	b948      	cbnz	r0, 8007fb0 <__smakebuf_r+0x44>
 8007f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa0:	059a      	lsls	r2, r3, #22
 8007fa2:	d4ef      	bmi.n	8007f84 <__smakebuf_r+0x18>
 8007fa4:	f023 0303 	bic.w	r3, r3, #3
 8007fa8:	f043 0302 	orr.w	r3, r3, #2
 8007fac:	81a3      	strh	r3, [r4, #12]
 8007fae:	e7e3      	b.n	8007f78 <__smakebuf_r+0xc>
 8007fb0:	4b0d      	ldr	r3, [pc, #52]	; (8007fe8 <__smakebuf_r+0x7c>)
 8007fb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fb4:	89a3      	ldrh	r3, [r4, #12]
 8007fb6:	6020      	str	r0, [r4, #0]
 8007fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fbc:	81a3      	strh	r3, [r4, #12]
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	6163      	str	r3, [r4, #20]
 8007fc2:	9b01      	ldr	r3, [sp, #4]
 8007fc4:	6120      	str	r0, [r4, #16]
 8007fc6:	b15b      	cbz	r3, 8007fe0 <__smakebuf_r+0x74>
 8007fc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f000 f903 	bl	80081d8 <_isatty_r>
 8007fd2:	b128      	cbz	r0, 8007fe0 <__smakebuf_r+0x74>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	f043 0301 	orr.w	r3, r3, #1
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	89a0      	ldrh	r0, [r4, #12]
 8007fe2:	4305      	orrs	r5, r0
 8007fe4:	81a5      	strh	r5, [r4, #12]
 8007fe6:	e7cd      	b.n	8007f84 <__smakebuf_r+0x18>
 8007fe8:	08007d7d 	.word	0x08007d7d

08007fec <memmove>:
 8007fec:	4288      	cmp	r0, r1
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	eb01 0402 	add.w	r4, r1, r2
 8007ff4:	d902      	bls.n	8007ffc <memmove+0x10>
 8007ff6:	4284      	cmp	r4, r0
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	d807      	bhi.n	800800c <memmove+0x20>
 8007ffc:	1e43      	subs	r3, r0, #1
 8007ffe:	42a1      	cmp	r1, r4
 8008000:	d008      	beq.n	8008014 <memmove+0x28>
 8008002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800800a:	e7f8      	b.n	8007ffe <memmove+0x12>
 800800c:	4402      	add	r2, r0
 800800e:	4601      	mov	r1, r0
 8008010:	428a      	cmp	r2, r1
 8008012:	d100      	bne.n	8008016 <memmove+0x2a>
 8008014:	bd10      	pop	{r4, pc}
 8008016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800801a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800801e:	e7f7      	b.n	8008010 <memmove+0x24>

08008020 <__malloc_lock>:
 8008020:	4801      	ldr	r0, [pc, #4]	; (8008028 <__malloc_lock+0x8>)
 8008022:	f7ff bf7d 	b.w	8007f20 <__retarget_lock_acquire_recursive>
 8008026:	bf00      	nop
 8008028:	20013694 	.word	0x20013694

0800802c <__malloc_unlock>:
 800802c:	4801      	ldr	r0, [pc, #4]	; (8008034 <__malloc_unlock+0x8>)
 800802e:	f7ff bf78 	b.w	8007f22 <__retarget_lock_release_recursive>
 8008032:	bf00      	nop
 8008034:	20013694 	.word	0x20013694

08008038 <_realloc_r>:
 8008038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803a:	4607      	mov	r7, r0
 800803c:	4614      	mov	r4, r2
 800803e:	460e      	mov	r6, r1
 8008040:	b921      	cbnz	r1, 800804c <_realloc_r+0x14>
 8008042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008046:	4611      	mov	r1, r2
 8008048:	f7ff b836 	b.w	80070b8 <_malloc_r>
 800804c:	b922      	cbnz	r2, 8008058 <_realloc_r+0x20>
 800804e:	f7fe ffe3 	bl	8007018 <_free_r>
 8008052:	4625      	mov	r5, r4
 8008054:	4628      	mov	r0, r5
 8008056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008058:	f000 f8e0 	bl	800821c <_malloc_usable_size_r>
 800805c:	42a0      	cmp	r0, r4
 800805e:	d20f      	bcs.n	8008080 <_realloc_r+0x48>
 8008060:	4621      	mov	r1, r4
 8008062:	4638      	mov	r0, r7
 8008064:	f7ff f828 	bl	80070b8 <_malloc_r>
 8008068:	4605      	mov	r5, r0
 800806a:	2800      	cmp	r0, #0
 800806c:	d0f2      	beq.n	8008054 <_realloc_r+0x1c>
 800806e:	4631      	mov	r1, r6
 8008070:	4622      	mov	r2, r4
 8008072:	f7fe ff23 	bl	8006ebc <memcpy>
 8008076:	4631      	mov	r1, r6
 8008078:	4638      	mov	r0, r7
 800807a:	f7fe ffcd 	bl	8007018 <_free_r>
 800807e:	e7e9      	b.n	8008054 <_realloc_r+0x1c>
 8008080:	4635      	mov	r5, r6
 8008082:	e7e7      	b.n	8008054 <_realloc_r+0x1c>

08008084 <_raise_r>:
 8008084:	291f      	cmp	r1, #31
 8008086:	b538      	push	{r3, r4, r5, lr}
 8008088:	4604      	mov	r4, r0
 800808a:	460d      	mov	r5, r1
 800808c:	d904      	bls.n	8008098 <_raise_r+0x14>
 800808e:	2316      	movs	r3, #22
 8008090:	6003      	str	r3, [r0, #0]
 8008092:	f04f 30ff 	mov.w	r0, #4294967295
 8008096:	bd38      	pop	{r3, r4, r5, pc}
 8008098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800809a:	b112      	cbz	r2, 80080a2 <_raise_r+0x1e>
 800809c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080a0:	b94b      	cbnz	r3, 80080b6 <_raise_r+0x32>
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f830 	bl	8008108 <_getpid_r>
 80080a8:	462a      	mov	r2, r5
 80080aa:	4601      	mov	r1, r0
 80080ac:	4620      	mov	r0, r4
 80080ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b2:	f000 b817 	b.w	80080e4 <_kill_r>
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d00a      	beq.n	80080d0 <_raise_r+0x4c>
 80080ba:	1c59      	adds	r1, r3, #1
 80080bc:	d103      	bne.n	80080c6 <_raise_r+0x42>
 80080be:	2316      	movs	r3, #22
 80080c0:	6003      	str	r3, [r0, #0]
 80080c2:	2001      	movs	r0, #1
 80080c4:	e7e7      	b.n	8008096 <_raise_r+0x12>
 80080c6:	2400      	movs	r4, #0
 80080c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080cc:	4628      	mov	r0, r5
 80080ce:	4798      	blx	r3
 80080d0:	2000      	movs	r0, #0
 80080d2:	e7e0      	b.n	8008096 <_raise_r+0x12>

080080d4 <raise>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	; (80080e0 <raise+0xc>)
 80080d6:	4601      	mov	r1, r0
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f7ff bfd3 	b.w	8008084 <_raise_r>
 80080de:	bf00      	nop
 80080e0:	20000014 	.word	0x20000014

080080e4 <_kill_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_kill_r+0x20>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	f7f8 fd91 	bl	8000c18 <_kill>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d102      	bne.n	8008100 <_kill_r+0x1c>
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	b103      	cbz	r3, 8008100 <_kill_r+0x1c>
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	bd38      	pop	{r3, r4, r5, pc}
 8008102:	bf00      	nop
 8008104:	2001369c 	.word	0x2001369c

08008108 <_getpid_r>:
 8008108:	f7f8 bd7e 	b.w	8000c08 <_getpid>

0800810c <__sread>:
 800810c:	b510      	push	{r4, lr}
 800810e:	460c      	mov	r4, r1
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	f000 f88a 	bl	800822c <_read_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	bfab      	itete	ge
 800811c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800811e:	89a3      	ldrhlt	r3, [r4, #12]
 8008120:	181b      	addge	r3, r3, r0
 8008122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008126:	bfac      	ite	ge
 8008128:	6563      	strge	r3, [r4, #84]	; 0x54
 800812a:	81a3      	strhlt	r3, [r4, #12]
 800812c:	bd10      	pop	{r4, pc}

0800812e <__swrite>:
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	461f      	mov	r7, r3
 8008134:	898b      	ldrh	r3, [r1, #12]
 8008136:	05db      	lsls	r3, r3, #23
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4616      	mov	r6, r2
 800813e:	d505      	bpl.n	800814c <__swrite+0x1e>
 8008140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008144:	2302      	movs	r3, #2
 8008146:	2200      	movs	r2, #0
 8008148:	f000 f856 	bl	80081f8 <_lseek_r>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	4628      	mov	r0, r5
 800815e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	f7fe be61 	b.w	8006e28 <_write_r>

08008166 <__sseek>:
 8008166:	b510      	push	{r4, lr}
 8008168:	460c      	mov	r4, r1
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	f000 f843 	bl	80081f8 <_lseek_r>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	bf15      	itete	ne
 8008178:	6560      	strne	r0, [r4, #84]	; 0x54
 800817a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800817e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008182:	81a3      	strheq	r3, [r4, #12]
 8008184:	bf18      	it	ne
 8008186:	81a3      	strhne	r3, [r4, #12]
 8008188:	bd10      	pop	{r4, pc}

0800818a <__sclose>:
 800818a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818e:	f000 b801 	b.w	8008194 <_close_r>
	...

08008194 <_close_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d06      	ldr	r5, [pc, #24]	; (80081b0 <_close_r+0x1c>)
 8008198:	2300      	movs	r3, #0
 800819a:	4604      	mov	r4, r0
 800819c:	4608      	mov	r0, r1
 800819e:	602b      	str	r3, [r5, #0]
 80081a0:	f7f8 fd71 	bl	8000c86 <_close>
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	d102      	bne.n	80081ae <_close_r+0x1a>
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	b103      	cbz	r3, 80081ae <_close_r+0x1a>
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	bd38      	pop	{r3, r4, r5, pc}
 80081b0:	2001369c 	.word	0x2001369c

080081b4 <_fstat_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d07      	ldr	r5, [pc, #28]	; (80081d4 <_fstat_r+0x20>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	f7f8 fd6c 	bl	8000c9e <_fstat>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d102      	bne.n	80081d0 <_fstat_r+0x1c>
 80081ca:	682b      	ldr	r3, [r5, #0]
 80081cc:	b103      	cbz	r3, 80081d0 <_fstat_r+0x1c>
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	bd38      	pop	{r3, r4, r5, pc}
 80081d2:	bf00      	nop
 80081d4:	2001369c 	.word	0x2001369c

080081d8 <_isatty_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d06      	ldr	r5, [pc, #24]	; (80081f4 <_isatty_r+0x1c>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	602b      	str	r3, [r5, #0]
 80081e4:	f7f8 fd6b 	bl	8000cbe <_isatty>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_isatty_r+0x1a>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_isatty_r+0x1a>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	2001369c 	.word	0x2001369c

080081f8 <_lseek_r>:
 80081f8:	b538      	push	{r3, r4, r5, lr}
 80081fa:	4d07      	ldr	r5, [pc, #28]	; (8008218 <_lseek_r+0x20>)
 80081fc:	4604      	mov	r4, r0
 80081fe:	4608      	mov	r0, r1
 8008200:	4611      	mov	r1, r2
 8008202:	2200      	movs	r2, #0
 8008204:	602a      	str	r2, [r5, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	f7f8 fd64 	bl	8000cd4 <_lseek>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_lseek_r+0x1e>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_lseek_r+0x1e>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	2001369c 	.word	0x2001369c

0800821c <_malloc_usable_size_r>:
 800821c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008220:	1f18      	subs	r0, r3, #4
 8008222:	2b00      	cmp	r3, #0
 8008224:	bfbc      	itt	lt
 8008226:	580b      	ldrlt	r3, [r1, r0]
 8008228:	18c0      	addlt	r0, r0, r3
 800822a:	4770      	bx	lr

0800822c <_read_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d07      	ldr	r5, [pc, #28]	; (800824c <_read_r+0x20>)
 8008230:	4604      	mov	r4, r0
 8008232:	4608      	mov	r0, r1
 8008234:	4611      	mov	r1, r2
 8008236:	2200      	movs	r2, #0
 8008238:	602a      	str	r2, [r5, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	f7f8 fd06 	bl	8000c4c <_read>
 8008240:	1c43      	adds	r3, r0, #1
 8008242:	d102      	bne.n	800824a <_read_r+0x1e>
 8008244:	682b      	ldr	r3, [r5, #0]
 8008246:	b103      	cbz	r3, 800824a <_read_r+0x1e>
 8008248:	6023      	str	r3, [r4, #0]
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	2001369c 	.word	0x2001369c

08008250 <_init>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr

0800825c <_fini>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr
